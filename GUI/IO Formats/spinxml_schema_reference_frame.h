#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.0.30319.17929.
// 
using namespace System;
ref class spin_system_ref;


/** \class  spin_system_ref
*  Auto-generated by xsd spin_system_ref class. Minor changes in order to have some null for some fields
* To be used with spin_system.h
*/
[System::Serializable, 
System::ComponentModel::DesignerCategoryAttribute(L"code"), 
System::ComponentModel::ToolboxItem(true), 
System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
System::Xml::Serialization::XmlRootAttribute(L"spin_system_ref"), 
System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
public ref class spin_system_ref : public ::System::Data::DataSet {
    public : ref class reference_frameDataTable;
    public : ref class directionDataTable;
    public : ref class euler_anglesDataTable;
    public : ref class angle_axisDataTable;
    public : ref class axisDataTable;
    public : ref class quaternionDataTable;
    public : ref class dcmDataTable;
    public : ref class reference_frameRow;
    public : ref class directionRow;
    public : ref class euler_anglesRow;
    public : ref class angle_axisRow;
    public : ref class axisRow;
    public : ref class quaternionRow;
    public : ref class dcmRow;
    public : ref class reference_frameRowChangeEvent;
    public : ref class directionRowChangeEvent;
    public : ref class euler_anglesRowChangeEvent;
    public : ref class angle_axisRowChangeEvent;
    public : ref class axisRowChangeEvent;
    public : ref class quaternionRowChangeEvent;
    public : ref class dcmRowChangeEvent;
    
    private: spin_system_ref::reference_frameDataTable^  tablereference_frame;
    
    private: spin_system_ref::directionDataTable^  tabledirection;
    
    private: spin_system_ref::euler_anglesDataTable^  tableeuler_angles;
    
    private: spin_system_ref::angle_axisDataTable^  tableangle_axis;
    
    private: spin_system_ref::axisDataTable^  tableaxis;
    
    private: spin_system_ref::quaternionDataTable^  tablequaternion;
    
    private: spin_system_ref::dcmDataTable^  tabledcm;
    
    private: ::System::Data::DataRelation^  relationreference_frame_direction;
    
    private: ::System::Data::DataRelation^  relationdirection_euler_angles;
    
    private: ::System::Data::DataRelation^  relationdirection_angle_axis;
    
    private: ::System::Data::DataRelation^  relationangle_axis_axis;
    
    private: ::System::Data::DataRelation^  relationdirection_quaternion;
    
    private: ::System::Data::DataRelation^  relationdirection_dcm;
    
    private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void reference_frameRowChangeEventHandler(::System::Object^  sender, spin_system_ref::reference_frameRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void directionRowChangeEventHandler(::System::Object^  sender, spin_system_ref::directionRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void euler_anglesRowChangeEventHandler(::System::Object^  sender, spin_system_ref::euler_anglesRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void angle_axisRowChangeEventHandler(::System::Object^  sender, spin_system_ref::angle_axisRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void axisRowChangeEventHandler(::System::Object^  sender, spin_system_ref::axisRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void quaternionRowChangeEventHandler(::System::Object^  sender, spin_system_ref::quaternionRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void dcmRowChangeEventHandler(::System::Object^  sender, spin_system_ref::dcmRowChangeEvent^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    spin_system_ref();
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    spin_system_ref(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system_ref::reference_frameDataTable^  reference_frame {
        spin_system_ref::reference_frameDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system_ref::directionDataTable^  direction {
        spin_system_ref::directionDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system_ref::euler_anglesDataTable^  euler_angles {
        spin_system_ref::euler_anglesDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system_ref::angle_axisDataTable^  angle_axis {
        spin_system_ref::angle_axisDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system_ref::axisDataTable^  axis {
        spin_system_ref::axisDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system_ref::quaternionDataTable^  quaternion {
        spin_system_ref::quaternionDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system_ref::dcmDataTable^  dcm {
        spin_system_ref::dcmDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::BrowsableAttribute(true), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
    virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
        ::System::Data::SchemaSerializationMode get() override;
        System::Void set(::System::Data::SchemaSerializationMode value) override;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataTableCollection^  Tables {
        ::System::Data::DataTableCollection^  get() new;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataRelationCollection^  Relations {
        ::System::Data::DataRelationCollection^  get() new;
    }
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void InitializeDerivedDataSet() override;
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Data::DataSet^  Clone() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeTables() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeRelations() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars();
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars(::System::Boolean initTable);
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitClass();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializereference_frame();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializedirection();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeeuler_angles();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeangle_axis();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeaxis();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializequaternion();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializedcm();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class reference_frameDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnid;
        
        private: ::System::Data::DataColumn^  columnparent_reference_frame_id;
        
        private: ::System::Data::DataColumn^  columnlabel;
        
        private: ::System::Data::DataColumn^  columnreference_frame_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::reference_frameRowChangeEventHandler^  reference_frameRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::reference_frameRowChangeEventHandler^  reference_frameRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::reference_frameRowChangeEventHandler^  reference_frameRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::reference_frameRowChangeEventHandler^  reference_frameRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        reference_frameDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        reference_frameDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        reference_frameDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  idColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  parent_reference_frame_idColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  labelColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  reference_frame_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::reference_frameRow^  default [::System::Int32 ] {
            spin_system_ref::reference_frameRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addreference_frameRow(spin_system_ref::reference_frameRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system_ref::reference_frameRow^  Addreference_frameRow(System::Int64 id, System::Int64 parent_reference_frame_id, 
                    System::String^  label);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system_ref::reference_frameRow^  Newreference_frameRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removereference_frameRow(spin_system_ref::reference_frameRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class directionDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndirection_Id;
        
        private: ::System::Data::DataColumn^  columnreference_frame_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::directionRowChangeEventHandler^  directionRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::directionRowChangeEventHandler^  directionRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::directionRowChangeEventHandler^  directionRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::directionRowChangeEventHandler^  directionRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        directionDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        directionDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        directionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  direction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  reference_frame_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::directionRow^  default [::System::Int32 ] {
            spin_system_ref::directionRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AdddirectionRow(spin_system_ref::directionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system_ref::directionRow^  AdddirectionRow(spin_system_ref::reference_frameRow^  parentreference_frameRowByreference_frame_direction);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system_ref::directionRow^  NewdirectionRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovedirectionRow(spin_system_ref::directionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class euler_anglesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnalpha;
        
        private: ::System::Data::DataColumn^  columnbeta;
        
        private: ::System::Data::DataColumn^  columngamma;
        
        private: ::System::Data::DataColumn^  columndirection_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::euler_anglesRowChangeEventHandler^  euler_anglesRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::euler_anglesRowChangeEventHandler^  euler_anglesRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::euler_anglesRowChangeEventHandler^  euler_anglesRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::euler_anglesRowChangeEventHandler^  euler_anglesRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        euler_anglesDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        euler_anglesDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        euler_anglesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  alphaColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  betaColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  gammaColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  direction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::euler_anglesRow^  default [::System::Int32 ] {
            spin_system_ref::euler_anglesRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addeuler_anglesRow(spin_system_ref::euler_anglesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system_ref::euler_anglesRow^  Addeuler_anglesRow(System::Double alpha, System::Double beta, System::Double gamma, 
                    spin_system_ref::directionRow^  parentdirectionRowBydirection_euler_angles);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system_ref::euler_anglesRow^  Neweuler_anglesRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removeeuler_anglesRow(spin_system_ref::euler_anglesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class angle_axisDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnangle;
        
        private: ::System::Data::DataColumn^  columnangle_axis_Id;
        
        private: ::System::Data::DataColumn^  columndirection_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::angle_axisRowChangeEventHandler^  angle_axisRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::angle_axisRowChangeEventHandler^  angle_axisRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::angle_axisRowChangeEventHandler^  angle_axisRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::angle_axisRowChangeEventHandler^  angle_axisRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        angle_axisDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        angle_axisDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        angle_axisDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  angleColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  angle_axis_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  direction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::angle_axisRow^  default [::System::Int32 ] {
            spin_system_ref::angle_axisRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addangle_axisRow(spin_system_ref::angle_axisRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system_ref::angle_axisRow^  Addangle_axisRow(System::Double angle, spin_system_ref::directionRow^  parentdirectionRowBydirection_angle_axis);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system_ref::angle_axisRow^  Newangle_axisRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removeangle_axisRow(spin_system_ref::angle_axisRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class axisDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnx;
        
        private: ::System::Data::DataColumn^  columny;
        
        private: ::System::Data::DataColumn^  columnz;
        
        private: ::System::Data::DataColumn^  columnangle_axis_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::axisRowChangeEventHandler^  axisRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::axisRowChangeEventHandler^  axisRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::axisRowChangeEventHandler^  axisRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::axisRowChangeEventHandler^  axisRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axisDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axisDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axisDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  angle_axis_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::axisRow^  default [::System::Int32 ] {
            spin_system_ref::axisRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddaxisRow(spin_system_ref::axisRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system_ref::axisRow^  AddaxisRow(System::Double x, System::Double y, System::Double z, spin_system_ref::angle_axisRow^  parentangle_axisRowByangle_axis_axis);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system_ref::axisRow^  NewaxisRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveaxisRow(spin_system_ref::axisRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class quaternionDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnre;
        
        private: ::System::Data::DataColumn^  columni;
        
        private: ::System::Data::DataColumn^  columnj;
        
        private: ::System::Data::DataColumn^  columnk;
        
        private: ::System::Data::DataColumn^  columndirection_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::quaternionRowChangeEventHandler^  quaternionRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::quaternionRowChangeEventHandler^  quaternionRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::quaternionRowChangeEventHandler^  quaternionRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::quaternionRowChangeEventHandler^  quaternionRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        quaternionDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        quaternionDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        quaternionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  reColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  iColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  kColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  direction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::quaternionRow^  default [::System::Int32 ] {
            spin_system_ref::quaternionRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddquaternionRow(spin_system_ref::quaternionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system_ref::quaternionRow^  AddquaternionRow(System::Double re, System::Double i, System::Double j, System::Double k, 
                    spin_system_ref::directionRow^  parentdirectionRowBydirection_quaternion);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system_ref::quaternionRow^  NewquaternionRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovequaternionRow(spin_system_ref::quaternionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class dcmDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnxx;
        
        private: ::System::Data::DataColumn^  columnxy;
        
        private: ::System::Data::DataColumn^  columnxz;
        
        private: ::System::Data::DataColumn^  columnyx;
        
        private: ::System::Data::DataColumn^  columnyy;
        
        private: ::System::Data::DataColumn^  columnyz;
        
        private: ::System::Data::DataColumn^  columnzx;
        
        private: ::System::Data::DataColumn^  columnzy;
        
        private: ::System::Data::DataColumn^  columnzz;
        
        private: ::System::Data::DataColumn^  columndirection_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::dcmRowChangeEventHandler^  dcmRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::dcmRowChangeEventHandler^  dcmRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::dcmRowChangeEventHandler^  dcmRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system_ref::dcmRowChangeEventHandler^  dcmRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        dcmDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        dcmDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        dcmDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xxColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xyColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xzColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yxColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yyColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yzColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zxColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zyColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zzColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  direction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::dcmRow^  default [::System::Int32 ] {
            spin_system_ref::dcmRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AdddcmRow(spin_system_ref::dcmRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system_ref::dcmRow^  AdddcmRow(
                    System::Double xx, 
                    System::Double xy, 
                    System::Double xz, 
                    System::Double yx, 
                    System::Double yy, 
                    System::Double yz, 
                    System::Double zx, 
                    System::Double zy, 
                    System::Double zz, 
                    spin_system_ref::directionRow^  parentdirectionRowBydirection_dcm);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system_ref::dcmRow^  NewdcmRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovedcmRow(spin_system_ref::dcmRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class reference_frameRow : public ::System::Data::DataRow {
        
        private: spin_system_ref::reference_frameDataTable^  tablereference_frame;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        reference_frameRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 id {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 parent_reference_frame_id {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  label {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 reference_frame_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isparent_reference_frame_idNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setparent_reference_frame_idNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IslabelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetlabelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system_ref::directionRow^  >^  GetdirectionRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class directionRow : public ::System::Data::DataRow {
        
        private: spin_system_ref::directionDataTable^  tabledirection;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        directionRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 direction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 reference_frame_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::reference_frameRow^  reference_frameRow {
            spin_system_ref::reference_frameRow^  get();
            System::Void set(spin_system_ref::reference_frameRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isreference_frame_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setreference_frame_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system_ref::euler_anglesRow^  >^  Geteuler_anglesRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system_ref::angle_axisRow^  >^  Getangle_axisRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system_ref::quaternionRow^  >^  GetquaternionRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system_ref::dcmRow^  >^  GetdcmRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class euler_anglesRow : public ::System::Data::DataRow {
        
        private: spin_system_ref::euler_anglesDataTable^  tableeuler_angles;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        euler_anglesRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double alpha {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double beta {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double gamma {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 direction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::directionRow^  directionRow {
            spin_system_ref::directionRow^  get();
            System::Void set(spin_system_ref::directionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isdirection_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setdirection_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class angle_axisRow : public ::System::Data::DataRow {
        
        private: spin_system_ref::angle_axisDataTable^  tableangle_axis;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        angle_axisRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double angle {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 angle_axis_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 direction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::directionRow^  directionRow {
            spin_system_ref::directionRow^  get();
            System::Void set(spin_system_ref::directionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isdirection_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setdirection_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system_ref::axisRow^  >^  GetaxisRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class axisRow : public ::System::Data::DataRow {
        
        private: spin_system_ref::axisDataTable^  tableaxis;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axisRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double x {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double y {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double z {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 angle_axis_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::angle_axisRow^  angle_axisRow {
            spin_system_ref::angle_axisRow^  get();
            System::Void set(spin_system_ref::angle_axisRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isangle_axis_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setangle_axis_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class quaternionRow : public ::System::Data::DataRow {
        
        private: spin_system_ref::quaternionDataTable^  tablequaternion;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        quaternionRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double re {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double i {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double j {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double k {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 direction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::directionRow^  directionRow {
            spin_system_ref::directionRow^  get();
            System::Void set(spin_system_ref::directionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isdirection_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setdirection_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class dcmRow : public ::System::Data::DataRow {
        
        private: spin_system_ref::dcmDataTable^  tabledcm;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        dcmRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double xx {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double xy {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double xz {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double yx {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double yy {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double yz {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double zx {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double zy {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double zz {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 direction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::directionRow^  directionRow {
            spin_system_ref::directionRow^  get();
            System::Void set(spin_system_ref::directionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isdirection_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setdirection_IdNull();
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class reference_frameRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system_ref::reference_frameRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        reference_frameRowChangeEvent(spin_system_ref::reference_frameRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::reference_frameRow^  Row {
            spin_system_ref::reference_frameRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class directionRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system_ref::directionRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        directionRowChangeEvent(spin_system_ref::directionRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::directionRow^  Row {
            spin_system_ref::directionRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class euler_anglesRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system_ref::euler_anglesRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        euler_anglesRowChangeEvent(spin_system_ref::euler_anglesRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::euler_anglesRow^  Row {
            spin_system_ref::euler_anglesRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class angle_axisRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system_ref::angle_axisRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        angle_axisRowChangeEvent(spin_system_ref::angle_axisRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::angle_axisRow^  Row {
            spin_system_ref::angle_axisRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class axisRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system_ref::axisRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axisRowChangeEvent(spin_system_ref::axisRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::axisRow^  Row {
            spin_system_ref::axisRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class quaternionRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system_ref::quaternionRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        quaternionRowChangeEvent(spin_system_ref::quaternionRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::quaternionRow^  Row {
            spin_system_ref::quaternionRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class dcmRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system_ref::dcmRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        dcmRowChangeEvent(spin_system_ref::dcmRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system_ref::dcmRow^  Row {
            spin_system_ref::dcmRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
};


inline spin_system_ref::spin_system_ref() {
    this->BeginInit();
    this->InitClass();
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &spin_system_ref::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    __super::Relations->CollectionChanged += schemaChangedHandler;
    this->EndInit();
}

inline spin_system_ref::spin_system_ref(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataSet(info, context, false) {
    if (this->IsBinarySerialized(info, context) == true) {
        this->InitVars(false);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &spin_system_ref::SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler1;
        this->Relations->CollectionChanged += schemaChangedHandler1;
        return;
    }
    ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
    if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        if (ds->Tables[L"reference_frame"] != nullptr) {
            __super::Tables->Add((gcnew spin_system_ref::reference_frameDataTable(ds->Tables[L"reference_frame"])));
        }
        if (ds->Tables[L"direction"] != nullptr) {
            __super::Tables->Add((gcnew spin_system_ref::directionDataTable(ds->Tables[L"direction"])));
        }
        if (ds->Tables[L"euler_angles"] != nullptr) {
            __super::Tables->Add((gcnew spin_system_ref::euler_anglesDataTable(ds->Tables[L"euler_angles"])));
        }
        if (ds->Tables[L"angle_axis"] != nullptr) {
            __super::Tables->Add((gcnew spin_system_ref::angle_axisDataTable(ds->Tables[L"angle_axis"])));
        }
        if (ds->Tables[L"axis"] != nullptr) {
            __super::Tables->Add((gcnew spin_system_ref::axisDataTable(ds->Tables[L"axis"])));
        }
        if (ds->Tables[L"quaternion"] != nullptr) {
            __super::Tables->Add((gcnew spin_system_ref::quaternionDataTable(ds->Tables[L"quaternion"])));
        }
        if (ds->Tables[L"dcm"] != nullptr) {
            __super::Tables->Add((gcnew spin_system_ref::dcmDataTable(ds->Tables[L"dcm"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
    }
    this->GetSerializationData(info, context);
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &spin_system_ref::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    this->Relations->CollectionChanged += schemaChangedHandler;
}

inline spin_system_ref::reference_frameDataTable^  spin_system_ref::reference_frame::get() {
    return this->tablereference_frame;
}

inline spin_system_ref::directionDataTable^  spin_system_ref::direction::get() {
    return this->tabledirection;
}

inline spin_system_ref::euler_anglesDataTable^  spin_system_ref::euler_angles::get() {
    return this->tableeuler_angles;
}

inline spin_system_ref::angle_axisDataTable^  spin_system_ref::angle_axis::get() {
    return this->tableangle_axis;
}

inline spin_system_ref::axisDataTable^  spin_system_ref::axis::get() {
    return this->tableaxis;
}

inline spin_system_ref::quaternionDataTable^  spin_system_ref::quaternion::get() {
    return this->tablequaternion;
}

inline spin_system_ref::dcmDataTable^  spin_system_ref::dcm::get() {
    return this->tabledcm;
}

inline ::System::Data::SchemaSerializationMode spin_system_ref::SchemaSerializationMode::get() {
    return this->_schemaSerializationMode;
}
inline System::Void spin_system_ref::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
    this->_schemaSerializationMode = __identifier(value);
}

inline ::System::Data::DataTableCollection^  spin_system_ref::Tables::get() {
    return __super::Tables;
}

inline ::System::Data::DataRelationCollection^  spin_system_ref::Relations::get() {
    return __super::Relations;
}

inline ::System::Void spin_system_ref::InitializeDerivedDataSet() {
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline ::System::Data::DataSet^  spin_system_ref::Clone() {
    spin_system_ref^  cln = (cli::safe_cast<spin_system_ref^  >(__super::Clone()));
    cln->InitVars();
    cln->SchemaSerializationMode = this->SchemaSerializationMode;
    return cln;
}

inline ::System::Boolean spin_system_ref::ShouldSerializeTables() {
    return false;
}

inline ::System::Boolean spin_system_ref::ShouldSerializeRelations() {
    return false;
}

inline ::System::Void spin_system_ref::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
    if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        this->Reset();
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXml(reader);
        if (ds->Tables[L"reference_frame"] != nullptr) {
            __super::Tables->Add((gcnew spin_system_ref::reference_frameDataTable(ds->Tables[L"reference_frame"])));
        }
        if (ds->Tables[L"direction"] != nullptr) {
            __super::Tables->Add((gcnew spin_system_ref::directionDataTable(ds->Tables[L"direction"])));
        }
        if (ds->Tables[L"euler_angles"] != nullptr) {
            __super::Tables->Add((gcnew spin_system_ref::euler_anglesDataTable(ds->Tables[L"euler_angles"])));
        }
        if (ds->Tables[L"angle_axis"] != nullptr) {
            __super::Tables->Add((gcnew spin_system_ref::angle_axisDataTable(ds->Tables[L"angle_axis"])));
        }
        if (ds->Tables[L"axis"] != nullptr) {
            __super::Tables->Add((gcnew spin_system_ref::axisDataTable(ds->Tables[L"axis"])));
        }
        if (ds->Tables[L"quaternion"] != nullptr) {
            __super::Tables->Add((gcnew spin_system_ref::quaternionDataTable(ds->Tables[L"quaternion"])));
        }
        if (ds->Tables[L"dcm"] != nullptr) {
            __super::Tables->Add((gcnew spin_system_ref::dcmDataTable(ds->Tables[L"dcm"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXml(reader);
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchema^  spin_system_ref::GetSchemaSerializable() {
    ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
    this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
    stream->Position = 0;
    return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
}

inline ::System::Void spin_system_ref::InitVars() {
    this->InitVars(true);
}

inline ::System::Void spin_system_ref::InitVars(::System::Boolean initTable) {
    this->tablereference_frame = (cli::safe_cast<spin_system_ref::reference_frameDataTable^  >(__super::Tables[L"reference_frame"]));
    if (initTable == true) {
        if (this->tablereference_frame != nullptr) {
            this->tablereference_frame->InitVars();
        }
    }
    this->tabledirection = (cli::safe_cast<spin_system_ref::directionDataTable^  >(__super::Tables[L"direction"]));
    if (initTable == true) {
        if (this->tabledirection != nullptr) {
            this->tabledirection->InitVars();
        }
    }
    this->tableeuler_angles = (cli::safe_cast<spin_system_ref::euler_anglesDataTable^  >(__super::Tables[L"euler_angles"]));
    if (initTable == true) {
        if (this->tableeuler_angles != nullptr) {
            this->tableeuler_angles->InitVars();
        }
    }
    this->tableangle_axis = (cli::safe_cast<spin_system_ref::angle_axisDataTable^  >(__super::Tables[L"angle_axis"]));
    if (initTable == true) {
        if (this->tableangle_axis != nullptr) {
            this->tableangle_axis->InitVars();
        }
    }
    this->tableaxis = (cli::safe_cast<spin_system_ref::axisDataTable^  >(__super::Tables[L"axis"]));
    if (initTable == true) {
        if (this->tableaxis != nullptr) {
            this->tableaxis->InitVars();
        }
    }
    this->tablequaternion = (cli::safe_cast<spin_system_ref::quaternionDataTable^  >(__super::Tables[L"quaternion"]));
    if (initTable == true) {
        if (this->tablequaternion != nullptr) {
            this->tablequaternion->InitVars();
        }
    }
    this->tabledcm = (cli::safe_cast<spin_system_ref::dcmDataTable^  >(__super::Tables[L"dcm"]));
    if (initTable == true) {
        if (this->tabledcm != nullptr) {
            this->tabledcm->InitVars();
        }
    }
    this->relationreference_frame_direction = this->Relations[L"reference_frame_direction"];
    this->relationdirection_euler_angles = this->Relations[L"direction_euler_angles"];
    this->relationdirection_angle_axis = this->Relations[L"direction_angle_axis"];
    this->relationangle_axis_axis = this->Relations[L"angle_axis_axis"];
    this->relationdirection_quaternion = this->Relations[L"direction_quaternion"];
    this->relationdirection_dcm = this->Relations[L"direction_dcm"];
}

inline ::System::Void spin_system_ref::InitClass() {
    this->DataSetName = L"spin_system_ref";
    this->Prefix = L"";
    this->EnforceConstraints = true;
    this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
    this->tablereference_frame = (gcnew spin_system_ref::reference_frameDataTable());
    __super::Tables->Add(this->tablereference_frame);
    this->tabledirection = (gcnew spin_system_ref::directionDataTable());
    __super::Tables->Add(this->tabledirection);
    this->tableeuler_angles = (gcnew spin_system_ref::euler_anglesDataTable());
    __super::Tables->Add(this->tableeuler_angles);
    this->tableangle_axis = (gcnew spin_system_ref::angle_axisDataTable());
    __super::Tables->Add(this->tableangle_axis);
    this->tableaxis = (gcnew spin_system_ref::axisDataTable());
    __super::Tables->Add(this->tableaxis);
    this->tablequaternion = (gcnew spin_system_ref::quaternionDataTable());
    __super::Tables->Add(this->tablequaternion);
    this->tabledcm = (gcnew spin_system_ref::dcmDataTable());
    __super::Tables->Add(this->tabledcm);
    ::System::Data::ForeignKeyConstraint^  fkc;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"reference_frame_direction", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablereference_frame->reference_frame_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledirection->reference_frame_IdColumn}));
    this->tabledirection->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"direction_euler_angles", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledirection->direction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableeuler_angles->direction_IdColumn}));
    this->tableeuler_angles->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"direction_angle_axis", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledirection->direction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableangle_axis->direction_IdColumn}));
    this->tableangle_axis->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"angle_axis_axis", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableangle_axis->angle_axis_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableaxis->angle_axis_IdColumn}));
    this->tableaxis->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"direction_quaternion", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledirection->direction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablequaternion->direction_IdColumn}));
    this->tablequaternion->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"direction_dcm", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledirection->direction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledcm->direction_IdColumn}));
    this->tabledcm->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    this->relationreference_frame_direction = (gcnew ::System::Data::DataRelation(L"reference_frame_direction", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablereference_frame->reference_frame_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledirection->reference_frame_IdColumn}, false));
    this->relationreference_frame_direction->Nested = true;
    this->Relations->Add(this->relationreference_frame_direction);
    this->relationdirection_euler_angles = (gcnew ::System::Data::DataRelation(L"direction_euler_angles", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledirection->direction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableeuler_angles->direction_IdColumn}, false));
    this->relationdirection_euler_angles->Nested = true;
    this->Relations->Add(this->relationdirection_euler_angles);
    this->relationdirection_angle_axis = (gcnew ::System::Data::DataRelation(L"direction_angle_axis", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledirection->direction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableangle_axis->direction_IdColumn}, false));
    this->relationdirection_angle_axis->Nested = true;
    this->Relations->Add(this->relationdirection_angle_axis);
    this->relationangle_axis_axis = (gcnew ::System::Data::DataRelation(L"angle_axis_axis", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableangle_axis->angle_axis_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableaxis->angle_axis_IdColumn}, false));
    this->relationangle_axis_axis->Nested = true;
    this->Relations->Add(this->relationangle_axis_axis);
    this->relationdirection_quaternion = (gcnew ::System::Data::DataRelation(L"direction_quaternion", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledirection->direction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablequaternion->direction_IdColumn}, false));
    this->relationdirection_quaternion->Nested = true;
    this->Relations->Add(this->relationdirection_quaternion);
    this->relationdirection_dcm = (gcnew ::System::Data::DataRelation(L"direction_dcm", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledirection->direction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledcm->direction_IdColumn}, false));
    this->relationdirection_dcm->Nested = true;
    this->Relations->Add(this->relationdirection_dcm);
}

inline ::System::Boolean spin_system_ref::ShouldSerializereference_frame() {
    return false;
}

inline ::System::Boolean spin_system_ref::ShouldSerializedirection() {
    return false;
}

inline ::System::Boolean spin_system_ref::ShouldSerializeeuler_angles() {
    return false;
}

inline ::System::Boolean spin_system_ref::ShouldSerializeangle_axis() {
    return false;
}

inline ::System::Boolean spin_system_ref::ShouldSerializeaxis() {
    return false;
}

inline ::System::Boolean spin_system_ref::ShouldSerializequaternion() {
    return false;
}

inline ::System::Boolean spin_system_ref::ShouldSerializedcm() {
    return false;
}

inline ::System::Void spin_system_ref::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
    if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system_ref::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    spin_system_ref^  ds = (gcnew spin_system_ref());
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any->Namespace = ds->Namespace;
    sequence->Items->Add(any);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system_ref::reference_frameDataTable::reference_frameDataTable() {
    this->TableName = L"reference_frame";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system_ref::reference_frameDataTable::reference_frameDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system_ref::reference_frameDataTable::reference_frameDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system_ref::reference_frameDataTable::idColumn::get() {
    return this->columnid;
}

inline ::System::Data::DataColumn^  spin_system_ref::reference_frameDataTable::parent_reference_frame_idColumn::get() {
    return this->columnparent_reference_frame_id;
}

inline ::System::Data::DataColumn^  spin_system_ref::reference_frameDataTable::labelColumn::get() {
    return this->columnlabel;
}

inline ::System::Data::DataColumn^  spin_system_ref::reference_frameDataTable::reference_frame_IdColumn::get() {
    return this->columnreference_frame_Id;
}

inline ::System::Int32 spin_system_ref::reference_frameDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system_ref::reference_frameRow^  spin_system_ref::reference_frameDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system_ref::reference_frameRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system_ref::reference_frameDataTable::Addreference_frameRow(spin_system_ref::reference_frameRow^  row) {
    this->Rows->Add(row);
}

inline spin_system_ref::reference_frameRow^  spin_system_ref::reference_frameDataTable::Addreference_frameRow(System::Int64 id, 
            System::Int64 parent_reference_frame_id, System::String^  label) {
    spin_system_ref::reference_frameRow^  rowreference_frameRow = (cli::safe_cast<spin_system_ref::reference_frameRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {id, parent_reference_frame_id, 
        label, nullptr};
    rowreference_frameRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowreference_frameRow);
    return rowreference_frameRow;
}

inline ::System::Collections::IEnumerator^  spin_system_ref::reference_frameDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system_ref::reference_frameDataTable::Clone() {
    spin_system_ref::reference_frameDataTable^  cln = (cli::safe_cast<spin_system_ref::reference_frameDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system_ref::reference_frameDataTable::CreateInstance() {
    return (gcnew spin_system_ref::reference_frameDataTable());
}

inline ::System::Void spin_system_ref::reference_frameDataTable::InitVars() {
    this->columnid = __super::Columns[L"id"];
    this->columnparent_reference_frame_id = __super::Columns[L"parent_reference_frame_id"];
    this->columnlabel = __super::Columns[L"label"];
    this->columnreference_frame_Id = __super::Columns[L"reference_frame_Id"];
}

inline ::System::Void spin_system_ref::reference_frameDataTable::InitClass() {
    this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnid);
    this->columnparent_reference_frame_id = (gcnew ::System::Data::DataColumn(L"parent_reference_frame_id", ::System::Int64::typeid, 
        nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnparent_reference_frame_id);
    this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnlabel);
    this->columnreference_frame_Id = (gcnew ::System::Data::DataColumn(L"reference_frame_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnreference_frame_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnreference_frame_Id}, 
            true)));
    this->columnid->AllowDBNull = false;
    this->columnid->Namespace = L"";
    this->columnparent_reference_frame_id->Namespace = L"";
    this->columnlabel->Namespace = L"";
    this->columnreference_frame_Id->AutoIncrement = true;
    this->columnreference_frame_Id->AllowDBNull = false;
    this->columnreference_frame_Id->Unique = true;
}

inline spin_system_ref::reference_frameRow^  spin_system_ref::reference_frameDataTable::Newreference_frameRow() {
    return (cli::safe_cast<spin_system_ref::reference_frameRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system_ref::reference_frameDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system_ref::reference_frameRow(builder));
}

inline ::System::Type^  spin_system_ref::reference_frameDataTable::GetRowType() {
    return spin_system_ref::reference_frameRow::typeid;
}

inline ::System::Void spin_system_ref::reference_frameDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->reference_frameRowChanged(this, (gcnew spin_system_ref::reference_frameRowChangeEvent((cli::safe_cast<spin_system_ref::reference_frameRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::reference_frameDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->reference_frameRowChanging(this, (gcnew spin_system_ref::reference_frameRowChangeEvent((cli::safe_cast<spin_system_ref::reference_frameRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::reference_frameDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->reference_frameRowDeleted(this, (gcnew spin_system_ref::reference_frameRowChangeEvent((cli::safe_cast<spin_system_ref::reference_frameRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::reference_frameDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->reference_frameRowDeleting(this, (gcnew spin_system_ref::reference_frameRowChangeEvent((cli::safe_cast<spin_system_ref::reference_frameRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::reference_frameDataTable::Removereference_frameRow(spin_system_ref::reference_frameRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system_ref::reference_frameDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system_ref^  ds = (gcnew spin_system_ref());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"reference_frameDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system_ref::directionDataTable::directionDataTable() {
    this->TableName = L"direction";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system_ref::directionDataTable::directionDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system_ref::directionDataTable::directionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system_ref::directionDataTable::direction_IdColumn::get() {
    return this->columndirection_Id;
}

inline ::System::Data::DataColumn^  spin_system_ref::directionDataTable::reference_frame_IdColumn::get() {
    return this->columnreference_frame_Id;
}

inline ::System::Int32 spin_system_ref::directionDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system_ref::directionRow^  spin_system_ref::directionDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system_ref::directionRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system_ref::directionDataTable::AdddirectionRow(spin_system_ref::directionRow^  row) {
    this->Rows->Add(row);
}

inline spin_system_ref::directionRow^  spin_system_ref::directionDataTable::AdddirectionRow(spin_system_ref::reference_frameRow^  parentreference_frameRowByreference_frame_direction) {
    spin_system_ref::directionRow^  rowdirectionRow = (cli::safe_cast<spin_system_ref::directionRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentreference_frameRowByreference_frame_direction != nullptr) {
        columnValuesArray[1] = parentreference_frameRowByreference_frame_direction[3];
    }
    rowdirectionRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowdirectionRow);
    return rowdirectionRow;
}

inline ::System::Collections::IEnumerator^  spin_system_ref::directionDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system_ref::directionDataTable::Clone() {
    spin_system_ref::directionDataTable^  cln = (cli::safe_cast<spin_system_ref::directionDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system_ref::directionDataTable::CreateInstance() {
    return (gcnew spin_system_ref::directionDataTable());
}

inline ::System::Void spin_system_ref::directionDataTable::InitVars() {
    this->columndirection_Id = __super::Columns[L"direction_Id"];
    this->columnreference_frame_Id = __super::Columns[L"reference_frame_Id"];
}

inline ::System::Void spin_system_ref::directionDataTable::InitClass() {
    this->columndirection_Id = (gcnew ::System::Data::DataColumn(L"direction_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columndirection_Id);
    this->columnreference_frame_Id = (gcnew ::System::Data::DataColumn(L"reference_frame_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnreference_frame_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columndirection_Id}, 
            true)));
    this->columndirection_Id->AutoIncrement = true;
    this->columndirection_Id->AllowDBNull = false;
    this->columndirection_Id->Unique = true;
}

inline spin_system_ref::directionRow^  spin_system_ref::directionDataTable::NewdirectionRow() {
    return (cli::safe_cast<spin_system_ref::directionRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system_ref::directionDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system_ref::directionRow(builder));
}

inline ::System::Type^  spin_system_ref::directionDataTable::GetRowType() {
    return spin_system_ref::directionRow::typeid;
}

inline ::System::Void spin_system_ref::directionDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->directionRowChanged(this, (gcnew spin_system_ref::directionRowChangeEvent((cli::safe_cast<spin_system_ref::directionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::directionDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->directionRowChanging(this, (gcnew spin_system_ref::directionRowChangeEvent((cli::safe_cast<spin_system_ref::directionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::directionDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->directionRowDeleted(this, (gcnew spin_system_ref::directionRowChangeEvent((cli::safe_cast<spin_system_ref::directionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::directionDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->directionRowDeleting(this, (gcnew spin_system_ref::directionRowChangeEvent((cli::safe_cast<spin_system_ref::directionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::directionDataTable::RemovedirectionRow(spin_system_ref::directionRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system_ref::directionDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system_ref^  ds = (gcnew spin_system_ref());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"directionDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system_ref::euler_anglesDataTable::euler_anglesDataTable() {
    this->TableName = L"euler_angles";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system_ref::euler_anglesDataTable::euler_anglesDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system_ref::euler_anglesDataTable::euler_anglesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system_ref::euler_anglesDataTable::alphaColumn::get() {
    return this->columnalpha;
}

inline ::System::Data::DataColumn^  spin_system_ref::euler_anglesDataTable::betaColumn::get() {
    return this->columnbeta;
}

inline ::System::Data::DataColumn^  spin_system_ref::euler_anglesDataTable::gammaColumn::get() {
    return this->columngamma;
}

inline ::System::Data::DataColumn^  spin_system_ref::euler_anglesDataTable::direction_IdColumn::get() {
    return this->columndirection_Id;
}

inline ::System::Int32 spin_system_ref::euler_anglesDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system_ref::euler_anglesRow^  spin_system_ref::euler_anglesDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system_ref::euler_anglesRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system_ref::euler_anglesDataTable::Addeuler_anglesRow(spin_system_ref::euler_anglesRow^  row) {
    this->Rows->Add(row);
}

inline spin_system_ref::euler_anglesRow^  spin_system_ref::euler_anglesDataTable::Addeuler_anglesRow(System::Double alpha, 
            System::Double beta, System::Double gamma, spin_system_ref::directionRow^  parentdirectionRowBydirection_euler_angles) {
    spin_system_ref::euler_anglesRow^  roweuler_anglesRow = (cli::safe_cast<spin_system_ref::euler_anglesRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {alpha, beta, gamma, nullptr};
    if (parentdirectionRowBydirection_euler_angles != nullptr) {
        columnValuesArray[3] = parentdirectionRowBydirection_euler_angles[0];
    }
    roweuler_anglesRow->ItemArray = columnValuesArray;
    this->Rows->Add(roweuler_anglesRow);
    return roweuler_anglesRow;
}

inline ::System::Collections::IEnumerator^  spin_system_ref::euler_anglesDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system_ref::euler_anglesDataTable::Clone() {
    spin_system_ref::euler_anglesDataTable^  cln = (cli::safe_cast<spin_system_ref::euler_anglesDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system_ref::euler_anglesDataTable::CreateInstance() {
    return (gcnew spin_system_ref::euler_anglesDataTable());
}

inline ::System::Void spin_system_ref::euler_anglesDataTable::InitVars() {
    this->columnalpha = __super::Columns[L"alpha"];
    this->columnbeta = __super::Columns[L"beta"];
    this->columngamma = __super::Columns[L"gamma"];
    this->columndirection_Id = __super::Columns[L"direction_Id"];
}

inline ::System::Void spin_system_ref::euler_anglesDataTable::InitClass() {
    this->columnalpha = (gcnew ::System::Data::DataColumn(L"alpha", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnalpha);
    this->columnbeta = (gcnew ::System::Data::DataColumn(L"beta", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnbeta);
    this->columngamma = (gcnew ::System::Data::DataColumn(L"gamma", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columngamma);
    this->columndirection_Id = (gcnew ::System::Data::DataColumn(L"direction_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columndirection_Id);
    this->columnalpha->AllowDBNull = false;
    this->columnalpha->Namespace = L"";
    this->columnbeta->AllowDBNull = false;
    this->columnbeta->Namespace = L"";
    this->columngamma->AllowDBNull = false;
    this->columngamma->Namespace = L"";
}

inline spin_system_ref::euler_anglesRow^  spin_system_ref::euler_anglesDataTable::Neweuler_anglesRow() {
    return (cli::safe_cast<spin_system_ref::euler_anglesRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system_ref::euler_anglesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system_ref::euler_anglesRow(builder));
}

inline ::System::Type^  spin_system_ref::euler_anglesDataTable::GetRowType() {
    return spin_system_ref::euler_anglesRow::typeid;
}

inline ::System::Void spin_system_ref::euler_anglesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->euler_anglesRowChanged(this, (gcnew spin_system_ref::euler_anglesRowChangeEvent((cli::safe_cast<spin_system_ref::euler_anglesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::euler_anglesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->euler_anglesRowChanging(this, (gcnew spin_system_ref::euler_anglesRowChangeEvent((cli::safe_cast<spin_system_ref::euler_anglesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::euler_anglesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->euler_anglesRowDeleted(this, (gcnew spin_system_ref::euler_anglesRowChangeEvent((cli::safe_cast<spin_system_ref::euler_anglesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::euler_anglesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->euler_anglesRowDeleting(this, (gcnew spin_system_ref::euler_anglesRowChangeEvent((cli::safe_cast<spin_system_ref::euler_anglesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::euler_anglesDataTable::Removeeuler_anglesRow(spin_system_ref::euler_anglesRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system_ref::euler_anglesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system_ref^  ds = (gcnew spin_system_ref());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"euler_anglesDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system_ref::angle_axisDataTable::angle_axisDataTable() {
    this->TableName = L"angle_axis";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system_ref::angle_axisDataTable::angle_axisDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system_ref::angle_axisDataTable::angle_axisDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system_ref::angle_axisDataTable::angleColumn::get() {
    return this->columnangle;
}

inline ::System::Data::DataColumn^  spin_system_ref::angle_axisDataTable::angle_axis_IdColumn::get() {
    return this->columnangle_axis_Id;
}

inline ::System::Data::DataColumn^  spin_system_ref::angle_axisDataTable::direction_IdColumn::get() {
    return this->columndirection_Id;
}

inline ::System::Int32 spin_system_ref::angle_axisDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system_ref::angle_axisRow^  spin_system_ref::angle_axisDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system_ref::angle_axisRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system_ref::angle_axisDataTable::Addangle_axisRow(spin_system_ref::angle_axisRow^  row) {
    this->Rows->Add(row);
}

inline spin_system_ref::angle_axisRow^  spin_system_ref::angle_axisDataTable::Addangle_axisRow(System::Double angle, spin_system_ref::directionRow^  parentdirectionRowBydirection_angle_axis) {
    spin_system_ref::angle_axisRow^  rowangle_axisRow = (cli::safe_cast<spin_system_ref::angle_axisRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {angle, nullptr, nullptr};
    if (parentdirectionRowBydirection_angle_axis != nullptr) {
        columnValuesArray[2] = parentdirectionRowBydirection_angle_axis[0];
    }
    rowangle_axisRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowangle_axisRow);
    return rowangle_axisRow;
}

inline ::System::Collections::IEnumerator^  spin_system_ref::angle_axisDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system_ref::angle_axisDataTable::Clone() {
    spin_system_ref::angle_axisDataTable^  cln = (cli::safe_cast<spin_system_ref::angle_axisDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system_ref::angle_axisDataTable::CreateInstance() {
    return (gcnew spin_system_ref::angle_axisDataTable());
}

inline ::System::Void spin_system_ref::angle_axisDataTable::InitVars() {
    this->columnangle = __super::Columns[L"angle"];
    this->columnangle_axis_Id = __super::Columns[L"angle_axis_Id"];
    this->columndirection_Id = __super::Columns[L"direction_Id"];
}

inline ::System::Void spin_system_ref::angle_axisDataTable::InitClass() {
    this->columnangle = (gcnew ::System::Data::DataColumn(L"angle", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnangle);
    this->columnangle_axis_Id = (gcnew ::System::Data::DataColumn(L"angle_axis_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnangle_axis_Id);
    this->columndirection_Id = (gcnew ::System::Data::DataColumn(L"direction_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columndirection_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnangle_axis_Id}, 
            true)));
    this->columnangle->AllowDBNull = false;
    this->columnangle_axis_Id->AutoIncrement = true;
    this->columnangle_axis_Id->AllowDBNull = false;
    this->columnangle_axis_Id->Unique = true;
}

inline spin_system_ref::angle_axisRow^  spin_system_ref::angle_axisDataTable::Newangle_axisRow() {
    return (cli::safe_cast<spin_system_ref::angle_axisRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system_ref::angle_axisDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system_ref::angle_axisRow(builder));
}

inline ::System::Type^  spin_system_ref::angle_axisDataTable::GetRowType() {
    return spin_system_ref::angle_axisRow::typeid;
}

inline ::System::Void spin_system_ref::angle_axisDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->angle_axisRowChanged(this, (gcnew spin_system_ref::angle_axisRowChangeEvent((cli::safe_cast<spin_system_ref::angle_axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::angle_axisDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->angle_axisRowChanging(this, (gcnew spin_system_ref::angle_axisRowChangeEvent((cli::safe_cast<spin_system_ref::angle_axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::angle_axisDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->angle_axisRowDeleted(this, (gcnew spin_system_ref::angle_axisRowChangeEvent((cli::safe_cast<spin_system_ref::angle_axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::angle_axisDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->angle_axisRowDeleting(this, (gcnew spin_system_ref::angle_axisRowChangeEvent((cli::safe_cast<spin_system_ref::angle_axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::angle_axisDataTable::Removeangle_axisRow(spin_system_ref::angle_axisRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system_ref::angle_axisDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system_ref^  ds = (gcnew spin_system_ref());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"angle_axisDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system_ref::axisDataTable::axisDataTable() {
    this->TableName = L"axis";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system_ref::axisDataTable::axisDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system_ref::axisDataTable::axisDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system_ref::axisDataTable::xColumn::get() {
    return this->columnx;
}

inline ::System::Data::DataColumn^  spin_system_ref::axisDataTable::yColumn::get() {
    return this->columny;
}

inline ::System::Data::DataColumn^  spin_system_ref::axisDataTable::zColumn::get() {
    return this->columnz;
}

inline ::System::Data::DataColumn^  spin_system_ref::axisDataTable::angle_axis_IdColumn::get() {
    return this->columnangle_axis_Id;
}

inline ::System::Int32 spin_system_ref::axisDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system_ref::axisRow^  spin_system_ref::axisDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system_ref::axisRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system_ref::axisDataTable::AddaxisRow(spin_system_ref::axisRow^  row) {
    this->Rows->Add(row);
}

inline spin_system_ref::axisRow^  spin_system_ref::axisDataTable::AddaxisRow(System::Double x, System::Double y, System::Double z, 
            spin_system_ref::angle_axisRow^  parentangle_axisRowByangle_axis_axis) {
    spin_system_ref::axisRow^  rowaxisRow = (cli::safe_cast<spin_system_ref::axisRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {x, y, z, nullptr};
    if (parentangle_axisRowByangle_axis_axis != nullptr) {
        columnValuesArray[3] = parentangle_axisRowByangle_axis_axis[1];
    }
    rowaxisRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowaxisRow);
    return rowaxisRow;
}

inline ::System::Collections::IEnumerator^  spin_system_ref::axisDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system_ref::axisDataTable::Clone() {
    spin_system_ref::axisDataTable^  cln = (cli::safe_cast<spin_system_ref::axisDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system_ref::axisDataTable::CreateInstance() {
    return (gcnew spin_system_ref::axisDataTable());
}

inline ::System::Void spin_system_ref::axisDataTable::InitVars() {
    this->columnx = __super::Columns[L"x"];
    this->columny = __super::Columns[L"y"];
    this->columnz = __super::Columns[L"z"];
    this->columnangle_axis_Id = __super::Columns[L"angle_axis_Id"];
}

inline ::System::Void spin_system_ref::axisDataTable::InitClass() {
    this->columnx = (gcnew ::System::Data::DataColumn(L"x", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnx);
    this->columny = (gcnew ::System::Data::DataColumn(L"y", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columny);
    this->columnz = (gcnew ::System::Data::DataColumn(L"z", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnz);
    this->columnangle_axis_Id = (gcnew ::System::Data::DataColumn(L"angle_axis_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnangle_axis_Id);
    this->columnx->AllowDBNull = false;
    this->columnx->Namespace = L"";
    this->columny->AllowDBNull = false;
    this->columny->Namespace = L"";
    this->columnz->AllowDBNull = false;
    this->columnz->Namespace = L"";
}

inline spin_system_ref::axisRow^  spin_system_ref::axisDataTable::NewaxisRow() {
    return (cli::safe_cast<spin_system_ref::axisRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system_ref::axisDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system_ref::axisRow(builder));
}

inline ::System::Type^  spin_system_ref::axisDataTable::GetRowType() {
    return spin_system_ref::axisRow::typeid;
}

inline ::System::Void spin_system_ref::axisDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->axisRowChanged(this, (gcnew spin_system_ref::axisRowChangeEvent((cli::safe_cast<spin_system_ref::axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::axisDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->axisRowChanging(this, (gcnew spin_system_ref::axisRowChangeEvent((cli::safe_cast<spin_system_ref::axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::axisDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->axisRowDeleted(this, (gcnew spin_system_ref::axisRowChangeEvent((cli::safe_cast<spin_system_ref::axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::axisDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->axisRowDeleting(this, (gcnew spin_system_ref::axisRowChangeEvent((cli::safe_cast<spin_system_ref::axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::axisDataTable::RemoveaxisRow(spin_system_ref::axisRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system_ref::axisDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system_ref^  ds = (gcnew spin_system_ref());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"axisDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system_ref::quaternionDataTable::quaternionDataTable() {
    this->TableName = L"quaternion";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system_ref::quaternionDataTable::quaternionDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system_ref::quaternionDataTable::quaternionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system_ref::quaternionDataTable::reColumn::get() {
    return this->columnre;
}

inline ::System::Data::DataColumn^  spin_system_ref::quaternionDataTable::iColumn::get() {
    return this->columni;
}

inline ::System::Data::DataColumn^  spin_system_ref::quaternionDataTable::jColumn::get() {
    return this->columnj;
}

inline ::System::Data::DataColumn^  spin_system_ref::quaternionDataTable::kColumn::get() {
    return this->columnk;
}

inline ::System::Data::DataColumn^  spin_system_ref::quaternionDataTable::direction_IdColumn::get() {
    return this->columndirection_Id;
}

inline ::System::Int32 spin_system_ref::quaternionDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system_ref::quaternionRow^  spin_system_ref::quaternionDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system_ref::quaternionRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system_ref::quaternionDataTable::AddquaternionRow(spin_system_ref::quaternionRow^  row) {
    this->Rows->Add(row);
}

inline spin_system_ref::quaternionRow^  spin_system_ref::quaternionDataTable::AddquaternionRow(System::Double re, System::Double i, 
            System::Double j, System::Double k, spin_system_ref::directionRow^  parentdirectionRowBydirection_quaternion) {
    spin_system_ref::quaternionRow^  rowquaternionRow = (cli::safe_cast<spin_system_ref::quaternionRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {re, i, j, k, nullptr};
    if (parentdirectionRowBydirection_quaternion != nullptr) {
        columnValuesArray[4] = parentdirectionRowBydirection_quaternion[0];
    }
    rowquaternionRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowquaternionRow);
    return rowquaternionRow;
}

inline ::System::Collections::IEnumerator^  spin_system_ref::quaternionDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system_ref::quaternionDataTable::Clone() {
    spin_system_ref::quaternionDataTable^  cln = (cli::safe_cast<spin_system_ref::quaternionDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system_ref::quaternionDataTable::CreateInstance() {
    return (gcnew spin_system_ref::quaternionDataTable());
}

inline ::System::Void spin_system_ref::quaternionDataTable::InitVars() {
    this->columnre = __super::Columns[L"re"];
    this->columni = __super::Columns[L"i"];
    this->columnj = __super::Columns[L"j"];
    this->columnk = __super::Columns[L"k"];
    this->columndirection_Id = __super::Columns[L"direction_Id"];
}

inline ::System::Void spin_system_ref::quaternionDataTable::InitClass() {
    this->columnre = (gcnew ::System::Data::DataColumn(L"re", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnre);
    this->columni = (gcnew ::System::Data::DataColumn(L"i", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columni);
    this->columnj = (gcnew ::System::Data::DataColumn(L"j", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnj);
    this->columnk = (gcnew ::System::Data::DataColumn(L"k", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnk);
    this->columndirection_Id = (gcnew ::System::Data::DataColumn(L"direction_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columndirection_Id);
    this->columnre->AllowDBNull = false;
    this->columnre->Namespace = L"";
    this->columni->AllowDBNull = false;
    this->columni->Namespace = L"";
    this->columnj->AllowDBNull = false;
    this->columnj->Namespace = L"";
    this->columnk->AllowDBNull = false;
    this->columnk->Namespace = L"";
}

inline spin_system_ref::quaternionRow^  spin_system_ref::quaternionDataTable::NewquaternionRow() {
    return (cli::safe_cast<spin_system_ref::quaternionRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system_ref::quaternionDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system_ref::quaternionRow(builder));
}

inline ::System::Type^  spin_system_ref::quaternionDataTable::GetRowType() {
    return spin_system_ref::quaternionRow::typeid;
}

inline ::System::Void spin_system_ref::quaternionDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->quaternionRowChanged(this, (gcnew spin_system_ref::quaternionRowChangeEvent((cli::safe_cast<spin_system_ref::quaternionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::quaternionDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->quaternionRowChanging(this, (gcnew spin_system_ref::quaternionRowChangeEvent((cli::safe_cast<spin_system_ref::quaternionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::quaternionDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->quaternionRowDeleted(this, (gcnew spin_system_ref::quaternionRowChangeEvent((cli::safe_cast<spin_system_ref::quaternionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::quaternionDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->quaternionRowDeleting(this, (gcnew spin_system_ref::quaternionRowChangeEvent((cli::safe_cast<spin_system_ref::quaternionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::quaternionDataTable::RemovequaternionRow(spin_system_ref::quaternionRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system_ref::quaternionDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system_ref^  ds = (gcnew spin_system_ref());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"quaternionDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system_ref::dcmDataTable::dcmDataTable() {
    this->TableName = L"dcm";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system_ref::dcmDataTable::dcmDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system_ref::dcmDataTable::dcmDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system_ref::dcmDataTable::xxColumn::get() {
    return this->columnxx;
}

inline ::System::Data::DataColumn^  spin_system_ref::dcmDataTable::xyColumn::get() {
    return this->columnxy;
}

inline ::System::Data::DataColumn^  spin_system_ref::dcmDataTable::xzColumn::get() {
    return this->columnxz;
}

inline ::System::Data::DataColumn^  spin_system_ref::dcmDataTable::yxColumn::get() {
    return this->columnyx;
}

inline ::System::Data::DataColumn^  spin_system_ref::dcmDataTable::yyColumn::get() {
    return this->columnyy;
}

inline ::System::Data::DataColumn^  spin_system_ref::dcmDataTable::yzColumn::get() {
    return this->columnyz;
}

inline ::System::Data::DataColumn^  spin_system_ref::dcmDataTable::zxColumn::get() {
    return this->columnzx;
}

inline ::System::Data::DataColumn^  spin_system_ref::dcmDataTable::zyColumn::get() {
    return this->columnzy;
}

inline ::System::Data::DataColumn^  spin_system_ref::dcmDataTable::zzColumn::get() {
    return this->columnzz;
}

inline ::System::Data::DataColumn^  spin_system_ref::dcmDataTable::direction_IdColumn::get() {
    return this->columndirection_Id;
}

inline ::System::Int32 spin_system_ref::dcmDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system_ref::dcmRow^  spin_system_ref::dcmDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system_ref::dcmRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system_ref::dcmDataTable::AdddcmRow(spin_system_ref::dcmRow^  row) {
    this->Rows->Add(row);
}

inline spin_system_ref::dcmRow^  spin_system_ref::dcmDataTable::AdddcmRow(
            System::Double xx, 
            System::Double xy, 
            System::Double xz, 
            System::Double yx, 
            System::Double yy, 
            System::Double yz, 
            System::Double zx, 
            System::Double zy, 
            System::Double zz, 
            spin_system_ref::directionRow^  parentdirectionRowBydirection_dcm) {
    spin_system_ref::dcmRow^  rowdcmRow = (cli::safe_cast<spin_system_ref::dcmRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(10) {xx, xy, xz, yx, yy, yz, 
        zx, zy, zz, nullptr};
    if (parentdirectionRowBydirection_dcm != nullptr) {
        columnValuesArray[9] = parentdirectionRowBydirection_dcm[0];
    }
    rowdcmRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowdcmRow);
    return rowdcmRow;
}

inline ::System::Collections::IEnumerator^  spin_system_ref::dcmDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system_ref::dcmDataTable::Clone() {
    spin_system_ref::dcmDataTable^  cln = (cli::safe_cast<spin_system_ref::dcmDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system_ref::dcmDataTable::CreateInstance() {
    return (gcnew spin_system_ref::dcmDataTable());
}

inline ::System::Void spin_system_ref::dcmDataTable::InitVars() {
    this->columnxx = __super::Columns[L"xx"];
    this->columnxy = __super::Columns[L"xy"];
    this->columnxz = __super::Columns[L"xz"];
    this->columnyx = __super::Columns[L"yx"];
    this->columnyy = __super::Columns[L"yy"];
    this->columnyz = __super::Columns[L"yz"];
    this->columnzx = __super::Columns[L"zx"];
    this->columnzy = __super::Columns[L"zy"];
    this->columnzz = __super::Columns[L"zz"];
    this->columndirection_Id = __super::Columns[L"direction_Id"];
}

inline ::System::Void spin_system_ref::dcmDataTable::InitClass() {
    this->columnxx = (gcnew ::System::Data::DataColumn(L"xx", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnxx);
    this->columnxy = (gcnew ::System::Data::DataColumn(L"xy", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnxy);
    this->columnxz = (gcnew ::System::Data::DataColumn(L"xz", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnxz);
    this->columnyx = (gcnew ::System::Data::DataColumn(L"yx", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnyx);
    this->columnyy = (gcnew ::System::Data::DataColumn(L"yy", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnyy);
    this->columnyz = (gcnew ::System::Data::DataColumn(L"yz", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnyz);
    this->columnzx = (gcnew ::System::Data::DataColumn(L"zx", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnzx);
    this->columnzy = (gcnew ::System::Data::DataColumn(L"zy", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnzy);
    this->columnzz = (gcnew ::System::Data::DataColumn(L"zz", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnzz);
    this->columndirection_Id = (gcnew ::System::Data::DataColumn(L"direction_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columndirection_Id);
    this->columnxx->AllowDBNull = false;
    this->columnxx->Namespace = L"";
    this->columnxy->AllowDBNull = false;
    this->columnxy->Namespace = L"";
    this->columnxz->AllowDBNull = false;
    this->columnxz->Namespace = L"";
    this->columnyx->AllowDBNull = false;
    this->columnyx->Namespace = L"";
    this->columnyy->AllowDBNull = false;
    this->columnyy->Namespace = L"";
    this->columnyz->AllowDBNull = false;
    this->columnyz->Namespace = L"";
    this->columnzx->AllowDBNull = false;
    this->columnzx->Namespace = L"";
    this->columnzy->AllowDBNull = false;
    this->columnzy->Namespace = L"";
    this->columnzz->AllowDBNull = false;
    this->columnzz->Namespace = L"";
}

inline spin_system_ref::dcmRow^  spin_system_ref::dcmDataTable::NewdcmRow() {
    return (cli::safe_cast<spin_system_ref::dcmRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system_ref::dcmDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system_ref::dcmRow(builder));
}

inline ::System::Type^  spin_system_ref::dcmDataTable::GetRowType() {
    return spin_system_ref::dcmRow::typeid;
}

inline ::System::Void spin_system_ref::dcmDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->dcmRowChanged(this, (gcnew spin_system_ref::dcmRowChangeEvent((cli::safe_cast<spin_system_ref::dcmRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::dcmDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->dcmRowChanging(this, (gcnew spin_system_ref::dcmRowChangeEvent((cli::safe_cast<spin_system_ref::dcmRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::dcmDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->dcmRowDeleted(this, (gcnew spin_system_ref::dcmRowChangeEvent((cli::safe_cast<spin_system_ref::dcmRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::dcmDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->dcmRowDeleting(this, (gcnew spin_system_ref::dcmRowChangeEvent((cli::safe_cast<spin_system_ref::dcmRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system_ref::dcmDataTable::RemovedcmRow(spin_system_ref::dcmRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system_ref::dcmDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system_ref^  ds = (gcnew spin_system_ref());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"dcmDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system_ref::reference_frameRow::reference_frameRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablereference_frame = (cli::safe_cast<spin_system_ref::reference_frameDataTable^  >(this->Table));
}

inline System::Int64 spin_system_ref::reference_frameRow::id::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tablereference_frame->idColumn]));
}
inline System::Void spin_system_ref::reference_frameRow::id::set(System::Int64 value) {
    this[this->tablereference_frame->idColumn] = value;
}

inline System::Int64 spin_system_ref::reference_frameRow::parent_reference_frame_id::get() {
    try {
        return (cli::safe_cast<::System::Int64 >(this[this->tablereference_frame->parent_reference_frame_idColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'parent_reference_frame_id\' in table \'reference_frame\' is DB" 
L"Null.", 
            e));
    }
}
inline System::Void spin_system_ref::reference_frameRow::parent_reference_frame_id::set(System::Int64 value) {
    this[this->tablereference_frame->parent_reference_frame_idColumn] = value;
}

inline System::String^  spin_system_ref::reference_frameRow::label::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tablereference_frame->labelColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'label\' in table \'reference_frame\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system_ref::reference_frameRow::label::set(System::String^  value) {
    this[this->tablereference_frame->labelColumn] = value;
}

inline System::Int32 spin_system_ref::reference_frameRow::reference_frame_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablereference_frame->reference_frame_IdColumn]));
}
inline System::Void spin_system_ref::reference_frameRow::reference_frame_Id::set(System::Int32 value) {
    this[this->tablereference_frame->reference_frame_IdColumn] = value;
}

inline ::System::Boolean spin_system_ref::reference_frameRow::Isparent_reference_frame_idNull() {
    return this->IsNull(this->tablereference_frame->parent_reference_frame_idColumn);
}

inline ::System::Void spin_system_ref::reference_frameRow::Setparent_reference_frame_idNull() {
    this[this->tablereference_frame->parent_reference_frame_idColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean spin_system_ref::reference_frameRow::IslabelNull() {
    return this->IsNull(this->tablereference_frame->labelColumn);
}

inline ::System::Void spin_system_ref::reference_frameRow::SetlabelNull() {
    this[this->tablereference_frame->labelColumn] = ::System::Convert::DBNull;
}

inline cli::array< spin_system_ref::directionRow^  >^  spin_system_ref::reference_frameRow::GetdirectionRows() {
    if (this->Table->ChildRelations[L"reference_frame_direction"] == nullptr) {
        return gcnew cli::array< spin_system_ref::directionRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system_ref::directionRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"reference_frame_direction"])));
    }
}


inline spin_system_ref::directionRow::directionRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tabledirection = (cli::safe_cast<spin_system_ref::directionDataTable^  >(this->Table));
}

inline System::Int32 spin_system_ref::directionRow::direction_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tabledirection->direction_IdColumn]));
}
inline System::Void spin_system_ref::directionRow::direction_Id::set(System::Int32 value) {
    this[this->tabledirection->direction_IdColumn] = value;
}

inline System::Int32 spin_system_ref::directionRow::reference_frame_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tabledirection->reference_frame_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'reference_frame_Id\' in table \'direction\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system_ref::directionRow::reference_frame_Id::set(System::Int32 value) {
    this[this->tabledirection->reference_frame_IdColumn] = value;
}

inline spin_system_ref::reference_frameRow^  spin_system_ref::directionRow::reference_frameRow::get() {
    return (cli::safe_cast<spin_system_ref::reference_frameRow^  >(this->GetParentRow(this->Table->ParentRelations[L"reference_frame_direction"])));
}
inline System::Void spin_system_ref::directionRow::reference_frameRow::set(spin_system_ref::reference_frameRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"reference_frame_direction"]);
}

inline ::System::Boolean spin_system_ref::directionRow::Isreference_frame_IdNull() {
    return this->IsNull(this->tabledirection->reference_frame_IdColumn);
}

inline ::System::Void spin_system_ref::directionRow::Setreference_frame_IdNull() {
    this[this->tabledirection->reference_frame_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< spin_system_ref::euler_anglesRow^  >^  spin_system_ref::directionRow::Geteuler_anglesRows() {
    if (this->Table->ChildRelations[L"direction_euler_angles"] == nullptr) {
        return gcnew cli::array< spin_system_ref::euler_anglesRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system_ref::euler_anglesRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"direction_euler_angles"])));
    }
}

inline cli::array< spin_system_ref::angle_axisRow^  >^  spin_system_ref::directionRow::Getangle_axisRows() {
    if (this->Table->ChildRelations[L"direction_angle_axis"] == nullptr) {
        return gcnew cli::array< spin_system_ref::angle_axisRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system_ref::angle_axisRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"direction_angle_axis"])));
    }
}

inline cli::array< spin_system_ref::quaternionRow^  >^  spin_system_ref::directionRow::GetquaternionRows() {
    if (this->Table->ChildRelations[L"direction_quaternion"] == nullptr) {
        return gcnew cli::array< spin_system_ref::quaternionRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system_ref::quaternionRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"direction_quaternion"])));
    }
}

inline cli::array< spin_system_ref::dcmRow^  >^  spin_system_ref::directionRow::GetdcmRows() {
    if (this->Table->ChildRelations[L"direction_dcm"] == nullptr) {
        return gcnew cli::array< spin_system_ref::dcmRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system_ref::dcmRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"direction_dcm"])));
    }
}


inline spin_system_ref::euler_anglesRow::euler_anglesRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableeuler_angles = (cli::safe_cast<spin_system_ref::euler_anglesDataTable^  >(this->Table));
}

inline System::Double spin_system_ref::euler_anglesRow::alpha::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableeuler_angles->alphaColumn]));
}
inline System::Void spin_system_ref::euler_anglesRow::alpha::set(System::Double value) {
    this[this->tableeuler_angles->alphaColumn] = value;
}

inline System::Double spin_system_ref::euler_anglesRow::beta::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableeuler_angles->betaColumn]));
}
inline System::Void spin_system_ref::euler_anglesRow::beta::set(System::Double value) {
    this[this->tableeuler_angles->betaColumn] = value;
}

inline System::Double spin_system_ref::euler_anglesRow::gamma::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableeuler_angles->gammaColumn]));
}
inline System::Void spin_system_ref::euler_anglesRow::gamma::set(System::Double value) {
    this[this->tableeuler_angles->gammaColumn] = value;
}

inline System::Int32 spin_system_ref::euler_anglesRow::direction_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableeuler_angles->direction_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'direction_Id\' in table \'euler_angles\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system_ref::euler_anglesRow::direction_Id::set(System::Int32 value) {
    this[this->tableeuler_angles->direction_IdColumn] = value;
}

inline spin_system_ref::directionRow^  spin_system_ref::euler_anglesRow::directionRow::get() {
    return (cli::safe_cast<spin_system_ref::directionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"direction_euler_angles"])));
}
inline System::Void spin_system_ref::euler_anglesRow::directionRow::set(spin_system_ref::directionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"direction_euler_angles"]);
}

inline ::System::Boolean spin_system_ref::euler_anglesRow::Isdirection_IdNull() {
    return this->IsNull(this->tableeuler_angles->direction_IdColumn);
}

inline ::System::Void spin_system_ref::euler_anglesRow::Setdirection_IdNull() {
    this[this->tableeuler_angles->direction_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system_ref::angle_axisRow::angle_axisRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableangle_axis = (cli::safe_cast<spin_system_ref::angle_axisDataTable^  >(this->Table));
}

inline System::Double spin_system_ref::angle_axisRow::angle::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableangle_axis->angleColumn]));
}
inline System::Void spin_system_ref::angle_axisRow::angle::set(System::Double value) {
    this[this->tableangle_axis->angleColumn] = value;
}

inline System::Int32 spin_system_ref::angle_axisRow::angle_axis_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableangle_axis->angle_axis_IdColumn]));
}
inline System::Void spin_system_ref::angle_axisRow::angle_axis_Id::set(System::Int32 value) {
    this[this->tableangle_axis->angle_axis_IdColumn] = value;
}

inline System::Int32 spin_system_ref::angle_axisRow::direction_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableangle_axis->direction_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'direction_Id\' in table \'angle_axis\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system_ref::angle_axisRow::direction_Id::set(System::Int32 value) {
    this[this->tableangle_axis->direction_IdColumn] = value;
}

inline spin_system_ref::directionRow^  spin_system_ref::angle_axisRow::directionRow::get() {
    return (cli::safe_cast<spin_system_ref::directionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"direction_angle_axis"])));
}
inline System::Void spin_system_ref::angle_axisRow::directionRow::set(spin_system_ref::directionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"direction_angle_axis"]);
}

inline ::System::Boolean spin_system_ref::angle_axisRow::Isdirection_IdNull() {
    return this->IsNull(this->tableangle_axis->direction_IdColumn);
}

inline ::System::Void spin_system_ref::angle_axisRow::Setdirection_IdNull() {
    this[this->tableangle_axis->direction_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< spin_system_ref::axisRow^  >^  spin_system_ref::angle_axisRow::GetaxisRows() {
    if (this->Table->ChildRelations[L"angle_axis_axis"] == nullptr) {
        return gcnew cli::array< spin_system_ref::axisRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system_ref::axisRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"angle_axis_axis"])));
    }
}


inline spin_system_ref::axisRow::axisRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableaxis = (cli::safe_cast<spin_system_ref::axisDataTable^  >(this->Table));
}

inline System::Double spin_system_ref::axisRow::x::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaxis->xColumn]));
}
inline System::Void spin_system_ref::axisRow::x::set(System::Double value) {
    this[this->tableaxis->xColumn] = value;
}

inline System::Double spin_system_ref::axisRow::y::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaxis->yColumn]));
}
inline System::Void spin_system_ref::axisRow::y::set(System::Double value) {
    this[this->tableaxis->yColumn] = value;
}

inline System::Double spin_system_ref::axisRow::z::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaxis->zColumn]));
}
inline System::Void spin_system_ref::axisRow::z::set(System::Double value) {
    this[this->tableaxis->zColumn] = value;
}

inline System::Int32 spin_system_ref::axisRow::angle_axis_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableaxis->angle_axis_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'angle_axis_Id\' in table \'axis\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system_ref::axisRow::angle_axis_Id::set(System::Int32 value) {
    this[this->tableaxis->angle_axis_IdColumn] = value;
}

inline spin_system_ref::angle_axisRow^  spin_system_ref::axisRow::angle_axisRow::get() {
    return (cli::safe_cast<spin_system_ref::angle_axisRow^  >(this->GetParentRow(this->Table->ParentRelations[L"angle_axis_axis"])));
}
inline System::Void spin_system_ref::axisRow::angle_axisRow::set(spin_system_ref::angle_axisRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"angle_axis_axis"]);
}

inline ::System::Boolean spin_system_ref::axisRow::Isangle_axis_IdNull() {
    return this->IsNull(this->tableaxis->angle_axis_IdColumn);
}

inline ::System::Void spin_system_ref::axisRow::Setangle_axis_IdNull() {
    this[this->tableaxis->angle_axis_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system_ref::quaternionRow::quaternionRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablequaternion = (cli::safe_cast<spin_system_ref::quaternionDataTable^  >(this->Table));
}

inline System::Double spin_system_ref::quaternionRow::re::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablequaternion->reColumn]));
}
inline System::Void spin_system_ref::quaternionRow::re::set(System::Double value) {
    this[this->tablequaternion->reColumn] = value;
}

inline System::Double spin_system_ref::quaternionRow::i::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablequaternion->iColumn]));
}
inline System::Void spin_system_ref::quaternionRow::i::set(System::Double value) {
    this[this->tablequaternion->iColumn] = value;
}

inline System::Double spin_system_ref::quaternionRow::j::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablequaternion->jColumn]));
}
inline System::Void spin_system_ref::quaternionRow::j::set(System::Double value) {
    this[this->tablequaternion->jColumn] = value;
}

inline System::Double spin_system_ref::quaternionRow::k::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablequaternion->kColumn]));
}
inline System::Void spin_system_ref::quaternionRow::k::set(System::Double value) {
    this[this->tablequaternion->kColumn] = value;
}

inline System::Int32 spin_system_ref::quaternionRow::direction_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablequaternion->direction_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'direction_Id\' in table \'quaternion\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system_ref::quaternionRow::direction_Id::set(System::Int32 value) {
    this[this->tablequaternion->direction_IdColumn] = value;
}

inline spin_system_ref::directionRow^  spin_system_ref::quaternionRow::directionRow::get() {
    return (cli::safe_cast<spin_system_ref::directionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"direction_quaternion"])));
}
inline System::Void spin_system_ref::quaternionRow::directionRow::set(spin_system_ref::directionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"direction_quaternion"]);
}

inline ::System::Boolean spin_system_ref::quaternionRow::Isdirection_IdNull() {
    return this->IsNull(this->tablequaternion->direction_IdColumn);
}

inline ::System::Void spin_system_ref::quaternionRow::Setdirection_IdNull() {
    this[this->tablequaternion->direction_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system_ref::dcmRow::dcmRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tabledcm = (cli::safe_cast<spin_system_ref::dcmDataTable^  >(this->Table));
}

inline System::Double spin_system_ref::dcmRow::xx::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->xxColumn]));
}
inline System::Void spin_system_ref::dcmRow::xx::set(System::Double value) {
    this[this->tabledcm->xxColumn] = value;
}

inline System::Double spin_system_ref::dcmRow::xy::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->xyColumn]));
}
inline System::Void spin_system_ref::dcmRow::xy::set(System::Double value) {
    this[this->tabledcm->xyColumn] = value;
}

inline System::Double spin_system_ref::dcmRow::xz::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->xzColumn]));
}
inline System::Void spin_system_ref::dcmRow::xz::set(System::Double value) {
    this[this->tabledcm->xzColumn] = value;
}

inline System::Double spin_system_ref::dcmRow::yx::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->yxColumn]));
}
inline System::Void spin_system_ref::dcmRow::yx::set(System::Double value) {
    this[this->tabledcm->yxColumn] = value;
}

inline System::Double spin_system_ref::dcmRow::yy::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->yyColumn]));
}
inline System::Void spin_system_ref::dcmRow::yy::set(System::Double value) {
    this[this->tabledcm->yyColumn] = value;
}

inline System::Double spin_system_ref::dcmRow::yz::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->yzColumn]));
}
inline System::Void spin_system_ref::dcmRow::yz::set(System::Double value) {
    this[this->tabledcm->yzColumn] = value;
}

inline System::Double spin_system_ref::dcmRow::zx::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->zxColumn]));
}
inline System::Void spin_system_ref::dcmRow::zx::set(System::Double value) {
    this[this->tabledcm->zxColumn] = value;
}

inline System::Double spin_system_ref::dcmRow::zy::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->zyColumn]));
}
inline System::Void spin_system_ref::dcmRow::zy::set(System::Double value) {
    this[this->tabledcm->zyColumn] = value;
}

inline System::Double spin_system_ref::dcmRow::zz::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->zzColumn]));
}
inline System::Void spin_system_ref::dcmRow::zz::set(System::Double value) {
    this[this->tabledcm->zzColumn] = value;
}

inline System::Int32 spin_system_ref::dcmRow::direction_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tabledcm->direction_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'direction_Id\' in table \'dcm\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system_ref::dcmRow::direction_Id::set(System::Int32 value) {
    this[this->tabledcm->direction_IdColumn] = value;
}

inline spin_system_ref::directionRow^  spin_system_ref::dcmRow::directionRow::get() {
    return (cli::safe_cast<spin_system_ref::directionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"direction_dcm"])));
}
inline System::Void spin_system_ref::dcmRow::directionRow::set(spin_system_ref::directionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"direction_dcm"]);
}

inline ::System::Boolean spin_system_ref::dcmRow::Isdirection_IdNull() {
    return this->IsNull(this->tabledcm->direction_IdColumn);
}

inline ::System::Void spin_system_ref::dcmRow::Setdirection_IdNull() {
    this[this->tabledcm->direction_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system_ref::reference_frameRowChangeEvent::reference_frameRowChangeEvent(spin_system_ref::reference_frameRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system_ref::reference_frameRow^  spin_system_ref::reference_frameRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system_ref::reference_frameRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system_ref::directionRowChangeEvent::directionRowChangeEvent(spin_system_ref::directionRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system_ref::directionRow^  spin_system_ref::directionRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system_ref::directionRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system_ref::euler_anglesRowChangeEvent::euler_anglesRowChangeEvent(spin_system_ref::euler_anglesRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system_ref::euler_anglesRow^  spin_system_ref::euler_anglesRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system_ref::euler_anglesRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system_ref::angle_axisRowChangeEvent::angle_axisRowChangeEvent(spin_system_ref::angle_axisRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system_ref::angle_axisRow^  spin_system_ref::angle_axisRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system_ref::angle_axisRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system_ref::axisRowChangeEvent::axisRowChangeEvent(spin_system_ref::axisRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system_ref::axisRow^  spin_system_ref::axisRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system_ref::axisRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system_ref::quaternionRowChangeEvent::quaternionRowChangeEvent(spin_system_ref::quaternionRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system_ref::quaternionRow^  spin_system_ref::quaternionRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system_ref::quaternionRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system_ref::dcmRowChangeEvent::dcmRowChangeEvent(spin_system_ref::dcmRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system_ref::dcmRow^  spin_system_ref::dcmRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system_ref::dcmRowChangeEvent::Action::get() {
    return this->eventAction;
}
