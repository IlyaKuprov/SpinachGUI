#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.0.30319.17929.
// 
using namespace System;
ref class spin_system;


/** \class  spin_system
* Auto-generated by xsd spin_system class. Minor changes in order to have some null for some fields
* Reference frames are in the other autogenerated  .h file
*/
[System::Serializable, 
System::ComponentModel::DesignerCategoryAttribute(L"code"), 
System::ComponentModel::ToolboxItem(true), 
System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
System::Xml::Serialization::XmlRootAttribute(L"spin_system"), 
System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
public ref class spin_system : public ::System::Data::DataSet {
    public : ref class spinDataTable;
    public : ref class coordinatesDataTable;
    public : ref class interactionDataTable;
    public : ref class tensorDataTable;
    public : ref class eigenvaluesDataTable;
    public : ref class axiality_rhombicityDataTable;
    public : ref class span_skewDataTable;
    public : ref class aniso_asymmDataTable;
    public : ref class orientationDataTable;
    public : ref class euler_anglesDataTable;
    public : ref class angle_axisDataTable;
    public : ref class axisDataTable;
    public : ref class quaternionDataTable;
    public : ref class dcmDataTable;
    public : ref class spinRow;
    public : ref class coordinatesRow;
    public : ref class interactionRow;
    public : ref class tensorRow;
    public : ref class eigenvaluesRow;
    public : ref class axiality_rhombicityRow;
    public : ref class span_skewRow;
    public : ref class aniso_asymmRow;
    public : ref class orientationRow;
    public : ref class euler_anglesRow;
    public : ref class angle_axisRow;
    public : ref class axisRow;
    public : ref class quaternionRow;
    public : ref class dcmRow;
    public : ref class spinRowChangeEvent;
    public : ref class coordinatesRowChangeEvent;
    public : ref class interactionRowChangeEvent;
    public : ref class tensorRowChangeEvent;
    public : ref class eigenvaluesRowChangeEvent;
    public : ref class axiality_rhombicityRowChangeEvent;
    public : ref class span_skewRowChangeEvent;
    public : ref class aniso_asymmRowChangeEvent;
    public : ref class orientationRowChangeEvent;
    public : ref class euler_anglesRowChangeEvent;
    public : ref class angle_axisRowChangeEvent;
    public : ref class axisRowChangeEvent;
    public : ref class quaternionRowChangeEvent;
    public : ref class dcmRowChangeEvent;
    
    private: spin_system::spinDataTable^  tablespin;
    
    private: spin_system::coordinatesDataTable^  tablecoordinates;
    
    private: spin_system::interactionDataTable^  tableinteraction;
    
    private: spin_system::tensorDataTable^  tabletensor;
    
    private: spin_system::eigenvaluesDataTable^  tableeigenvalues;
    
    private: spin_system::axiality_rhombicityDataTable^  tableaxiality_rhombicity;
    
    private: spin_system::span_skewDataTable^  tablespan_skew;
    
    private: spin_system::aniso_asymmDataTable^  tableaniso_asymm;
    
    private: spin_system::orientationDataTable^  tableorientation;
    
    private: spin_system::euler_anglesDataTable^  tableeuler_angles;
    
    private: spin_system::angle_axisDataTable^  tableangle_axis;
    
    private: spin_system::axisDataTable^  tableaxis;
    
    private: spin_system::quaternionDataTable^  tablequaternion;
    
    private: spin_system::dcmDataTable^  tabledcm;
    
    private: ::System::Data::DataRelation^  relationspin_coordinates;
    
    private: ::System::Data::DataRelation^  relationinteraction_tensor;
    
    private: ::System::Data::DataRelation^  relationinteraction_eigenvalues;
    
    private: ::System::Data::DataRelation^  relationinteraction_axiality_rhombicity;
    
    private: ::System::Data::DataRelation^  relationinteraction_span_skew;
    
    private: ::System::Data::DataRelation^  relationinteraction_aniso_asymm;
    
    private: ::System::Data::DataRelation^  relationinteraction_orientation;
    
    private: ::System::Data::DataRelation^  relationorientation_euler_angles;
    
    private: ::System::Data::DataRelation^  relationorientation_angle_axis;
    
    private: ::System::Data::DataRelation^  relationangle_axis_axis;
    
    private: ::System::Data::DataRelation^  relationorientation_quaternion;
    
    private: ::System::Data::DataRelation^  relationorientation_dcm;
    
    private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void spinRowChangeEventHandler(::System::Object^  sender, spin_system::spinRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void coordinatesRowChangeEventHandler(::System::Object^  sender, spin_system::coordinatesRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void interactionRowChangeEventHandler(::System::Object^  sender, spin_system::interactionRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void tensorRowChangeEventHandler(::System::Object^  sender, spin_system::tensorRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void eigenvaluesRowChangeEventHandler(::System::Object^  sender, spin_system::eigenvaluesRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void axiality_rhombicityRowChangeEventHandler(::System::Object^  sender, spin_system::axiality_rhombicityRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void span_skewRowChangeEventHandler(::System::Object^  sender, spin_system::span_skewRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void aniso_asymmRowChangeEventHandler(::System::Object^  sender, spin_system::aniso_asymmRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void orientationRowChangeEventHandler(::System::Object^  sender, spin_system::orientationRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void euler_anglesRowChangeEventHandler(::System::Object^  sender, spin_system::euler_anglesRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void angle_axisRowChangeEventHandler(::System::Object^  sender, spin_system::angle_axisRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void axisRowChangeEventHandler(::System::Object^  sender, spin_system::axisRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void quaternionRowChangeEventHandler(::System::Object^  sender, spin_system::quaternionRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void dcmRowChangeEventHandler(::System::Object^  sender, spin_system::dcmRowChangeEvent^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    spin_system();
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    spin_system(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::spinDataTable^  spin {
        spin_system::spinDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::coordinatesDataTable^  coordinates {
        spin_system::coordinatesDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::interactionDataTable^  interaction {
        spin_system::interactionDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::tensorDataTable^  tensor {
        spin_system::tensorDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::eigenvaluesDataTable^  eigenvalues {
        spin_system::eigenvaluesDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::axiality_rhombicityDataTable^  axiality_rhombicity {
        spin_system::axiality_rhombicityDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::span_skewDataTable^  span_skew {
        spin_system::span_skewDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::aniso_asymmDataTable^  aniso_asymm {
        spin_system::aniso_asymmDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::orientationDataTable^  orientation {
        spin_system::orientationDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::euler_anglesDataTable^  euler_angles {
        spin_system::euler_anglesDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::angle_axisDataTable^  angle_axis {
        spin_system::angle_axisDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::axisDataTable^  axis {
        spin_system::axisDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::quaternionDataTable^  quaternion {
        spin_system::quaternionDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::dcmDataTable^  dcm {
        spin_system::dcmDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::BrowsableAttribute(true), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
    virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
        ::System::Data::SchemaSerializationMode get() override;
        System::Void set(::System::Data::SchemaSerializationMode value) override;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataTableCollection^  Tables {
        ::System::Data::DataTableCollection^  get() new;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataRelationCollection^  Relations {
        ::System::Data::DataRelationCollection^  get() new;
    }
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void InitializeDerivedDataSet() override;
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Data::DataSet^  Clone() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeTables() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeRelations() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars();
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars(::System::Boolean initTable);
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitClass();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializespin();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializecoordinates();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeinteraction();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializetensor();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeeigenvalues();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeaxiality_rhombicity();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializespan_skew();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeaniso_asymm();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeorientation();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeeuler_angles();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeangle_axis();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeaxis();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializequaternion();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializedcm();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class spinDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnid;
        
        private: ::System::Data::DataColumn^  columnisotope;
        
        private: ::System::Data::DataColumn^  columnlabel;
        
        private: ::System::Data::DataColumn^  columnspin_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spinRowChangeEventHandler^  spinRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spinRowChangeEventHandler^  spinRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spinRowChangeEventHandler^  spinRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spinRowChangeEventHandler^  spinRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spinDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spinDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spinDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  idColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  isotopeColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  labelColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spinRow^  default [::System::Int32 ] {
            spin_system::spinRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddspinRow(spin_system::spinRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::spinRow^  AddspinRow(System::Int64 id, System::String^  isotope, System::String^  label);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::spinRow^  NewspinRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovespinRow(spin_system::spinRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class coordinatesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnx;
        
        private: ::System::Data::DataColumn^  columny;
        
        private: ::System::Data::DataColumn^  columnz;
        
        private: ::System::Data::DataColumn^  columnspin_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::coordinatesRowChangeEventHandler^  coordinatesRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::coordinatesRowChangeEventHandler^  coordinatesRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::coordinatesRowChangeEventHandler^  coordinatesRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::coordinatesRowChangeEventHandler^  coordinatesRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        coordinatesDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        coordinatesDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        coordinatesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::coordinatesRow^  default [::System::Int32 ] {
            spin_system::coordinatesRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddcoordinatesRow(spin_system::coordinatesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::coordinatesRow^  AddcoordinatesRow(System::Double x, System::Double y, System::Double z, spin_system::spinRow^  parentspinRowByspin_coordinates);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::coordinatesRow^  NewcoordinatesRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovecoordinatesRow(spin_system::coordinatesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class interactionDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnkind;
        
        private: ::System::Data::DataColumn^  columnid;
        
        private: ::System::Data::DataColumn^  columnunits;
        
        private: ::System::Data::DataColumn^  columnspin_a;
        
        private: ::System::Data::DataColumn^  columnspin_b;
        
        private: ::System::Data::DataColumn^  columnreference_frame_id;
        
        private: ::System::Data::DataColumn^  columnreference;
        
        private: ::System::Data::DataColumn^  columnlabel;
        
        private: ::System::Data::DataColumn^  columnscalar;
        
        private: ::System::Data::DataColumn^  columninteraction_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::interactionRowChangeEventHandler^  interactionRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::interactionRowChangeEventHandler^  interactionRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::interactionRowChangeEventHandler^  interactionRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::interactionRowChangeEventHandler^  interactionRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        interactionDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        interactionDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        interactionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  kindColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  idColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  unitsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_aColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_bColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  reference_frame_idColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  referenceColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  labelColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  scalarColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  interaction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::interactionRow^  default [::System::Int32 ] {
            spin_system::interactionRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddinteractionRow(spin_system::interactionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::interactionRow^  AddinteractionRow(
                    System::String^  kind, 
                    System::Int64 id, 
                    System::String^  units, 
                    System::Int64 spin_a, 
                    System::Int64 spin_b, 
                    System::Int64 reference_frame_id, 
                    System::String^  reference, 
                    System::String^  label, 
                    System::Double scalar);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::interactionRow^  NewinteractionRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveinteractionRow(spin_system::interactionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class tensorDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnxx;
        
        private: ::System::Data::DataColumn^  columnxy;
        
        private: ::System::Data::DataColumn^  columnxz;
        
        private: ::System::Data::DataColumn^  columnyx;
        
        private: ::System::Data::DataColumn^  columnyy;
        
        private: ::System::Data::DataColumn^  columnyz;
        
        private: ::System::Data::DataColumn^  columnzx;
        
        private: ::System::Data::DataColumn^  columnzy;
        
        private: ::System::Data::DataColumn^  columnzz;
        
        private: ::System::Data::DataColumn^  columninteraction_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::tensorRowChangeEventHandler^  tensorRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::tensorRowChangeEventHandler^  tensorRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::tensorRowChangeEventHandler^  tensorRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::tensorRowChangeEventHandler^  tensorRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        tensorDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        tensorDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        tensorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xxColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xyColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xzColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yxColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yyColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yzColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zxColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zyColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zzColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  interaction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::tensorRow^  default [::System::Int32 ] {
            spin_system::tensorRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddtensorRow(spin_system::tensorRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::tensorRow^  AddtensorRow(
                    System::Double xx, 
                    System::Double xy, 
                    System::Double xz, 
                    System::Double yx, 
                    System::Double yy, 
                    System::Double yz, 
                    System::Double zx, 
                    System::Double zy, 
                    System::Double zz, 
                    spin_system::interactionRow^  parentinteractionRowByinteraction_tensor);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::tensorRow^  NewtensorRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovetensorRow(spin_system::tensorRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class eigenvaluesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnxx;
        
        private: ::System::Data::DataColumn^  columnyy;
        
        private: ::System::Data::DataColumn^  columnzz;
        
        private: ::System::Data::DataColumn^  columninteraction_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::eigenvaluesRowChangeEventHandler^  eigenvaluesRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::eigenvaluesRowChangeEventHandler^  eigenvaluesRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::eigenvaluesRowChangeEventHandler^  eigenvaluesRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::eigenvaluesRowChangeEventHandler^  eigenvaluesRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        eigenvaluesDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        eigenvaluesDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        eigenvaluesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xxColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yyColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zzColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  interaction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::eigenvaluesRow^  default [::System::Int32 ] {
            spin_system::eigenvaluesRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddeigenvaluesRow(spin_system::eigenvaluesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::eigenvaluesRow^  AddeigenvaluesRow(System::Double xx, System::Double yy, System::Double zz, spin_system::interactionRow^  parentinteractionRowByinteraction_eigenvalues);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::eigenvaluesRow^  NeweigenvaluesRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveeigenvaluesRow(spin_system::eigenvaluesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class axiality_rhombicityDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columniso;
        
        private: ::System::Data::DataColumn^  columnax;
        
        private: ::System::Data::DataColumn^  columnrh;
        
        private: ::System::Data::DataColumn^  columninteraction_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axiality_rhombicityRowChangeEventHandler^  axiality_rhombicityRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axiality_rhombicityRowChangeEventHandler^  axiality_rhombicityRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axiality_rhombicityRowChangeEventHandler^  axiality_rhombicityRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axiality_rhombicityRowChangeEventHandler^  axiality_rhombicityRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axiality_rhombicityDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axiality_rhombicityDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axiality_rhombicityDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  isoColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  axColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  rhColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  interaction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::axiality_rhombicityRow^  default [::System::Int32 ] {
            spin_system::axiality_rhombicityRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addaxiality_rhombicityRow(spin_system::axiality_rhombicityRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::axiality_rhombicityRow^  Addaxiality_rhombicityRow(System::Double iso, System::Double ax, System::Double rh, 
                    spin_system::interactionRow^  parentinteractionRowByinteraction_axiality_rhombicity);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::axiality_rhombicityRow^  Newaxiality_rhombicityRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removeaxiality_rhombicityRow(spin_system::axiality_rhombicityRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class span_skewDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columniso;
        
        private: ::System::Data::DataColumn^  columnspan;
        
        private: ::System::Data::DataColumn^  columnskew;
        
        private: ::System::Data::DataColumn^  columninteraction_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::span_skewRowChangeEventHandler^  span_skewRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::span_skewRowChangeEventHandler^  span_skewRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::span_skewRowChangeEventHandler^  span_skewRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::span_skewRowChangeEventHandler^  span_skewRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        span_skewDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        span_skewDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        span_skewDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  isoColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spanColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  skewColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  interaction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::span_skewRow^  default [::System::Int32 ] {
            spin_system::span_skewRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addspan_skewRow(spin_system::span_skewRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::span_skewRow^  Addspan_skewRow(System::Double iso, System::Double span, System::Double skew, spin_system::interactionRow^  parentinteractionRowByinteraction_span_skew);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::span_skewRow^  Newspan_skewRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removespan_skewRow(spin_system::span_skewRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class aniso_asymmDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columniso;
        
        private: ::System::Data::DataColumn^  columnaniso;
        
        private: ::System::Data::DataColumn^  columnasymm;
        
        private: ::System::Data::DataColumn^  columninteraction_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::aniso_asymmRowChangeEventHandler^  aniso_asymmRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::aniso_asymmRowChangeEventHandler^  aniso_asymmRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::aniso_asymmRowChangeEventHandler^  aniso_asymmRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::aniso_asymmRowChangeEventHandler^  aniso_asymmRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        aniso_asymmDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        aniso_asymmDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        aniso_asymmDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  isoColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  anisoColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  asymmColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  interaction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::aniso_asymmRow^  default [::System::Int32 ] {
            spin_system::aniso_asymmRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addaniso_asymmRow(spin_system::aniso_asymmRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::aniso_asymmRow^  Addaniso_asymmRow(System::Double iso, System::Double aniso, System::Double asymm, spin_system::interactionRow^  parentinteractionRowByinteraction_aniso_asymm);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::aniso_asymmRow^  Newaniso_asymmRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removeaniso_asymmRow(spin_system::aniso_asymmRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class orientationDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnorientation_Id;
        
        private: ::System::Data::DataColumn^  columninteraction_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::orientationRowChangeEventHandler^  orientationRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::orientationRowChangeEventHandler^  orientationRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::orientationRowChangeEventHandler^  orientationRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::orientationRowChangeEventHandler^  orientationRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        orientationDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        orientationDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        orientationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  orientation_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  interaction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::orientationRow^  default [::System::Int32 ] {
            spin_system::orientationRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddorientationRow(spin_system::orientationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::orientationRow^  AddorientationRow(spin_system::interactionRow^  parentinteractionRowByinteraction_orientation);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::orientationRow^  NeworientationRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveorientationRow(spin_system::orientationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class euler_anglesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnalpha;
        
        private: ::System::Data::DataColumn^  columnbeta;
        
        private: ::System::Data::DataColumn^  columngamma;
        
        private: ::System::Data::DataColumn^  columnorientation_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::euler_anglesRowChangeEventHandler^  euler_anglesRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::euler_anglesRowChangeEventHandler^  euler_anglesRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::euler_anglesRowChangeEventHandler^  euler_anglesRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::euler_anglesRowChangeEventHandler^  euler_anglesRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        euler_anglesDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        euler_anglesDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        euler_anglesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  alphaColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  betaColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  gammaColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  orientation_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::euler_anglesRow^  default [::System::Int32 ] {
            spin_system::euler_anglesRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addeuler_anglesRow(spin_system::euler_anglesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::euler_anglesRow^  Addeuler_anglesRow(System::Double alpha, System::Double beta, System::Double gamma, 
                    spin_system::orientationRow^  parentorientationRowByorientation_euler_angles);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::euler_anglesRow^  Neweuler_anglesRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removeeuler_anglesRow(spin_system::euler_anglesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class angle_axisDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnangle;
        
        private: ::System::Data::DataColumn^  columnangle_axis_Id;
        
        private: ::System::Data::DataColumn^  columnorientation_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::angle_axisRowChangeEventHandler^  angle_axisRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::angle_axisRowChangeEventHandler^  angle_axisRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::angle_axisRowChangeEventHandler^  angle_axisRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::angle_axisRowChangeEventHandler^  angle_axisRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        angle_axisDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        angle_axisDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        angle_axisDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  angleColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  angle_axis_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  orientation_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::angle_axisRow^  default [::System::Int32 ] {
            spin_system::angle_axisRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addangle_axisRow(spin_system::angle_axisRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::angle_axisRow^  Addangle_axisRow(System::Double angle, spin_system::orientationRow^  parentorientationRowByorientation_angle_axis);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::angle_axisRow^  Newangle_axisRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removeangle_axisRow(spin_system::angle_axisRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class axisDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnx;
        
        private: ::System::Data::DataColumn^  columny;
        
        private: ::System::Data::DataColumn^  columnz;
        
        private: ::System::Data::DataColumn^  columnangle_axis_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axisRowChangeEventHandler^  axisRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axisRowChangeEventHandler^  axisRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axisRowChangeEventHandler^  axisRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axisRowChangeEventHandler^  axisRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axisDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axisDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axisDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  angle_axis_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::axisRow^  default [::System::Int32 ] {
            spin_system::axisRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddaxisRow(spin_system::axisRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::axisRow^  AddaxisRow(System::Double x, System::Double y, System::Double z, spin_system::angle_axisRow^  parentangle_axisRowByangle_axis_axis);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::axisRow^  NewaxisRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveaxisRow(spin_system::axisRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class quaternionDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnre;
        
        private: ::System::Data::DataColumn^  columni;
        
        private: ::System::Data::DataColumn^  columnj;
        
        private: ::System::Data::DataColumn^  columnk;
        
        private: ::System::Data::DataColumn^  columnorientation_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::quaternionRowChangeEventHandler^  quaternionRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::quaternionRowChangeEventHandler^  quaternionRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::quaternionRowChangeEventHandler^  quaternionRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::quaternionRowChangeEventHandler^  quaternionRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        quaternionDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        quaternionDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        quaternionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  reColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  iColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  kColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  orientation_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::quaternionRow^  default [::System::Int32 ] {
            spin_system::quaternionRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddquaternionRow(spin_system::quaternionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::quaternionRow^  AddquaternionRow(System::Double re, System::Double i, System::Double j, System::Double k, 
                    spin_system::orientationRow^  parentorientationRowByorientation_quaternion);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::quaternionRow^  NewquaternionRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovequaternionRow(spin_system::quaternionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class dcmDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnxx;
        
        private: ::System::Data::DataColumn^  columnxy;
        
        private: ::System::Data::DataColumn^  columnxz;
        
        private: ::System::Data::DataColumn^  columnyx;
        
        private: ::System::Data::DataColumn^  columnyy;
        
        private: ::System::Data::DataColumn^  columnyz;
        
        private: ::System::Data::DataColumn^  columnzx;
        
        private: ::System::Data::DataColumn^  columnzy;
        
        private: ::System::Data::DataColumn^  columnzz;
        
        private: ::System::Data::DataColumn^  columnorientation_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::dcmRowChangeEventHandler^  dcmRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::dcmRowChangeEventHandler^  dcmRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::dcmRowChangeEventHandler^  dcmRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::dcmRowChangeEventHandler^  dcmRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        dcmDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        dcmDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        dcmDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xxColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xyColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xzColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yxColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yyColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yzColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zxColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zyColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zzColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  orientation_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::dcmRow^  default [::System::Int32 ] {
            spin_system::dcmRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AdddcmRow(spin_system::dcmRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::dcmRow^  AdddcmRow(
                    System::Double xx, 
                    System::Double xy, 
                    System::Double xz, 
                    System::Double yx, 
                    System::Double yy, 
                    System::Double yz, 
                    System::Double zx, 
                    System::Double zy, 
                    System::Double zz, 
                    spin_system::orientationRow^  parentorientationRowByorientation_dcm);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::dcmRow^  NewdcmRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovedcmRow(spin_system::dcmRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class spinRow : public ::System::Data::DataRow {
        
        private: spin_system::spinDataTable^  tablespin;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spinRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 id {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  isotope {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  label {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 spin_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IslabelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetlabelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::coordinatesRow^  >^  GetcoordinatesRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class coordinatesRow : public ::System::Data::DataRow {
        
        private: spin_system::coordinatesDataTable^  tablecoordinates;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        coordinatesRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double x {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double y {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double z {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 spin_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spinRow^  spinRow {
            spin_system::spinRow^  get();
            System::Void set(spin_system::spinRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isspin_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setspin_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class interactionRow : public ::System::Data::DataRow {
        
        private: spin_system::interactionDataTable^  tableinteraction;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        interactionRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  kind {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 id {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  units {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 spin_a {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 spin_b {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 reference_frame_id {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  reference {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  label {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double scalar {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 interaction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isspin_bNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setspin_bNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isreference_frame_idNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setreference_frame_idNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsreferenceNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetreferenceNull();

		public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsscalarNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetscalarNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IslabelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetlabelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::tensorRow^  >^  GettensorRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::eigenvaluesRow^  >^  GeteigenvaluesRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::axiality_rhombicityRow^  >^  Getaxiality_rhombicityRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::span_skewRow^  >^  Getspan_skewRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::aniso_asymmRow^  >^  Getaniso_asymmRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::orientationRow^  >^  GetorientationRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class tensorRow : public ::System::Data::DataRow {
        
        private: spin_system::tensorDataTable^  tabletensor;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        tensorRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double xx {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double xy {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double xz {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double yx {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double yy {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double yz {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double zx {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double zy {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double zz {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 interaction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::interactionRow^  interactionRow {
            spin_system::interactionRow^  get();
            System::Void set(spin_system::interactionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isinteraction_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setinteraction_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class eigenvaluesRow : public ::System::Data::DataRow {
        
        private: spin_system::eigenvaluesDataTable^  tableeigenvalues;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        eigenvaluesRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double xx {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double yy {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double zz {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 interaction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::interactionRow^  interactionRow {
            spin_system::interactionRow^  get();
            System::Void set(spin_system::interactionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isinteraction_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setinteraction_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class axiality_rhombicityRow : public ::System::Data::DataRow {
        
        private: spin_system::axiality_rhombicityDataTable^  tableaxiality_rhombicity;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axiality_rhombicityRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double iso {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double ax {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double rh {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 interaction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::interactionRow^  interactionRow {
            spin_system::interactionRow^  get();
            System::Void set(spin_system::interactionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isinteraction_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setinteraction_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class span_skewRow : public ::System::Data::DataRow {
        
        private: spin_system::span_skewDataTable^  tablespan_skew;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        span_skewRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double iso {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double span {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double skew {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 interaction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::interactionRow^  interactionRow {
            spin_system::interactionRow^  get();
            System::Void set(spin_system::interactionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isinteraction_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setinteraction_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class aniso_asymmRow : public ::System::Data::DataRow {
        
        private: spin_system::aniso_asymmDataTable^  tableaniso_asymm;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        aniso_asymmRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double iso {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double aniso {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double asymm {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 interaction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::interactionRow^  interactionRow {
            spin_system::interactionRow^  get();
            System::Void set(spin_system::interactionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isinteraction_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setinteraction_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class orientationRow : public ::System::Data::DataRow {
        
        private: spin_system::orientationDataTable^  tableorientation;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        orientationRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 orientation_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 interaction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::interactionRow^  interactionRow {
            spin_system::interactionRow^  get();
            System::Void set(spin_system::interactionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isinteraction_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setinteraction_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::euler_anglesRow^  >^  Geteuler_anglesRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::angle_axisRow^  >^  Getangle_axisRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::quaternionRow^  >^  GetquaternionRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::dcmRow^  >^  GetdcmRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class euler_anglesRow : public ::System::Data::DataRow {
        
        private: spin_system::euler_anglesDataTable^  tableeuler_angles;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        euler_anglesRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double alpha {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double beta {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double gamma {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 orientation_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::orientationRow^  orientationRow {
            spin_system::orientationRow^  get();
            System::Void set(spin_system::orientationRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isorientation_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setorientation_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class angle_axisRow : public ::System::Data::DataRow {
        
        private: spin_system::angle_axisDataTable^  tableangle_axis;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        angle_axisRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double angle {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 angle_axis_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 orientation_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::orientationRow^  orientationRow {
            spin_system::orientationRow^  get();
            System::Void set(spin_system::orientationRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isorientation_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setorientation_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::axisRow^  >^  GetaxisRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class axisRow : public ::System::Data::DataRow {
        
        private: spin_system::axisDataTable^  tableaxis;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axisRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double x {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double y {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double z {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 angle_axis_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::angle_axisRow^  angle_axisRow {
            spin_system::angle_axisRow^  get();
            System::Void set(spin_system::angle_axisRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isangle_axis_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setangle_axis_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class quaternionRow : public ::System::Data::DataRow {
        
        private: spin_system::quaternionDataTable^  tablequaternion;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        quaternionRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double re {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double i {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double j {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double k {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 orientation_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::orientationRow^  orientationRow {
            spin_system::orientationRow^  get();
            System::Void set(spin_system::orientationRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isorientation_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setorientation_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class dcmRow : public ::System::Data::DataRow {
        
        private: spin_system::dcmDataTable^  tabledcm;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        dcmRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double xx {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double xy {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double xz {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double yx {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double yy {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double yz {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double zx {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double zy {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double zz {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 orientation_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::orientationRow^  orientationRow {
            spin_system::orientationRow^  get();
            System::Void set(spin_system::orientationRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isorientation_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setorientation_IdNull();
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class spinRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::spinRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spinRowChangeEvent(spin_system::spinRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spinRow^  Row {
            spin_system::spinRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class coordinatesRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::coordinatesRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        coordinatesRowChangeEvent(spin_system::coordinatesRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::coordinatesRow^  Row {
            spin_system::coordinatesRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class interactionRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::interactionRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        interactionRowChangeEvent(spin_system::interactionRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::interactionRow^  Row {
            spin_system::interactionRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class tensorRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::tensorRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        tensorRowChangeEvent(spin_system::tensorRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::tensorRow^  Row {
            spin_system::tensorRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class eigenvaluesRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::eigenvaluesRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        eigenvaluesRowChangeEvent(spin_system::eigenvaluesRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::eigenvaluesRow^  Row {
            spin_system::eigenvaluesRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class axiality_rhombicityRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::axiality_rhombicityRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axiality_rhombicityRowChangeEvent(spin_system::axiality_rhombicityRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::axiality_rhombicityRow^  Row {
            spin_system::axiality_rhombicityRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class span_skewRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::span_skewRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        span_skewRowChangeEvent(spin_system::span_skewRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::span_skewRow^  Row {
            spin_system::span_skewRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class aniso_asymmRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::aniso_asymmRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        aniso_asymmRowChangeEvent(spin_system::aniso_asymmRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::aniso_asymmRow^  Row {
            spin_system::aniso_asymmRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class orientationRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::orientationRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        orientationRowChangeEvent(spin_system::orientationRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::orientationRow^  Row {
            spin_system::orientationRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class euler_anglesRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::euler_anglesRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        euler_anglesRowChangeEvent(spin_system::euler_anglesRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::euler_anglesRow^  Row {
            spin_system::euler_anglesRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class angle_axisRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::angle_axisRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        angle_axisRowChangeEvent(spin_system::angle_axisRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::angle_axisRow^  Row {
            spin_system::angle_axisRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class axisRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::axisRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axisRowChangeEvent(spin_system::axisRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::axisRow^  Row {
            spin_system::axisRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class quaternionRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::quaternionRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        quaternionRowChangeEvent(spin_system::quaternionRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::quaternionRow^  Row {
            spin_system::quaternionRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class dcmRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::dcmRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        dcmRowChangeEvent(spin_system::dcmRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::dcmRow^  Row {
            spin_system::dcmRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
};


inline spin_system::spin_system() {
    this->BeginInit();
    this->InitClass();
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &spin_system::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    __super::Relations->CollectionChanged += schemaChangedHandler;
    this->EndInit();
}

inline spin_system::spin_system(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataSet(info, context, false) {
    if (this->IsBinarySerialized(info, context) == true) {
        this->InitVars(false);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &spin_system::SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler1;
        this->Relations->CollectionChanged += schemaChangedHandler1;
        return;
    }
    ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
    if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        if (ds->Tables[L"spin"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::spinDataTable(ds->Tables[L"spin"])));
        }
        if (ds->Tables[L"coordinates"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::coordinatesDataTable(ds->Tables[L"coordinates"])));
        }
        if (ds->Tables[L"interaction"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::interactionDataTable(ds->Tables[L"interaction"])));
        }
        if (ds->Tables[L"tensor"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::tensorDataTable(ds->Tables[L"tensor"])));
        }
        if (ds->Tables[L"eigenvalues"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::eigenvaluesDataTable(ds->Tables[L"eigenvalues"])));
        }
        if (ds->Tables[L"axiality_rhombicity"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::axiality_rhombicityDataTable(ds->Tables[L"axiality_rhombicity"])));
        }
        if (ds->Tables[L"span_skew"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::span_skewDataTable(ds->Tables[L"span_skew"])));
        }
        if (ds->Tables[L"aniso_asymm"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::aniso_asymmDataTable(ds->Tables[L"aniso_asymm"])));
        }
        if (ds->Tables[L"orientation"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::orientationDataTable(ds->Tables[L"orientation"])));
        }
        if (ds->Tables[L"euler_angles"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::euler_anglesDataTable(ds->Tables[L"euler_angles"])));
        }
        if (ds->Tables[L"angle_axis"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::angle_axisDataTable(ds->Tables[L"angle_axis"])));
        }
        if (ds->Tables[L"axis"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::axisDataTable(ds->Tables[L"axis"])));
        }
        if (ds->Tables[L"quaternion"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::quaternionDataTable(ds->Tables[L"quaternion"])));
        }
        if (ds->Tables[L"dcm"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::dcmDataTable(ds->Tables[L"dcm"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
    }
    this->GetSerializationData(info, context);
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &spin_system::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    this->Relations->CollectionChanged += schemaChangedHandler;
}

inline spin_system::spinDataTable^  spin_system::spin::get() {
    return this->tablespin;
}

inline spin_system::coordinatesDataTable^  spin_system::coordinates::get() {
    return this->tablecoordinates;
}

inline spin_system::interactionDataTable^  spin_system::interaction::get() {
    return this->tableinteraction;
}

inline spin_system::tensorDataTable^  spin_system::tensor::get() {
    return this->tabletensor;
}

inline spin_system::eigenvaluesDataTable^  spin_system::eigenvalues::get() {
    return this->tableeigenvalues;
}

inline spin_system::axiality_rhombicityDataTable^  spin_system::axiality_rhombicity::get() {
    return this->tableaxiality_rhombicity;
}

inline spin_system::span_skewDataTable^  spin_system::span_skew::get() {
    return this->tablespan_skew;
}

inline spin_system::aniso_asymmDataTable^  spin_system::aniso_asymm::get() {
    return this->tableaniso_asymm;
}

inline spin_system::orientationDataTable^  spin_system::orientation::get() {
    return this->tableorientation;
}

inline spin_system::euler_anglesDataTable^  spin_system::euler_angles::get() {
    return this->tableeuler_angles;
}

inline spin_system::angle_axisDataTable^  spin_system::angle_axis::get() {
    return this->tableangle_axis;
}

inline spin_system::axisDataTable^  spin_system::axis::get() {
    return this->tableaxis;
}

inline spin_system::quaternionDataTable^  spin_system::quaternion::get() {
    return this->tablequaternion;
}

inline spin_system::dcmDataTable^  spin_system::dcm::get() {
    return this->tabledcm;
}

inline ::System::Data::SchemaSerializationMode spin_system::SchemaSerializationMode::get() {
    return this->_schemaSerializationMode;
}
inline System::Void spin_system::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
    this->_schemaSerializationMode = __identifier(value);
}

inline ::System::Data::DataTableCollection^  spin_system::Tables::get() {
    return __super::Tables;
}

inline ::System::Data::DataRelationCollection^  spin_system::Relations::get() {
    return __super::Relations;
}

inline ::System::Void spin_system::InitializeDerivedDataSet() {
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline ::System::Data::DataSet^  spin_system::Clone() {
    spin_system^  cln = (cli::safe_cast<spin_system^  >(__super::Clone()));
    cln->InitVars();
    cln->SchemaSerializationMode = this->SchemaSerializationMode;
    return cln;
}

inline ::System::Boolean spin_system::ShouldSerializeTables() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializeRelations() {
    return false;
}

inline ::System::Void spin_system::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
    if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        this->Reset();
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXml(reader);
        if (ds->Tables[L"spin"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::spinDataTable(ds->Tables[L"spin"])));
        }
        if (ds->Tables[L"coordinates"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::coordinatesDataTable(ds->Tables[L"coordinates"])));
        }
        if (ds->Tables[L"interaction"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::interactionDataTable(ds->Tables[L"interaction"])));
        }
        if (ds->Tables[L"tensor"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::tensorDataTable(ds->Tables[L"tensor"])));
        }
        if (ds->Tables[L"eigenvalues"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::eigenvaluesDataTable(ds->Tables[L"eigenvalues"])));
        }
        if (ds->Tables[L"axiality_rhombicity"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::axiality_rhombicityDataTable(ds->Tables[L"axiality_rhombicity"])));
        }
        if (ds->Tables[L"span_skew"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::span_skewDataTable(ds->Tables[L"span_skew"])));
        }
        if (ds->Tables[L"aniso_asymm"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::aniso_asymmDataTable(ds->Tables[L"aniso_asymm"])));
        }
        if (ds->Tables[L"orientation"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::orientationDataTable(ds->Tables[L"orientation"])));
        }
        if (ds->Tables[L"euler_angles"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::euler_anglesDataTable(ds->Tables[L"euler_angles"])));
        }
        if (ds->Tables[L"angle_axis"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::angle_axisDataTable(ds->Tables[L"angle_axis"])));
        }
        if (ds->Tables[L"axis"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::axisDataTable(ds->Tables[L"axis"])));
        }
        if (ds->Tables[L"quaternion"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::quaternionDataTable(ds->Tables[L"quaternion"])));
        }
        if (ds->Tables[L"dcm"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::dcmDataTable(ds->Tables[L"dcm"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXml(reader);
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchema^  spin_system::GetSchemaSerializable() {
    ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
    this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
    stream->Position = 0;
    return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
}

inline ::System::Void spin_system::InitVars() {
    this->InitVars(true);
}

inline ::System::Void spin_system::InitVars(::System::Boolean initTable) {
    this->tablespin = (cli::safe_cast<spin_system::spinDataTable^  >(__super::Tables[L"spin"]));
    if (initTable == true) {
        if (this->tablespin != nullptr) {
            this->tablespin->InitVars();
        }
    }
    this->tablecoordinates = (cli::safe_cast<spin_system::coordinatesDataTable^  >(__super::Tables[L"coordinates"]));
    if (initTable == true) {
        if (this->tablecoordinates != nullptr) {
            this->tablecoordinates->InitVars();
        }
    }
    this->tableinteraction = (cli::safe_cast<spin_system::interactionDataTable^  >(__super::Tables[L"interaction"]));
    if (initTable == true) {
        if (this->tableinteraction != nullptr) {
            this->tableinteraction->InitVars();
        }
    }
    this->tabletensor = (cli::safe_cast<spin_system::tensorDataTable^  >(__super::Tables[L"tensor"]));
    if (initTable == true) {
        if (this->tabletensor != nullptr) {
            this->tabletensor->InitVars();
        }
    }
    this->tableeigenvalues = (cli::safe_cast<spin_system::eigenvaluesDataTable^  >(__super::Tables[L"eigenvalues"]));
    if (initTable == true) {
        if (this->tableeigenvalues != nullptr) {
            this->tableeigenvalues->InitVars();
        }
    }
    this->tableaxiality_rhombicity = (cli::safe_cast<spin_system::axiality_rhombicityDataTable^  >(__super::Tables[L"axiality_rhombicity"]));
    if (initTable == true) {
        if (this->tableaxiality_rhombicity != nullptr) {
            this->tableaxiality_rhombicity->InitVars();
        }
    }
    this->tablespan_skew = (cli::safe_cast<spin_system::span_skewDataTable^  >(__super::Tables[L"span_skew"]));
    if (initTable == true) {
        if (this->tablespan_skew != nullptr) {
            this->tablespan_skew->InitVars();
        }
    }
    this->tableaniso_asymm = (cli::safe_cast<spin_system::aniso_asymmDataTable^  >(__super::Tables[L"aniso_asymm"]));
    if (initTable == true) {
        if (this->tableaniso_asymm != nullptr) {
            this->tableaniso_asymm->InitVars();
        }
    }
    this->tableorientation = (cli::safe_cast<spin_system::orientationDataTable^  >(__super::Tables[L"orientation"]));
    if (initTable == true) {
        if (this->tableorientation != nullptr) {
            this->tableorientation->InitVars();
        }
    }
    this->tableeuler_angles = (cli::safe_cast<spin_system::euler_anglesDataTable^  >(__super::Tables[L"euler_angles"]));
    if (initTable == true) {
        if (this->tableeuler_angles != nullptr) {
            this->tableeuler_angles->InitVars();
        }
    }
    this->tableangle_axis = (cli::safe_cast<spin_system::angle_axisDataTable^  >(__super::Tables[L"angle_axis"]));
    if (initTable == true) {
        if (this->tableangle_axis != nullptr) {
            this->tableangle_axis->InitVars();
        }
    }
    this->tableaxis = (cli::safe_cast<spin_system::axisDataTable^  >(__super::Tables[L"axis"]));
    if (initTable == true) {
        if (this->tableaxis != nullptr) {
            this->tableaxis->InitVars();
        }
    }
    this->tablequaternion = (cli::safe_cast<spin_system::quaternionDataTable^  >(__super::Tables[L"quaternion"]));
    if (initTable == true) {
        if (this->tablequaternion != nullptr) {
            this->tablequaternion->InitVars();
        }
    }
    this->tabledcm = (cli::safe_cast<spin_system::dcmDataTable^  >(__super::Tables[L"dcm"]));
    if (initTable == true) {
        if (this->tabledcm != nullptr) {
            this->tabledcm->InitVars();
        }
    }
    this->relationspin_coordinates = this->Relations[L"spin_coordinates"];
    this->relationinteraction_tensor = this->Relations[L"interaction_tensor"];
    this->relationinteraction_eigenvalues = this->Relations[L"interaction_eigenvalues"];
    this->relationinteraction_axiality_rhombicity = this->Relations[L"interaction_axiality_rhombicity"];
    this->relationinteraction_span_skew = this->Relations[L"interaction_span_skew"];
    this->relationinteraction_aniso_asymm = this->Relations[L"interaction_aniso_asymm"];
    this->relationinteraction_orientation = this->Relations[L"interaction_orientation"];
    this->relationorientation_euler_angles = this->Relations[L"orientation_euler_angles"];
    this->relationorientation_angle_axis = this->Relations[L"orientation_angle_axis"];
    this->relationangle_axis_axis = this->Relations[L"angle_axis_axis"];
    this->relationorientation_quaternion = this->Relations[L"orientation_quaternion"];
    this->relationorientation_dcm = this->Relations[L"orientation_dcm"];
}

inline ::System::Void spin_system::InitClass() {
    this->DataSetName = L"spin_system";
    this->Prefix = L"";
    this->EnforceConstraints = true;
    this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
    this->tablespin = (gcnew spin_system::spinDataTable());
    __super::Tables->Add(this->tablespin);
    this->tablecoordinates = (gcnew spin_system::coordinatesDataTable());
    __super::Tables->Add(this->tablecoordinates);
    this->tableinteraction = (gcnew spin_system::interactionDataTable());
    __super::Tables->Add(this->tableinteraction);
    this->tabletensor = (gcnew spin_system::tensorDataTable());
    __super::Tables->Add(this->tabletensor);
    this->tableeigenvalues = (gcnew spin_system::eigenvaluesDataTable());
    __super::Tables->Add(this->tableeigenvalues);
    this->tableaxiality_rhombicity = (gcnew spin_system::axiality_rhombicityDataTable());
    __super::Tables->Add(this->tableaxiality_rhombicity);
    this->tablespan_skew = (gcnew spin_system::span_skewDataTable());
    __super::Tables->Add(this->tablespan_skew);
    this->tableaniso_asymm = (gcnew spin_system::aniso_asymmDataTable());
    __super::Tables->Add(this->tableaniso_asymm);
    this->tableorientation = (gcnew spin_system::orientationDataTable());
    __super::Tables->Add(this->tableorientation);
    this->tableeuler_angles = (gcnew spin_system::euler_anglesDataTable());
    __super::Tables->Add(this->tableeuler_angles);
    this->tableangle_axis = (gcnew spin_system::angle_axisDataTable());
    __super::Tables->Add(this->tableangle_axis);
    this->tableaxis = (gcnew spin_system::axisDataTable());
    __super::Tables->Add(this->tableaxis);
    this->tablequaternion = (gcnew spin_system::quaternionDataTable());
    __super::Tables->Add(this->tablequaternion);
    this->tabledcm = (gcnew spin_system::dcmDataTable());
    __super::Tables->Add(this->tabledcm);
    ::System::Data::ForeignKeyConstraint^  fkc;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"spin_coordinates", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin->spin_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecoordinates->spin_IdColumn}));
    this->tablecoordinates->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"interaction_tensor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinteraction->interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletensor->interaction_IdColumn}));
    this->tabletensor->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"interaction_eigenvalues", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinteraction->interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableeigenvalues->interaction_IdColumn}));
    this->tableeigenvalues->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"interaction_axiality_rhombicity", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinteraction->interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableaxiality_rhombicity->interaction_IdColumn}));
    this->tableaxiality_rhombicity->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"interaction_span_skew", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinteraction->interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespan_skew->interaction_IdColumn}));
    this->tablespan_skew->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"interaction_aniso_asymm", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinteraction->interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableaniso_asymm->interaction_IdColumn}));
    this->tableaniso_asymm->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"interaction_orientation", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinteraction->interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableorientation->interaction_IdColumn}));
    this->tableorientation->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"orientation_euler_angles", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableorientation->orientation_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableeuler_angles->orientation_IdColumn}));
    this->tableeuler_angles->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"orientation_angle_axis", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableorientation->orientation_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableangle_axis->orientation_IdColumn}));
    this->tableangle_axis->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"angle_axis_axis", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableangle_axis->angle_axis_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableaxis->angle_axis_IdColumn}));
    this->tableaxis->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"orientation_quaternion", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableorientation->orientation_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablequaternion->orientation_IdColumn}));
    this->tablequaternion->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"orientation_dcm", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableorientation->orientation_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledcm->orientation_IdColumn}));
    this->tabledcm->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    this->relationspin_coordinates = (gcnew ::System::Data::DataRelation(L"spin_coordinates", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin->spin_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecoordinates->spin_IdColumn}, false));
    this->relationspin_coordinates->Nested = true;
    this->Relations->Add(this->relationspin_coordinates);
    this->relationinteraction_tensor = (gcnew ::System::Data::DataRelation(L"interaction_tensor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinteraction->interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletensor->interaction_IdColumn}, false));
    this->relationinteraction_tensor->Nested = true;
    this->Relations->Add(this->relationinteraction_tensor);
    this->relationinteraction_eigenvalues = (gcnew ::System::Data::DataRelation(L"interaction_eigenvalues", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinteraction->interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableeigenvalues->interaction_IdColumn}, false));
    this->relationinteraction_eigenvalues->Nested = true;
    this->Relations->Add(this->relationinteraction_eigenvalues);
    this->relationinteraction_axiality_rhombicity = (gcnew ::System::Data::DataRelation(L"interaction_axiality_rhombicity", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinteraction->interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableaxiality_rhombicity->interaction_IdColumn}, false));
    this->relationinteraction_axiality_rhombicity->Nested = true;
    this->Relations->Add(this->relationinteraction_axiality_rhombicity);
    this->relationinteraction_span_skew = (gcnew ::System::Data::DataRelation(L"interaction_span_skew", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinteraction->interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespan_skew->interaction_IdColumn}, false));
    this->relationinteraction_span_skew->Nested = true;
    this->Relations->Add(this->relationinteraction_span_skew);
    this->relationinteraction_aniso_asymm = (gcnew ::System::Data::DataRelation(L"interaction_aniso_asymm", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinteraction->interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableaniso_asymm->interaction_IdColumn}, false));
    this->relationinteraction_aniso_asymm->Nested = true;
    this->Relations->Add(this->relationinteraction_aniso_asymm);
    this->relationinteraction_orientation = (gcnew ::System::Data::DataRelation(L"interaction_orientation", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinteraction->interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableorientation->interaction_IdColumn}, false));
    this->relationinteraction_orientation->Nested = true;
    this->Relations->Add(this->relationinteraction_orientation);
    this->relationorientation_euler_angles = (gcnew ::System::Data::DataRelation(L"orientation_euler_angles", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableorientation->orientation_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableeuler_angles->orientation_IdColumn}, false));
    this->relationorientation_euler_angles->Nested = true;
    this->Relations->Add(this->relationorientation_euler_angles);
    this->relationorientation_angle_axis = (gcnew ::System::Data::DataRelation(L"orientation_angle_axis", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableorientation->orientation_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableangle_axis->orientation_IdColumn}, false));
    this->relationorientation_angle_axis->Nested = true;
    this->Relations->Add(this->relationorientation_angle_axis);
    this->relationangle_axis_axis = (gcnew ::System::Data::DataRelation(L"angle_axis_axis", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableangle_axis->angle_axis_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableaxis->angle_axis_IdColumn}, false));
    this->relationangle_axis_axis->Nested = true;
    this->Relations->Add(this->relationangle_axis_axis);
    this->relationorientation_quaternion = (gcnew ::System::Data::DataRelation(L"orientation_quaternion", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableorientation->orientation_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablequaternion->orientation_IdColumn}, false));
    this->relationorientation_quaternion->Nested = true;
    this->Relations->Add(this->relationorientation_quaternion);
    this->relationorientation_dcm = (gcnew ::System::Data::DataRelation(L"orientation_dcm", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableorientation->orientation_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledcm->orientation_IdColumn}, false));
    this->relationorientation_dcm->Nested = true;
    this->Relations->Add(this->relationorientation_dcm);
}

inline ::System::Boolean spin_system::ShouldSerializespin() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializecoordinates() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializeinteraction() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializetensor() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializeeigenvalues() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializeaxiality_rhombicity() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializespan_skew() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializeaniso_asymm() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializeorientation() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializeeuler_angles() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializeangle_axis() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializeaxis() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializequaternion() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializedcm() {
    return false;
}

inline ::System::Void spin_system::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
    if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any->Namespace = ds->Namespace;
    sequence->Items->Add(any);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::spinDataTable::spinDataTable() {
    this->TableName = L"spin";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::spinDataTable::spinDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::spinDataTable::spinDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::spinDataTable::idColumn::get() {
    return this->columnid;
}

inline ::System::Data::DataColumn^  spin_system::spinDataTable::isotopeColumn::get() {
    return this->columnisotope;
}

inline ::System::Data::DataColumn^  spin_system::spinDataTable::labelColumn::get() {
    return this->columnlabel;
}

inline ::System::Data::DataColumn^  spin_system::spinDataTable::spin_IdColumn::get() {
    return this->columnspin_Id;
}

inline ::System::Int32 spin_system::spinDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::spinRow^  spin_system::spinDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::spinRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::spinDataTable::AddspinRow(spin_system::spinRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::spinRow^  spin_system::spinDataTable::AddspinRow(System::Int64 id, System::String^  isotope, System::String^  label) {
    spin_system::spinRow^  rowspinRow = (cli::safe_cast<spin_system::spinRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {id, isotope, label, nullptr};
    rowspinRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowspinRow);
    return rowspinRow;
}

inline ::System::Collections::IEnumerator^  spin_system::spinDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::spinDataTable::Clone() {
    spin_system::spinDataTable^  cln = (cli::safe_cast<spin_system::spinDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::spinDataTable::CreateInstance() {
    return (gcnew spin_system::spinDataTable());
}

inline ::System::Void spin_system::spinDataTable::InitVars() {
    this->columnid = __super::Columns[L"id"];
    this->columnisotope = __super::Columns[L"isotope"];
    this->columnlabel = __super::Columns[L"label"];
    this->columnspin_Id = __super::Columns[L"spin_Id"];
}

inline ::System::Void spin_system::spinDataTable::InitClass() {
    this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnid);
    this->columnisotope = (gcnew ::System::Data::DataColumn(L"isotope", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnisotope);
    this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnlabel);
    this->columnspin_Id = (gcnew ::System::Data::DataColumn(L"spin_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnspin_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnspin_Id}, 
            true)));
    this->columnid->AllowDBNull = false;
    this->columnid->Namespace = L"";
    this->columnisotope->AllowDBNull = false;
    this->columnisotope->Namespace = L"";
    this->columnlabel->Namespace = L"";
    this->columnspin_Id->AutoIncrement = true;
    this->columnspin_Id->AllowDBNull = false;
    this->columnspin_Id->Unique = true;
}

inline spin_system::spinRow^  spin_system::spinDataTable::NewspinRow() {
    return (cli::safe_cast<spin_system::spinRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::spinDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::spinRow(builder));
}

inline ::System::Type^  spin_system::spinDataTable::GetRowType() {
    return spin_system::spinRow::typeid;
}

inline ::System::Void spin_system::spinDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->spinRowChanged(this, (gcnew spin_system::spinRowChangeEvent((cli::safe_cast<spin_system::spinRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spinDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->spinRowChanging(this, (gcnew spin_system::spinRowChangeEvent((cli::safe_cast<spin_system::spinRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spinDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->spinRowDeleted(this, (gcnew spin_system::spinRowChangeEvent((cli::safe_cast<spin_system::spinRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spinDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->spinRowDeleting(this, (gcnew spin_system::spinRowChangeEvent((cli::safe_cast<spin_system::spinRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spinDataTable::RemovespinRow(spin_system::spinRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::spinDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"spinDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::coordinatesDataTable::coordinatesDataTable() {
    this->TableName = L"coordinates";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::coordinatesDataTable::coordinatesDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::coordinatesDataTable::coordinatesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::coordinatesDataTable::xColumn::get() {
    return this->columnx;
}

inline ::System::Data::DataColumn^  spin_system::coordinatesDataTable::yColumn::get() {
    return this->columny;
}

inline ::System::Data::DataColumn^  spin_system::coordinatesDataTable::zColumn::get() {
    return this->columnz;
}

inline ::System::Data::DataColumn^  spin_system::coordinatesDataTable::spin_IdColumn::get() {
    return this->columnspin_Id;
}

inline ::System::Int32 spin_system::coordinatesDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::coordinatesRow^  spin_system::coordinatesDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::coordinatesRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::coordinatesDataTable::AddcoordinatesRow(spin_system::coordinatesRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::coordinatesRow^  spin_system::coordinatesDataTable::AddcoordinatesRow(System::Double x, System::Double y, 
            System::Double z, spin_system::spinRow^  parentspinRowByspin_coordinates) {
    spin_system::coordinatesRow^  rowcoordinatesRow = (cli::safe_cast<spin_system::coordinatesRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {x, y, z, nullptr};
    if (parentspinRowByspin_coordinates != nullptr) {
        columnValuesArray[3] = parentspinRowByspin_coordinates[3];
    }
    rowcoordinatesRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowcoordinatesRow);
    return rowcoordinatesRow;
}

inline ::System::Collections::IEnumerator^  spin_system::coordinatesDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::coordinatesDataTable::Clone() {
    spin_system::coordinatesDataTable^  cln = (cli::safe_cast<spin_system::coordinatesDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::coordinatesDataTable::CreateInstance() {
    return (gcnew spin_system::coordinatesDataTable());
}

inline ::System::Void spin_system::coordinatesDataTable::InitVars() {
    this->columnx = __super::Columns[L"x"];
    this->columny = __super::Columns[L"y"];
    this->columnz = __super::Columns[L"z"];
    this->columnspin_Id = __super::Columns[L"spin_Id"];
}

inline ::System::Void spin_system::coordinatesDataTable::InitClass() {
    this->columnx = (gcnew ::System::Data::DataColumn(L"x", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnx);
    this->columny = (gcnew ::System::Data::DataColumn(L"y", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columny);
    this->columnz = (gcnew ::System::Data::DataColumn(L"z", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnz);
    this->columnspin_Id = (gcnew ::System::Data::DataColumn(L"spin_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnspin_Id);
    this->columnx->AllowDBNull = false;
    this->columnx->Namespace = L"";
    this->columny->AllowDBNull = false;
    this->columny->Namespace = L"";
    this->columnz->AllowDBNull = false;
    this->columnz->Namespace = L"";
}

inline spin_system::coordinatesRow^  spin_system::coordinatesDataTable::NewcoordinatesRow() {
    return (cli::safe_cast<spin_system::coordinatesRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::coordinatesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::coordinatesRow(builder));
}

inline ::System::Type^  spin_system::coordinatesDataTable::GetRowType() {
    return spin_system::coordinatesRow::typeid;
}

inline ::System::Void spin_system::coordinatesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->coordinatesRowChanged(this, (gcnew spin_system::coordinatesRowChangeEvent((cli::safe_cast<spin_system::coordinatesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::coordinatesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->coordinatesRowChanging(this, (gcnew spin_system::coordinatesRowChangeEvent((cli::safe_cast<spin_system::coordinatesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::coordinatesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->coordinatesRowDeleted(this, (gcnew spin_system::coordinatesRowChangeEvent((cli::safe_cast<spin_system::coordinatesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::coordinatesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->coordinatesRowDeleting(this, (gcnew spin_system::coordinatesRowChangeEvent((cli::safe_cast<spin_system::coordinatesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::coordinatesDataTable::RemovecoordinatesRow(spin_system::coordinatesRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::coordinatesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"coordinatesDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::interactionDataTable::interactionDataTable() {
    this->TableName = L"interaction";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::interactionDataTable::interactionDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::interactionDataTable::interactionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::interactionDataTable::kindColumn::get() {
    return this->columnkind;
}

inline ::System::Data::DataColumn^  spin_system::interactionDataTable::idColumn::get() {
    return this->columnid;
}

inline ::System::Data::DataColumn^  spin_system::interactionDataTable::unitsColumn::get() {
    return this->columnunits;
}

inline ::System::Data::DataColumn^  spin_system::interactionDataTable::spin_aColumn::get() {
    return this->columnspin_a;
}

inline ::System::Data::DataColumn^  spin_system::interactionDataTable::spin_bColumn::get() {
    return this->columnspin_b;
}

inline ::System::Data::DataColumn^  spin_system::interactionDataTable::reference_frame_idColumn::get() {
    return this->columnreference_frame_id;
}

inline ::System::Data::DataColumn^  spin_system::interactionDataTable::referenceColumn::get() {
    return this->columnreference;
}

inline ::System::Data::DataColumn^  spin_system::interactionDataTable::labelColumn::get() {
    return this->columnlabel;
}

inline ::System::Data::DataColumn^  spin_system::interactionDataTable::scalarColumn::get() {
    return this->columnscalar;
}

inline ::System::Data::DataColumn^  spin_system::interactionDataTable::interaction_IdColumn::get() {
    return this->columninteraction_Id;
}

inline ::System::Int32 spin_system::interactionDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::interactionRow^  spin_system::interactionDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::interactionRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::interactionDataTable::AddinteractionRow(spin_system::interactionRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::interactionRow^  spin_system::interactionDataTable::AddinteractionRow(
            System::String^  kind, 
            System::Int64 id, 
            System::String^  units, 
            System::Int64 spin_a, 
            System::Int64 spin_b, 
            System::Int64 reference_frame_id, 
            System::String^  reference, 
            System::String^  label, 
            System::Double scalar) {
    spin_system::interactionRow^  rowinteractionRow = (cli::safe_cast<spin_system::interactionRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(10) {kind, id, units, spin_a, 
        spin_b, reference_frame_id, reference, label, scalar, nullptr};
    rowinteractionRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowinteractionRow);
    return rowinteractionRow;
}

inline ::System::Collections::IEnumerator^  spin_system::interactionDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::interactionDataTable::Clone() {
    spin_system::interactionDataTable^  cln = (cli::safe_cast<spin_system::interactionDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::interactionDataTable::CreateInstance() {
    return (gcnew spin_system::interactionDataTable());
}

inline ::System::Void spin_system::interactionDataTable::InitVars() {
    this->columnkind = __super::Columns[L"kind"];
    this->columnid = __super::Columns[L"id"];
    this->columnunits = __super::Columns[L"units"];
    this->columnspin_a = __super::Columns[L"spin_a"];
    this->columnspin_b = __super::Columns[L"spin_b"];
    this->columnreference_frame_id = __super::Columns[L"reference_frame_id"];
    this->columnreference = __super::Columns[L"reference"];
    this->columnlabel = __super::Columns[L"label"];
    this->columnscalar = __super::Columns[L"scalar"];
    this->columninteraction_Id = __super::Columns[L"interaction_Id"];
}

inline ::System::Void spin_system::interactionDataTable::InitClass() {
    this->columnkind = (gcnew ::System::Data::DataColumn(L"kind", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnkind);
    this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnid);
    this->columnunits = (gcnew ::System::Data::DataColumn(L"units", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnunits);
    this->columnspin_a = (gcnew ::System::Data::DataColumn(L"spin_a", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnspin_a);
    this->columnspin_b = (gcnew ::System::Data::DataColumn(L"spin_b", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnspin_b);
    this->columnreference_frame_id = (gcnew ::System::Data::DataColumn(L"reference_frame_id", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnreference_frame_id);
    this->columnreference = (gcnew ::System::Data::DataColumn(L"reference", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnreference);
    this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnlabel);
    this->columnscalar = (gcnew ::System::Data::DataColumn(L"scalar", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnscalar);
    this->columninteraction_Id = (gcnew ::System::Data::DataColumn(L"interaction_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columninteraction_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columninteraction_Id}, 
            true)));
    this->columnkind->AllowDBNull = false;
    this->columnkind->Namespace = L"";
    this->columnid->AllowDBNull = false;
    this->columnid->Namespace = L"";
    this->columnunits->AllowDBNull = false;
    this->columnunits->Namespace = L"";
    this->columnspin_a->AllowDBNull = false;
    this->columnspin_a->Namespace = L"";
    this->columnspin_b->Namespace = L"";
    this->columnreference_frame_id->Namespace = L"";
    this->columnreference->Namespace = L"";
    this->columnlabel->Namespace = L"";
    this->columnscalar->AllowDBNull = true;
    this->columninteraction_Id->AutoIncrement = true;
    this->columninteraction_Id->AllowDBNull = false;
    this->columninteraction_Id->Unique = true;
}

inline spin_system::interactionRow^  spin_system::interactionDataTable::NewinteractionRow() {
    return (cli::safe_cast<spin_system::interactionRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::interactionDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::interactionRow(builder));
}

inline ::System::Type^  spin_system::interactionDataTable::GetRowType() {
    return spin_system::interactionRow::typeid;
}

inline ::System::Void spin_system::interactionDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->interactionRowChanged(this, (gcnew spin_system::interactionRowChangeEvent((cli::safe_cast<spin_system::interactionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::interactionDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->interactionRowChanging(this, (gcnew spin_system::interactionRowChangeEvent((cli::safe_cast<spin_system::interactionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::interactionDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->interactionRowDeleted(this, (gcnew spin_system::interactionRowChangeEvent((cli::safe_cast<spin_system::interactionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::interactionDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->interactionRowDeleting(this, (gcnew spin_system::interactionRowChangeEvent((cli::safe_cast<spin_system::interactionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::interactionDataTable::RemoveinteractionRow(spin_system::interactionRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::interactionDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"interactionDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::tensorDataTable::tensorDataTable() {
    this->TableName = L"tensor";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::tensorDataTable::tensorDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::tensorDataTable::tensorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::xxColumn::get() {
    return this->columnxx;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::xyColumn::get() {
    return this->columnxy;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::xzColumn::get() {
    return this->columnxz;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::yxColumn::get() {
    return this->columnyx;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::yyColumn::get() {
    return this->columnyy;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::yzColumn::get() {
    return this->columnyz;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::zxColumn::get() {
    return this->columnzx;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::zyColumn::get() {
    return this->columnzy;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::zzColumn::get() {
    return this->columnzz;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::interaction_IdColumn::get() {
    return this->columninteraction_Id;
}

inline ::System::Int32 spin_system::tensorDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::tensorRow^  spin_system::tensorDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::tensorRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::tensorDataTable::AddtensorRow(spin_system::tensorRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::tensorRow^  spin_system::tensorDataTable::AddtensorRow(
            System::Double xx, 
            System::Double xy, 
            System::Double xz, 
            System::Double yx, 
            System::Double yy, 
            System::Double yz, 
            System::Double zx, 
            System::Double zy, 
            System::Double zz, 
            spin_system::interactionRow^  parentinteractionRowByinteraction_tensor) {
    spin_system::tensorRow^  rowtensorRow = (cli::safe_cast<spin_system::tensorRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(10) {xx, xy, xz, yx, yy, yz, 
        zx, zy, zz, nullptr};
    if (parentinteractionRowByinteraction_tensor != nullptr) {
        columnValuesArray[9] = parentinteractionRowByinteraction_tensor[9];
    }
    rowtensorRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowtensorRow);
    return rowtensorRow;
}

inline ::System::Collections::IEnumerator^  spin_system::tensorDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::tensorDataTable::Clone() {
    spin_system::tensorDataTable^  cln = (cli::safe_cast<spin_system::tensorDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::tensorDataTable::CreateInstance() {
    return (gcnew spin_system::tensorDataTable());
}

inline ::System::Void spin_system::tensorDataTable::InitVars() {
    this->columnxx = __super::Columns[L"xx"];
    this->columnxy = __super::Columns[L"xy"];
    this->columnxz = __super::Columns[L"xz"];
    this->columnyx = __super::Columns[L"yx"];
    this->columnyy = __super::Columns[L"yy"];
    this->columnyz = __super::Columns[L"yz"];
    this->columnzx = __super::Columns[L"zx"];
    this->columnzy = __super::Columns[L"zy"];
    this->columnzz = __super::Columns[L"zz"];
    this->columninteraction_Id = __super::Columns[L"interaction_Id"];
}

inline ::System::Void spin_system::tensorDataTable::InitClass() {
    this->columnxx = (gcnew ::System::Data::DataColumn(L"xx", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnxx);
    this->columnxy = (gcnew ::System::Data::DataColumn(L"xy", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnxy);
    this->columnxz = (gcnew ::System::Data::DataColumn(L"xz", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnxz);
    this->columnyx = (gcnew ::System::Data::DataColumn(L"yx", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnyx);
    this->columnyy = (gcnew ::System::Data::DataColumn(L"yy", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnyy);
    this->columnyz = (gcnew ::System::Data::DataColumn(L"yz", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnyz);
    this->columnzx = (gcnew ::System::Data::DataColumn(L"zx", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnzx);
    this->columnzy = (gcnew ::System::Data::DataColumn(L"zy", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnzy);
    this->columnzz = (gcnew ::System::Data::DataColumn(L"zz", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnzz);
    this->columninteraction_Id = (gcnew ::System::Data::DataColumn(L"interaction_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columninteraction_Id);
    this->columnxx->AllowDBNull = false;
    this->columnxx->Namespace = L"";
    this->columnxy->AllowDBNull = false;
    this->columnxy->Namespace = L"";
    this->columnxz->AllowDBNull = false;
    this->columnxz->Namespace = L"";
    this->columnyx->AllowDBNull = false;
    this->columnyx->Namespace = L"";
    this->columnyy->AllowDBNull = false;
    this->columnyy->Namespace = L"";
    this->columnyz->AllowDBNull = false;
    this->columnyz->Namespace = L"";
    this->columnzx->AllowDBNull = false;
    this->columnzx->Namespace = L"";
    this->columnzy->AllowDBNull = false;
    this->columnzy->Namespace = L"";
    this->columnzz->AllowDBNull = false;
    this->columnzz->Namespace = L"";
}

inline spin_system::tensorRow^  spin_system::tensorDataTable::NewtensorRow() {
    return (cli::safe_cast<spin_system::tensorRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::tensorDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::tensorRow(builder));
}

inline ::System::Type^  spin_system::tensorDataTable::GetRowType() {
    return spin_system::tensorRow::typeid;
}

inline ::System::Void spin_system::tensorDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->tensorRowChanged(this, (gcnew spin_system::tensorRowChangeEvent((cli::safe_cast<spin_system::tensorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::tensorDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->tensorRowChanging(this, (gcnew spin_system::tensorRowChangeEvent((cli::safe_cast<spin_system::tensorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::tensorDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->tensorRowDeleted(this, (gcnew spin_system::tensorRowChangeEvent((cli::safe_cast<spin_system::tensorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::tensorDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->tensorRowDeleting(this, (gcnew spin_system::tensorRowChangeEvent((cli::safe_cast<spin_system::tensorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::tensorDataTable::RemovetensorRow(spin_system::tensorRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::tensorDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"tensorDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::eigenvaluesDataTable::eigenvaluesDataTable() {
    this->TableName = L"eigenvalues";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::eigenvaluesDataTable::eigenvaluesDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::eigenvaluesDataTable::eigenvaluesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::eigenvaluesDataTable::xxColumn::get() {
    return this->columnxx;
}

inline ::System::Data::DataColumn^  spin_system::eigenvaluesDataTable::yyColumn::get() {
    return this->columnyy;
}

inline ::System::Data::DataColumn^  spin_system::eigenvaluesDataTable::zzColumn::get() {
    return this->columnzz;
}

inline ::System::Data::DataColumn^  spin_system::eigenvaluesDataTable::interaction_IdColumn::get() {
    return this->columninteraction_Id;
}

inline ::System::Int32 spin_system::eigenvaluesDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::eigenvaluesRow^  spin_system::eigenvaluesDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::eigenvaluesRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::eigenvaluesDataTable::AddeigenvaluesRow(spin_system::eigenvaluesRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::eigenvaluesRow^  spin_system::eigenvaluesDataTable::AddeigenvaluesRow(System::Double xx, System::Double yy, 
            System::Double zz, spin_system::interactionRow^  parentinteractionRowByinteraction_eigenvalues) {
    spin_system::eigenvaluesRow^  roweigenvaluesRow = (cli::safe_cast<spin_system::eigenvaluesRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {xx, yy, zz, nullptr};
    if (parentinteractionRowByinteraction_eigenvalues != nullptr) {
        columnValuesArray[3] = parentinteractionRowByinteraction_eigenvalues[9];
    }
    roweigenvaluesRow->ItemArray = columnValuesArray;
    this->Rows->Add(roweigenvaluesRow);
    return roweigenvaluesRow;
}

inline ::System::Collections::IEnumerator^  spin_system::eigenvaluesDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::eigenvaluesDataTable::Clone() {
    spin_system::eigenvaluesDataTable^  cln = (cli::safe_cast<spin_system::eigenvaluesDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::eigenvaluesDataTable::CreateInstance() {
    return (gcnew spin_system::eigenvaluesDataTable());
}

inline ::System::Void spin_system::eigenvaluesDataTable::InitVars() {
    this->columnxx = __super::Columns[L"xx"];
    this->columnyy = __super::Columns[L"yy"];
    this->columnzz = __super::Columns[L"zz"];
    this->columninteraction_Id = __super::Columns[L"interaction_Id"];
}

inline ::System::Void spin_system::eigenvaluesDataTable::InitClass() {
    this->columnxx = (gcnew ::System::Data::DataColumn(L"xx", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnxx);
    this->columnyy = (gcnew ::System::Data::DataColumn(L"yy", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnyy);
    this->columnzz = (gcnew ::System::Data::DataColumn(L"zz", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnzz);
    this->columninteraction_Id = (gcnew ::System::Data::DataColumn(L"interaction_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columninteraction_Id);
    this->columnxx->AllowDBNull = false;
    this->columnxx->Namespace = L"";
    this->columnyy->AllowDBNull = false;
    this->columnyy->Namespace = L"";
    this->columnzz->AllowDBNull = false;
    this->columnzz->Namespace = L"";
}

inline spin_system::eigenvaluesRow^  spin_system::eigenvaluesDataTable::NeweigenvaluesRow() {
    return (cli::safe_cast<spin_system::eigenvaluesRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::eigenvaluesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::eigenvaluesRow(builder));
}

inline ::System::Type^  spin_system::eigenvaluesDataTable::GetRowType() {
    return spin_system::eigenvaluesRow::typeid;
}

inline ::System::Void spin_system::eigenvaluesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->eigenvaluesRowChanged(this, (gcnew spin_system::eigenvaluesRowChangeEvent((cli::safe_cast<spin_system::eigenvaluesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::eigenvaluesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->eigenvaluesRowChanging(this, (gcnew spin_system::eigenvaluesRowChangeEvent((cli::safe_cast<spin_system::eigenvaluesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::eigenvaluesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->eigenvaluesRowDeleted(this, (gcnew spin_system::eigenvaluesRowChangeEvent((cli::safe_cast<spin_system::eigenvaluesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::eigenvaluesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->eigenvaluesRowDeleting(this, (gcnew spin_system::eigenvaluesRowChangeEvent((cli::safe_cast<spin_system::eigenvaluesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::eigenvaluesDataTable::RemoveeigenvaluesRow(spin_system::eigenvaluesRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::eigenvaluesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"eigenvaluesDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::axiality_rhombicityDataTable::axiality_rhombicityDataTable() {
    this->TableName = L"axiality_rhombicity";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::axiality_rhombicityDataTable::axiality_rhombicityDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::axiality_rhombicityDataTable::axiality_rhombicityDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::axiality_rhombicityDataTable::isoColumn::get() {
    return this->columniso;
}

inline ::System::Data::DataColumn^  spin_system::axiality_rhombicityDataTable::axColumn::get() {
    return this->columnax;
}

inline ::System::Data::DataColumn^  spin_system::axiality_rhombicityDataTable::rhColumn::get() {
    return this->columnrh;
}

inline ::System::Data::DataColumn^  spin_system::axiality_rhombicityDataTable::interaction_IdColumn::get() {
    return this->columninteraction_Id;
}

inline ::System::Int32 spin_system::axiality_rhombicityDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::axiality_rhombicityRow^  spin_system::axiality_rhombicityDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::axiality_rhombicityRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::Addaxiality_rhombicityRow(spin_system::axiality_rhombicityRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::axiality_rhombicityRow^  spin_system::axiality_rhombicityDataTable::Addaxiality_rhombicityRow(System::Double iso, 
            System::Double ax, System::Double rh, spin_system::interactionRow^  parentinteractionRowByinteraction_axiality_rhombicity) {
    spin_system::axiality_rhombicityRow^  rowaxiality_rhombicityRow = (cli::safe_cast<spin_system::axiality_rhombicityRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {iso, ax, rh, nullptr};
    if (parentinteractionRowByinteraction_axiality_rhombicity != nullptr) {
        columnValuesArray[3] = parentinteractionRowByinteraction_axiality_rhombicity[9];
    }
    rowaxiality_rhombicityRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowaxiality_rhombicityRow);
    return rowaxiality_rhombicityRow;
}

inline ::System::Collections::IEnumerator^  spin_system::axiality_rhombicityDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::axiality_rhombicityDataTable::Clone() {
    spin_system::axiality_rhombicityDataTable^  cln = (cli::safe_cast<spin_system::axiality_rhombicityDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::axiality_rhombicityDataTable::CreateInstance() {
    return (gcnew spin_system::axiality_rhombicityDataTable());
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::InitVars() {
    this->columniso = __super::Columns[L"iso"];
    this->columnax = __super::Columns[L"ax"];
    this->columnrh = __super::Columns[L"rh"];
    this->columninteraction_Id = __super::Columns[L"interaction_Id"];
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::InitClass() {
    this->columniso = (gcnew ::System::Data::DataColumn(L"iso", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columniso);
    this->columnax = (gcnew ::System::Data::DataColumn(L"ax", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnax);
    this->columnrh = (gcnew ::System::Data::DataColumn(L"rh", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnrh);
    this->columninteraction_Id = (gcnew ::System::Data::DataColumn(L"interaction_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columninteraction_Id);
    this->columniso->AllowDBNull = false;
    this->columniso->Namespace = L"";
    this->columnax->AllowDBNull = false;
    this->columnax->Namespace = L"";
    this->columnrh->AllowDBNull = false;
    this->columnrh->Namespace = L"";
}

inline spin_system::axiality_rhombicityRow^  spin_system::axiality_rhombicityDataTable::Newaxiality_rhombicityRow() {
    return (cli::safe_cast<spin_system::axiality_rhombicityRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::axiality_rhombicityDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::axiality_rhombicityRow(builder));
}

inline ::System::Type^  spin_system::axiality_rhombicityDataTable::GetRowType() {
    return spin_system::axiality_rhombicityRow::typeid;
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->axiality_rhombicityRowChanged(this, (gcnew spin_system::axiality_rhombicityRowChangeEvent((cli::safe_cast<spin_system::axiality_rhombicityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->axiality_rhombicityRowChanging(this, (gcnew spin_system::axiality_rhombicityRowChangeEvent((cli::safe_cast<spin_system::axiality_rhombicityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->axiality_rhombicityRowDeleted(this, (gcnew spin_system::axiality_rhombicityRowChangeEvent((cli::safe_cast<spin_system::axiality_rhombicityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->axiality_rhombicityRowDeleting(this, (gcnew spin_system::axiality_rhombicityRowChangeEvent((cli::safe_cast<spin_system::axiality_rhombicityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::Removeaxiality_rhombicityRow(spin_system::axiality_rhombicityRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::axiality_rhombicityDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"axiality_rhombicityDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::span_skewDataTable::span_skewDataTable() {
    this->TableName = L"span_skew";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::span_skewDataTable::span_skewDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::span_skewDataTable::span_skewDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::span_skewDataTable::isoColumn::get() {
    return this->columniso;
}

inline ::System::Data::DataColumn^  spin_system::span_skewDataTable::spanColumn::get() {
    return this->columnspan;
}

inline ::System::Data::DataColumn^  spin_system::span_skewDataTable::skewColumn::get() {
    return this->columnskew;
}

inline ::System::Data::DataColumn^  spin_system::span_skewDataTable::interaction_IdColumn::get() {
    return this->columninteraction_Id;
}

inline ::System::Int32 spin_system::span_skewDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::span_skewRow^  spin_system::span_skewDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::span_skewRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::span_skewDataTable::Addspan_skewRow(spin_system::span_skewRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::span_skewRow^  spin_system::span_skewDataTable::Addspan_skewRow(System::Double iso, System::Double span, 
            System::Double skew, spin_system::interactionRow^  parentinteractionRowByinteraction_span_skew) {
    spin_system::span_skewRow^  rowspan_skewRow = (cli::safe_cast<spin_system::span_skewRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {iso, span, skew, nullptr};
    if (parentinteractionRowByinteraction_span_skew != nullptr) {
        columnValuesArray[3] = parentinteractionRowByinteraction_span_skew[9];
    }
    rowspan_skewRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowspan_skewRow);
    return rowspan_skewRow;
}

inline ::System::Collections::IEnumerator^  spin_system::span_skewDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::span_skewDataTable::Clone() {
    spin_system::span_skewDataTable^  cln = (cli::safe_cast<spin_system::span_skewDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::span_skewDataTable::CreateInstance() {
    return (gcnew spin_system::span_skewDataTable());
}

inline ::System::Void spin_system::span_skewDataTable::InitVars() {
    this->columniso = __super::Columns[L"iso"];
    this->columnspan = __super::Columns[L"span"];
    this->columnskew = __super::Columns[L"skew"];
    this->columninteraction_Id = __super::Columns[L"interaction_Id"];
}

inline ::System::Void spin_system::span_skewDataTable::InitClass() {
    this->columniso = (gcnew ::System::Data::DataColumn(L"iso", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columniso);
    this->columnspan = (gcnew ::System::Data::DataColumn(L"span", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnspan);
    this->columnskew = (gcnew ::System::Data::DataColumn(L"skew", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnskew);
    this->columninteraction_Id = (gcnew ::System::Data::DataColumn(L"interaction_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columninteraction_Id);
    this->columniso->AllowDBNull = false;
    this->columniso->Namespace = L"";
    this->columnspan->AllowDBNull = false;
    this->columnspan->Namespace = L"";
    this->columnskew->AllowDBNull = false;
    this->columnskew->Namespace = L"";
}

inline spin_system::span_skewRow^  spin_system::span_skewDataTable::Newspan_skewRow() {
    return (cli::safe_cast<spin_system::span_skewRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::span_skewDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::span_skewRow(builder));
}

inline ::System::Type^  spin_system::span_skewDataTable::GetRowType() {
    return spin_system::span_skewRow::typeid;
}

inline ::System::Void spin_system::span_skewDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->span_skewRowChanged(this, (gcnew spin_system::span_skewRowChangeEvent((cli::safe_cast<spin_system::span_skewRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::span_skewDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->span_skewRowChanging(this, (gcnew spin_system::span_skewRowChangeEvent((cli::safe_cast<spin_system::span_skewRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::span_skewDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->span_skewRowDeleted(this, (gcnew spin_system::span_skewRowChangeEvent((cli::safe_cast<spin_system::span_skewRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::span_skewDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->span_skewRowDeleting(this, (gcnew spin_system::span_skewRowChangeEvent((cli::safe_cast<spin_system::span_skewRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::span_skewDataTable::Removespan_skewRow(spin_system::span_skewRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::span_skewDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"span_skewDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::aniso_asymmDataTable::aniso_asymmDataTable() {
    this->TableName = L"aniso_asymm";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::aniso_asymmDataTable::aniso_asymmDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::aniso_asymmDataTable::aniso_asymmDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::aniso_asymmDataTable::isoColumn::get() {
    return this->columniso;
}

inline ::System::Data::DataColumn^  spin_system::aniso_asymmDataTable::anisoColumn::get() {
    return this->columnaniso;
}

inline ::System::Data::DataColumn^  spin_system::aniso_asymmDataTable::asymmColumn::get() {
    return this->columnasymm;
}

inline ::System::Data::DataColumn^  spin_system::aniso_asymmDataTable::interaction_IdColumn::get() {
    return this->columninteraction_Id;
}

inline ::System::Int32 spin_system::aniso_asymmDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::aniso_asymmRow^  spin_system::aniso_asymmDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::aniso_asymmRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::aniso_asymmDataTable::Addaniso_asymmRow(spin_system::aniso_asymmRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::aniso_asymmRow^  spin_system::aniso_asymmDataTable::Addaniso_asymmRow(System::Double iso, System::Double aniso, 
            System::Double asymm, spin_system::interactionRow^  parentinteractionRowByinteraction_aniso_asymm) {
    spin_system::aniso_asymmRow^  rowaniso_asymmRow = (cli::safe_cast<spin_system::aniso_asymmRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {iso, aniso, asymm, nullptr};
    if (parentinteractionRowByinteraction_aniso_asymm != nullptr) {
        columnValuesArray[3] = parentinteractionRowByinteraction_aniso_asymm[9];
    }
    rowaniso_asymmRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowaniso_asymmRow);
    return rowaniso_asymmRow;
}

inline ::System::Collections::IEnumerator^  spin_system::aniso_asymmDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::aniso_asymmDataTable::Clone() {
    spin_system::aniso_asymmDataTable^  cln = (cli::safe_cast<spin_system::aniso_asymmDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::aniso_asymmDataTable::CreateInstance() {
    return (gcnew spin_system::aniso_asymmDataTable());
}

inline ::System::Void spin_system::aniso_asymmDataTable::InitVars() {
    this->columniso = __super::Columns[L"iso"];
    this->columnaniso = __super::Columns[L"aniso"];
    this->columnasymm = __super::Columns[L"asymm"];
    this->columninteraction_Id = __super::Columns[L"interaction_Id"];
}

inline ::System::Void spin_system::aniso_asymmDataTable::InitClass() {
    this->columniso = (gcnew ::System::Data::DataColumn(L"iso", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columniso);
    this->columnaniso = (gcnew ::System::Data::DataColumn(L"aniso", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnaniso);
    this->columnasymm = (gcnew ::System::Data::DataColumn(L"asymm", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnasymm);
    this->columninteraction_Id = (gcnew ::System::Data::DataColumn(L"interaction_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columninteraction_Id);
    this->columniso->AllowDBNull = false;
    this->columniso->Namespace = L"";
    this->columnaniso->AllowDBNull = false;
    this->columnaniso->Namespace = L"";
    this->columnasymm->AllowDBNull = false;
    this->columnasymm->Namespace = L"";
}

inline spin_system::aniso_asymmRow^  spin_system::aniso_asymmDataTable::Newaniso_asymmRow() {
    return (cli::safe_cast<spin_system::aniso_asymmRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::aniso_asymmDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::aniso_asymmRow(builder));
}

inline ::System::Type^  spin_system::aniso_asymmDataTable::GetRowType() {
    return spin_system::aniso_asymmRow::typeid;
}

inline ::System::Void spin_system::aniso_asymmDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->aniso_asymmRowChanged(this, (gcnew spin_system::aniso_asymmRowChangeEvent((cli::safe_cast<spin_system::aniso_asymmRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::aniso_asymmDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->aniso_asymmRowChanging(this, (gcnew spin_system::aniso_asymmRowChangeEvent((cli::safe_cast<spin_system::aniso_asymmRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::aniso_asymmDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->aniso_asymmRowDeleted(this, (gcnew spin_system::aniso_asymmRowChangeEvent((cli::safe_cast<spin_system::aniso_asymmRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::aniso_asymmDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->aniso_asymmRowDeleting(this, (gcnew spin_system::aniso_asymmRowChangeEvent((cli::safe_cast<spin_system::aniso_asymmRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::aniso_asymmDataTable::Removeaniso_asymmRow(spin_system::aniso_asymmRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::aniso_asymmDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"aniso_asymmDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::orientationDataTable::orientationDataTable() {
    this->TableName = L"orientation";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::orientationDataTable::orientationDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::orientationDataTable::orientationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::orientationDataTable::orientation_IdColumn::get() {
    return this->columnorientation_Id;
}

inline ::System::Data::DataColumn^  spin_system::orientationDataTable::interaction_IdColumn::get() {
    return this->columninteraction_Id;
}

inline ::System::Int32 spin_system::orientationDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::orientationRow^  spin_system::orientationDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::orientationRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::orientationDataTable::AddorientationRow(spin_system::orientationRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::orientationRow^  spin_system::orientationDataTable::AddorientationRow(spin_system::interactionRow^  parentinteractionRowByinteraction_orientation) {
    spin_system::orientationRow^  roworientationRow = (cli::safe_cast<spin_system::orientationRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentinteractionRowByinteraction_orientation != nullptr) {
        columnValuesArray[1] = parentinteractionRowByinteraction_orientation[9];
    }
    roworientationRow->ItemArray = columnValuesArray;
    this->Rows->Add(roworientationRow);
    return roworientationRow;
}

inline ::System::Collections::IEnumerator^  spin_system::orientationDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::orientationDataTable::Clone() {
    spin_system::orientationDataTable^  cln = (cli::safe_cast<spin_system::orientationDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::orientationDataTable::CreateInstance() {
    return (gcnew spin_system::orientationDataTable());
}

inline ::System::Void spin_system::orientationDataTable::InitVars() {
    this->columnorientation_Id = __super::Columns[L"orientation_Id"];
    this->columninteraction_Id = __super::Columns[L"interaction_Id"];
}

inline ::System::Void spin_system::orientationDataTable::InitClass() {
    this->columnorientation_Id = (gcnew ::System::Data::DataColumn(L"orientation_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnorientation_Id);
    this->columninteraction_Id = (gcnew ::System::Data::DataColumn(L"interaction_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columninteraction_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnorientation_Id}, 
            true)));
    this->columnorientation_Id->AutoIncrement = true;
    this->columnorientation_Id->AllowDBNull = false;
    this->columnorientation_Id->Unique = true;
}

inline spin_system::orientationRow^  spin_system::orientationDataTable::NeworientationRow() {
    return (cli::safe_cast<spin_system::orientationRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::orientationDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::orientationRow(builder));
}

inline ::System::Type^  spin_system::orientationDataTable::GetRowType() {
    return spin_system::orientationRow::typeid;
}

inline ::System::Void spin_system::orientationDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->orientationRowChanged(this, (gcnew spin_system::orientationRowChangeEvent((cli::safe_cast<spin_system::orientationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::orientationDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->orientationRowChanging(this, (gcnew spin_system::orientationRowChangeEvent((cli::safe_cast<spin_system::orientationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::orientationDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->orientationRowDeleted(this, (gcnew spin_system::orientationRowChangeEvent((cli::safe_cast<spin_system::orientationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::orientationDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->orientationRowDeleting(this, (gcnew spin_system::orientationRowChangeEvent((cli::safe_cast<spin_system::orientationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::orientationDataTable::RemoveorientationRow(spin_system::orientationRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::orientationDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"orientationDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::euler_anglesDataTable::euler_anglesDataTable() {
    this->TableName = L"euler_angles";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::euler_anglesDataTable::euler_anglesDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::euler_anglesDataTable::euler_anglesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::euler_anglesDataTable::alphaColumn::get() {
    return this->columnalpha;
}

inline ::System::Data::DataColumn^  spin_system::euler_anglesDataTable::betaColumn::get() {
    return this->columnbeta;
}

inline ::System::Data::DataColumn^  spin_system::euler_anglesDataTable::gammaColumn::get() {
    return this->columngamma;
}

inline ::System::Data::DataColumn^  spin_system::euler_anglesDataTable::orientation_IdColumn::get() {
    return this->columnorientation_Id;
}

inline ::System::Int32 spin_system::euler_anglesDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::euler_anglesRow^  spin_system::euler_anglesDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::euler_anglesRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::euler_anglesDataTable::Addeuler_anglesRow(spin_system::euler_anglesRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::euler_anglesRow^  spin_system::euler_anglesDataTable::Addeuler_anglesRow(System::Double alpha, System::Double beta, 
            System::Double gamma, spin_system::orientationRow^  parentorientationRowByorientation_euler_angles) {
    spin_system::euler_anglesRow^  roweuler_anglesRow = (cli::safe_cast<spin_system::euler_anglesRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {alpha, beta, gamma, nullptr};
    if (parentorientationRowByorientation_euler_angles != nullptr) {
        columnValuesArray[3] = parentorientationRowByorientation_euler_angles[0];
    }
    roweuler_anglesRow->ItemArray = columnValuesArray;
    this->Rows->Add(roweuler_anglesRow);
    return roweuler_anglesRow;
}

inline ::System::Collections::IEnumerator^  spin_system::euler_anglesDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::euler_anglesDataTable::Clone() {
    spin_system::euler_anglesDataTable^  cln = (cli::safe_cast<spin_system::euler_anglesDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::euler_anglesDataTable::CreateInstance() {
    return (gcnew spin_system::euler_anglesDataTable());
}

inline ::System::Void spin_system::euler_anglesDataTable::InitVars() {
    this->columnalpha = __super::Columns[L"alpha"];
    this->columnbeta = __super::Columns[L"beta"];
    this->columngamma = __super::Columns[L"gamma"];
    this->columnorientation_Id = __super::Columns[L"orientation_Id"];
}

inline ::System::Void spin_system::euler_anglesDataTable::InitClass() {
    this->columnalpha = (gcnew ::System::Data::DataColumn(L"alpha", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnalpha);
    this->columnbeta = (gcnew ::System::Data::DataColumn(L"beta", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnbeta);
    this->columngamma = (gcnew ::System::Data::DataColumn(L"gamma", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columngamma);
    this->columnorientation_Id = (gcnew ::System::Data::DataColumn(L"orientation_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnorientation_Id);
    this->columnalpha->AllowDBNull = false;
    this->columnalpha->Namespace = L"";
    this->columnbeta->AllowDBNull = false;
    this->columnbeta->Namespace = L"";
    this->columngamma->AllowDBNull = false;
    this->columngamma->Namespace = L"";
}

inline spin_system::euler_anglesRow^  spin_system::euler_anglesDataTable::Neweuler_anglesRow() {
    return (cli::safe_cast<spin_system::euler_anglesRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::euler_anglesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::euler_anglesRow(builder));
}

inline ::System::Type^  spin_system::euler_anglesDataTable::GetRowType() {
    return spin_system::euler_anglesRow::typeid;
}

inline ::System::Void spin_system::euler_anglesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->euler_anglesRowChanged(this, (gcnew spin_system::euler_anglesRowChangeEvent((cli::safe_cast<spin_system::euler_anglesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::euler_anglesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->euler_anglesRowChanging(this, (gcnew spin_system::euler_anglesRowChangeEvent((cli::safe_cast<spin_system::euler_anglesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::euler_anglesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->euler_anglesRowDeleted(this, (gcnew spin_system::euler_anglesRowChangeEvent((cli::safe_cast<spin_system::euler_anglesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::euler_anglesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->euler_anglesRowDeleting(this, (gcnew spin_system::euler_anglesRowChangeEvent((cli::safe_cast<spin_system::euler_anglesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::euler_anglesDataTable::Removeeuler_anglesRow(spin_system::euler_anglesRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::euler_anglesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"euler_anglesDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::angle_axisDataTable::angle_axisDataTable() {
    this->TableName = L"angle_axis";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::angle_axisDataTable::angle_axisDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::angle_axisDataTable::angle_axisDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::angle_axisDataTable::angleColumn::get() {
    return this->columnangle;
}

inline ::System::Data::DataColumn^  spin_system::angle_axisDataTable::angle_axis_IdColumn::get() {
    return this->columnangle_axis_Id;
}

inline ::System::Data::DataColumn^  spin_system::angle_axisDataTable::orientation_IdColumn::get() {
    return this->columnorientation_Id;
}

inline ::System::Int32 spin_system::angle_axisDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::angle_axisRow^  spin_system::angle_axisDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::angle_axisRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::angle_axisDataTable::Addangle_axisRow(spin_system::angle_axisRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::angle_axisRow^  spin_system::angle_axisDataTable::Addangle_axisRow(System::Double angle, spin_system::orientationRow^  parentorientationRowByorientation_angle_axis) {
    spin_system::angle_axisRow^  rowangle_axisRow = (cli::safe_cast<spin_system::angle_axisRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {angle, nullptr, nullptr};
    if (parentorientationRowByorientation_angle_axis != nullptr) {
        columnValuesArray[2] = parentorientationRowByorientation_angle_axis[0];
    }
    rowangle_axisRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowangle_axisRow);
    return rowangle_axisRow;
}

inline ::System::Collections::IEnumerator^  spin_system::angle_axisDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::angle_axisDataTable::Clone() {
    spin_system::angle_axisDataTable^  cln = (cli::safe_cast<spin_system::angle_axisDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::angle_axisDataTable::CreateInstance() {
    return (gcnew spin_system::angle_axisDataTable());
}

inline ::System::Void spin_system::angle_axisDataTable::InitVars() {
    this->columnangle = __super::Columns[L"angle"];
    this->columnangle_axis_Id = __super::Columns[L"angle_axis_Id"];
    this->columnorientation_Id = __super::Columns[L"orientation_Id"];
}

inline ::System::Void spin_system::angle_axisDataTable::InitClass() {
    this->columnangle = (gcnew ::System::Data::DataColumn(L"angle", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnangle);
    this->columnangle_axis_Id = (gcnew ::System::Data::DataColumn(L"angle_axis_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnangle_axis_Id);
    this->columnorientation_Id = (gcnew ::System::Data::DataColumn(L"orientation_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnorientation_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnangle_axis_Id}, 
            true)));
    this->columnangle->AllowDBNull = false;
    this->columnangle_axis_Id->AutoIncrement = true;
    this->columnangle_axis_Id->AllowDBNull = false;
    this->columnangle_axis_Id->Unique = true;
}

inline spin_system::angle_axisRow^  spin_system::angle_axisDataTable::Newangle_axisRow() {
    return (cli::safe_cast<spin_system::angle_axisRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::angle_axisDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::angle_axisRow(builder));
}

inline ::System::Type^  spin_system::angle_axisDataTable::GetRowType() {
    return spin_system::angle_axisRow::typeid;
}

inline ::System::Void spin_system::angle_axisDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->angle_axisRowChanged(this, (gcnew spin_system::angle_axisRowChangeEvent((cli::safe_cast<spin_system::angle_axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::angle_axisDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->angle_axisRowChanging(this, (gcnew spin_system::angle_axisRowChangeEvent((cli::safe_cast<spin_system::angle_axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::angle_axisDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->angle_axisRowDeleted(this, (gcnew spin_system::angle_axisRowChangeEvent((cli::safe_cast<spin_system::angle_axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::angle_axisDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->angle_axisRowDeleting(this, (gcnew spin_system::angle_axisRowChangeEvent((cli::safe_cast<spin_system::angle_axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::angle_axisDataTable::Removeangle_axisRow(spin_system::angle_axisRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::angle_axisDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"angle_axisDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::axisDataTable::axisDataTable() {
    this->TableName = L"axis";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::axisDataTable::axisDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::axisDataTable::axisDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::axisDataTable::xColumn::get() {
    return this->columnx;
}

inline ::System::Data::DataColumn^  spin_system::axisDataTable::yColumn::get() {
    return this->columny;
}

inline ::System::Data::DataColumn^  spin_system::axisDataTable::zColumn::get() {
    return this->columnz;
}

inline ::System::Data::DataColumn^  spin_system::axisDataTable::angle_axis_IdColumn::get() {
    return this->columnangle_axis_Id;
}

inline ::System::Int32 spin_system::axisDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::axisRow^  spin_system::axisDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::axisRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::axisDataTable::AddaxisRow(spin_system::axisRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::axisRow^  spin_system::axisDataTable::AddaxisRow(System::Double x, System::Double y, System::Double z, 
            spin_system::angle_axisRow^  parentangle_axisRowByangle_axis_axis) {
    spin_system::axisRow^  rowaxisRow = (cli::safe_cast<spin_system::axisRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {x, y, z, nullptr};
    if (parentangle_axisRowByangle_axis_axis != nullptr) {
        columnValuesArray[3] = parentangle_axisRowByangle_axis_axis[1];
    }
    rowaxisRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowaxisRow);
    return rowaxisRow;
}

inline ::System::Collections::IEnumerator^  spin_system::axisDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::axisDataTable::Clone() {
    spin_system::axisDataTable^  cln = (cli::safe_cast<spin_system::axisDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::axisDataTable::CreateInstance() {
    return (gcnew spin_system::axisDataTable());
}

inline ::System::Void spin_system::axisDataTable::InitVars() {
    this->columnx = __super::Columns[L"x"];
    this->columny = __super::Columns[L"y"];
    this->columnz = __super::Columns[L"z"];
    this->columnangle_axis_Id = __super::Columns[L"angle_axis_Id"];
}

inline ::System::Void spin_system::axisDataTable::InitClass() {
    this->columnx = (gcnew ::System::Data::DataColumn(L"x", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnx);
    this->columny = (gcnew ::System::Data::DataColumn(L"y", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columny);
    this->columnz = (gcnew ::System::Data::DataColumn(L"z", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnz);
    this->columnangle_axis_Id = (gcnew ::System::Data::DataColumn(L"angle_axis_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnangle_axis_Id);
    this->columnx->AllowDBNull = false;
    this->columnx->Namespace = L"";
    this->columny->AllowDBNull = false;
    this->columny->Namespace = L"";
    this->columnz->AllowDBNull = false;
    this->columnz->Namespace = L"";
}

inline spin_system::axisRow^  spin_system::axisDataTable::NewaxisRow() {
    return (cli::safe_cast<spin_system::axisRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::axisDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::axisRow(builder));
}

inline ::System::Type^  spin_system::axisDataTable::GetRowType() {
    return spin_system::axisRow::typeid;
}

inline ::System::Void spin_system::axisDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->axisRowChanged(this, (gcnew spin_system::axisRowChangeEvent((cli::safe_cast<spin_system::axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axisDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->axisRowChanging(this, (gcnew spin_system::axisRowChangeEvent((cli::safe_cast<spin_system::axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axisDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->axisRowDeleted(this, (gcnew spin_system::axisRowChangeEvent((cli::safe_cast<spin_system::axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axisDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->axisRowDeleting(this, (gcnew spin_system::axisRowChangeEvent((cli::safe_cast<spin_system::axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axisDataTable::RemoveaxisRow(spin_system::axisRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::axisDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"axisDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::quaternionDataTable::quaternionDataTable() {
    this->TableName = L"quaternion";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::quaternionDataTable::quaternionDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::quaternionDataTable::quaternionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::quaternionDataTable::reColumn::get() {
    return this->columnre;
}

inline ::System::Data::DataColumn^  spin_system::quaternionDataTable::iColumn::get() {
    return this->columni;
}

inline ::System::Data::DataColumn^  spin_system::quaternionDataTable::jColumn::get() {
    return this->columnj;
}

inline ::System::Data::DataColumn^  spin_system::quaternionDataTable::kColumn::get() {
    return this->columnk;
}

inline ::System::Data::DataColumn^  spin_system::quaternionDataTable::orientation_IdColumn::get() {
    return this->columnorientation_Id;
}

inline ::System::Int32 spin_system::quaternionDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::quaternionRow^  spin_system::quaternionDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::quaternionRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::quaternionDataTable::AddquaternionRow(spin_system::quaternionRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::quaternionRow^  spin_system::quaternionDataTable::AddquaternionRow(System::Double re, System::Double i, 
            System::Double j, System::Double k, spin_system::orientationRow^  parentorientationRowByorientation_quaternion) {
    spin_system::quaternionRow^  rowquaternionRow = (cli::safe_cast<spin_system::quaternionRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {re, i, j, k, nullptr};
    if (parentorientationRowByorientation_quaternion != nullptr) {
        columnValuesArray[4] = parentorientationRowByorientation_quaternion[0];
    }
    rowquaternionRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowquaternionRow);
    return rowquaternionRow;
}

inline ::System::Collections::IEnumerator^  spin_system::quaternionDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::quaternionDataTable::Clone() {
    spin_system::quaternionDataTable^  cln = (cli::safe_cast<spin_system::quaternionDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::quaternionDataTable::CreateInstance() {
    return (gcnew spin_system::quaternionDataTable());
}

inline ::System::Void spin_system::quaternionDataTable::InitVars() {
    this->columnre = __super::Columns[L"re"];
    this->columni = __super::Columns[L"i"];
    this->columnj = __super::Columns[L"j"];
    this->columnk = __super::Columns[L"k"];
    this->columnorientation_Id = __super::Columns[L"orientation_Id"];
}

inline ::System::Void spin_system::quaternionDataTable::InitClass() {
    this->columnre = (gcnew ::System::Data::DataColumn(L"re", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnre);
    this->columni = (gcnew ::System::Data::DataColumn(L"i", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columni);
    this->columnj = (gcnew ::System::Data::DataColumn(L"j", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnj);
    this->columnk = (gcnew ::System::Data::DataColumn(L"k", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnk);
    this->columnorientation_Id = (gcnew ::System::Data::DataColumn(L"orientation_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnorientation_Id);
    this->columnre->AllowDBNull = false;
    this->columnre->Namespace = L"";
    this->columni->AllowDBNull = false;
    this->columni->Namespace = L"";
    this->columnj->AllowDBNull = false;
    this->columnj->Namespace = L"";
    this->columnk->AllowDBNull = false;
    this->columnk->Namespace = L"";
}

inline spin_system::quaternionRow^  spin_system::quaternionDataTable::NewquaternionRow() {
    return (cli::safe_cast<spin_system::quaternionRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::quaternionDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::quaternionRow(builder));
}

inline ::System::Type^  spin_system::quaternionDataTable::GetRowType() {
    return spin_system::quaternionRow::typeid;
}

inline ::System::Void spin_system::quaternionDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->quaternionRowChanged(this, (gcnew spin_system::quaternionRowChangeEvent((cli::safe_cast<spin_system::quaternionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::quaternionDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->quaternionRowChanging(this, (gcnew spin_system::quaternionRowChangeEvent((cli::safe_cast<spin_system::quaternionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::quaternionDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->quaternionRowDeleted(this, (gcnew spin_system::quaternionRowChangeEvent((cli::safe_cast<spin_system::quaternionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::quaternionDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->quaternionRowDeleting(this, (gcnew spin_system::quaternionRowChangeEvent((cli::safe_cast<spin_system::quaternionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::quaternionDataTable::RemovequaternionRow(spin_system::quaternionRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::quaternionDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"quaternionDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::dcmDataTable::dcmDataTable() {
    this->TableName = L"dcm";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::dcmDataTable::dcmDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::dcmDataTable::dcmDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::dcmDataTable::xxColumn::get() {
    return this->columnxx;
}

inline ::System::Data::DataColumn^  spin_system::dcmDataTable::xyColumn::get() {
    return this->columnxy;
}

inline ::System::Data::DataColumn^  spin_system::dcmDataTable::xzColumn::get() {
    return this->columnxz;
}

inline ::System::Data::DataColumn^  spin_system::dcmDataTable::yxColumn::get() {
    return this->columnyx;
}

inline ::System::Data::DataColumn^  spin_system::dcmDataTable::yyColumn::get() {
    return this->columnyy;
}

inline ::System::Data::DataColumn^  spin_system::dcmDataTable::yzColumn::get() {
    return this->columnyz;
}

inline ::System::Data::DataColumn^  spin_system::dcmDataTable::zxColumn::get() {
    return this->columnzx;
}

inline ::System::Data::DataColumn^  spin_system::dcmDataTable::zyColumn::get() {
    return this->columnzy;
}

inline ::System::Data::DataColumn^  spin_system::dcmDataTable::zzColumn::get() {
    return this->columnzz;
}

inline ::System::Data::DataColumn^  spin_system::dcmDataTable::orientation_IdColumn::get() {
    return this->columnorientation_Id;
}

inline ::System::Int32 spin_system::dcmDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::dcmRow^  spin_system::dcmDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::dcmRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::dcmDataTable::AdddcmRow(spin_system::dcmRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::dcmRow^  spin_system::dcmDataTable::AdddcmRow(
            System::Double xx, 
            System::Double xy, 
            System::Double xz, 
            System::Double yx, 
            System::Double yy, 
            System::Double yz, 
            System::Double zx, 
            System::Double zy, 
            System::Double zz, 
            spin_system::orientationRow^  parentorientationRowByorientation_dcm) {
    spin_system::dcmRow^  rowdcmRow = (cli::safe_cast<spin_system::dcmRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(10) {xx, xy, xz, yx, yy, yz, 
        zx, zy, zz, nullptr};
    if (parentorientationRowByorientation_dcm != nullptr) {
        columnValuesArray[9] = parentorientationRowByorientation_dcm[0];
    }
    rowdcmRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowdcmRow);
    return rowdcmRow;
}

inline ::System::Collections::IEnumerator^  spin_system::dcmDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::dcmDataTable::Clone() {
    spin_system::dcmDataTable^  cln = (cli::safe_cast<spin_system::dcmDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::dcmDataTable::CreateInstance() {
    return (gcnew spin_system::dcmDataTable());
}

inline ::System::Void spin_system::dcmDataTable::InitVars() {
    this->columnxx = __super::Columns[L"xx"];
    this->columnxy = __super::Columns[L"xy"];
    this->columnxz = __super::Columns[L"xz"];
    this->columnyx = __super::Columns[L"yx"];
    this->columnyy = __super::Columns[L"yy"];
    this->columnyz = __super::Columns[L"yz"];
    this->columnzx = __super::Columns[L"zx"];
    this->columnzy = __super::Columns[L"zy"];
    this->columnzz = __super::Columns[L"zz"];
    this->columnorientation_Id = __super::Columns[L"orientation_Id"];
}

inline ::System::Void spin_system::dcmDataTable::InitClass() {
    this->columnxx = (gcnew ::System::Data::DataColumn(L"xx", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnxx);
    this->columnxy = (gcnew ::System::Data::DataColumn(L"xy", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnxy);
    this->columnxz = (gcnew ::System::Data::DataColumn(L"xz", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnxz);
    this->columnyx = (gcnew ::System::Data::DataColumn(L"yx", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnyx);
    this->columnyy = (gcnew ::System::Data::DataColumn(L"yy", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnyy);
    this->columnyz = (gcnew ::System::Data::DataColumn(L"yz", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnyz);
    this->columnzx = (gcnew ::System::Data::DataColumn(L"zx", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnzx);
    this->columnzy = (gcnew ::System::Data::DataColumn(L"zy", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnzy);
    this->columnzz = (gcnew ::System::Data::DataColumn(L"zz", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnzz);
    this->columnorientation_Id = (gcnew ::System::Data::DataColumn(L"orientation_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnorientation_Id);
    this->columnxx->AllowDBNull = false;
    this->columnxx->Namespace = L"";
    this->columnxy->AllowDBNull = false;
    this->columnxy->Namespace = L"";
    this->columnxz->AllowDBNull = false;
    this->columnxz->Namespace = L"";
    this->columnyx->AllowDBNull = false;
    this->columnyx->Namespace = L"";
    this->columnyy->AllowDBNull = false;
    this->columnyy->Namespace = L"";
    this->columnyz->AllowDBNull = false;
    this->columnyz->Namespace = L"";
    this->columnzx->AllowDBNull = false;
    this->columnzx->Namespace = L"";
    this->columnzy->AllowDBNull = false;
    this->columnzy->Namespace = L"";
    this->columnzz->AllowDBNull = false;
    this->columnzz->Namespace = L"";
}

inline spin_system::dcmRow^  spin_system::dcmDataTable::NewdcmRow() {
    return (cli::safe_cast<spin_system::dcmRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::dcmDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::dcmRow(builder));
}

inline ::System::Type^  spin_system::dcmDataTable::GetRowType() {
    return spin_system::dcmRow::typeid;
}

inline ::System::Void spin_system::dcmDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->dcmRowChanged(this, (gcnew spin_system::dcmRowChangeEvent((cli::safe_cast<spin_system::dcmRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void spin_system::dcmDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->dcmRowChanging(this, (gcnew spin_system::dcmRowChangeEvent((cli::safe_cast<spin_system::dcmRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void spin_system::dcmDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->dcmRowDeleted(this, (gcnew spin_system::dcmRowChangeEvent((cli::safe_cast<spin_system::dcmRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void spin_system::dcmDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->dcmRowDeleting(this, (gcnew spin_system::dcmRowChangeEvent((cli::safe_cast<spin_system::dcmRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void spin_system::dcmDataTable::RemovedcmRow(spin_system::dcmRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::dcmDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"dcmDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::spinRow::spinRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablespin = (cli::safe_cast<spin_system::spinDataTable^  >(this->Table));
}

inline System::Int64 spin_system::spinRow::id::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tablespin->idColumn]));
}
inline System::Void spin_system::spinRow::id::set(System::Int64 value) {
    this[this->tablespin->idColumn] = value;
}

inline System::String^  spin_system::spinRow::isotope::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablespin->isotopeColumn]));
}
inline System::Void spin_system::spinRow::isotope::set(System::String^  value) {
    this[this->tablespin->isotopeColumn] = value;
}

inline System::String^  spin_system::spinRow::label::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tablespin->labelColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'label\' in table \'spin\' is DBNull.", e));
    }
}
inline System::Void spin_system::spinRow::label::set(System::String^  value) {
    this[this->tablespin->labelColumn] = value;
}

inline System::Int32 spin_system::spinRow::spin_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablespin->spin_IdColumn]));
}
inline System::Void spin_system::spinRow::spin_Id::set(System::Int32 value) {
    this[this->tablespin->spin_IdColumn] = value;
}

inline ::System::Boolean spin_system::spinRow::IslabelNull() {
    return this->IsNull(this->tablespin->labelColumn);
}

inline ::System::Void spin_system::spinRow::SetlabelNull() {
    this[this->tablespin->labelColumn] = ::System::Convert::DBNull;
}

inline cli::array< spin_system::coordinatesRow^  >^  spin_system::spinRow::GetcoordinatesRows() {
    if (this->Table->ChildRelations[L"spin_coordinates"] == nullptr) {
        return gcnew cli::array< spin_system::coordinatesRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::coordinatesRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"spin_coordinates"])));
    }
}


inline spin_system::coordinatesRow::coordinatesRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablecoordinates = (cli::safe_cast<spin_system::coordinatesDataTable^  >(this->Table));
}

inline System::Double spin_system::coordinatesRow::x::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablecoordinates->xColumn]));
}
inline System::Void spin_system::coordinatesRow::x::set(System::Double value) {
    this[this->tablecoordinates->xColumn] = value;
}

inline System::Double spin_system::coordinatesRow::y::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablecoordinates->yColumn]));
}
inline System::Void spin_system::coordinatesRow::y::set(System::Double value) {
    this[this->tablecoordinates->yColumn] = value;
}

inline System::Double spin_system::coordinatesRow::z::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablecoordinates->zColumn]));
}
inline System::Void spin_system::coordinatesRow::z::set(System::Double value) {
    this[this->tablecoordinates->zColumn] = value;
}

inline System::Int32 spin_system::coordinatesRow::spin_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecoordinates->spin_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'spin_Id\' in table \'coordinates\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::coordinatesRow::spin_Id::set(System::Int32 value) {
    this[this->tablecoordinates->spin_IdColumn] = value;
}

inline spin_system::spinRow^  spin_system::coordinatesRow::spinRow::get() {
    return (cli::safe_cast<spin_system::spinRow^  >(this->GetParentRow(this->Table->ParentRelations[L"spin_coordinates"])));
}
inline System::Void spin_system::coordinatesRow::spinRow::set(spin_system::spinRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"spin_coordinates"]);
}

inline ::System::Boolean spin_system::coordinatesRow::Isspin_IdNull() {
    return this->IsNull(this->tablecoordinates->spin_IdColumn);
}

inline ::System::Void spin_system::coordinatesRow::Setspin_IdNull() {
    this[this->tablecoordinates->spin_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::interactionRow::interactionRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableinteraction = (cli::safe_cast<spin_system::interactionDataTable^  >(this->Table));
}

inline System::String^  spin_system::interactionRow::kind::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableinteraction->kindColumn]));
}
inline System::Void spin_system::interactionRow::kind::set(System::String^  value) {
    this[this->tableinteraction->kindColumn] = value;
}

inline System::Int64 spin_system::interactionRow::id::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableinteraction->idColumn]));
}
inline System::Void spin_system::interactionRow::id::set(System::Int64 value) {
    this[this->tableinteraction->idColumn] = value;
}

inline System::String^  spin_system::interactionRow::units::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableinteraction->unitsColumn]));
}
inline System::Void spin_system::interactionRow::units::set(System::String^  value) {
    this[this->tableinteraction->unitsColumn] = value;
}

inline System::Int64 spin_system::interactionRow::spin_a::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableinteraction->spin_aColumn]));
}
inline System::Void spin_system::interactionRow::spin_a::set(System::Int64 value) {
    this[this->tableinteraction->spin_aColumn] = value;
}

inline System::Int64 spin_system::interactionRow::spin_b::get() {
    try {
        return (cli::safe_cast<::System::Int64 >(this[this->tableinteraction->spin_bColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'spin_b\' in table \'interaction\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::interactionRow::spin_b::set(System::Int64 value) {
    this[this->tableinteraction->spin_bColumn] = value;
}

inline System::Int64 spin_system::interactionRow::reference_frame_id::get() {
    try {
        return (cli::safe_cast<::System::Int64 >(this[this->tableinteraction->reference_frame_idColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'reference_frame_id\' in table \'interaction\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::interactionRow::reference_frame_id::set(System::Int64 value) {
    this[this->tableinteraction->reference_frame_idColumn] = value;
}

inline System::String^  spin_system::interactionRow::reference::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableinteraction->referenceColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'reference\' in table \'interaction\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::interactionRow::reference::set(System::String^  value) {
    this[this->tableinteraction->referenceColumn] = value;
}

inline System::String^  spin_system::interactionRow::label::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableinteraction->labelColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'label\' in table \'interaction\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::interactionRow::label::set(System::String^  value) {
    this[this->tableinteraction->labelColumn] = value;
}

inline System::Double spin_system::interactionRow::scalar::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableinteraction->scalarColumn]));
}
inline System::Void spin_system::interactionRow::scalar::set(System::Double value) {
    this[this->tableinteraction->scalarColumn] = value;
}

inline System::Int32 spin_system::interactionRow::interaction_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableinteraction->interaction_IdColumn]));
}
inline System::Void spin_system::interactionRow::interaction_Id::set(System::Int32 value) {
    this[this->tableinteraction->interaction_IdColumn] = value;
}

inline ::System::Boolean spin_system::interactionRow::Isspin_bNull() {
    return this->IsNull(this->tableinteraction->spin_bColumn);
}

inline ::System::Void spin_system::interactionRow::Setspin_bNull() {
    this[this->tableinteraction->spin_bColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean spin_system::interactionRow::Isreference_frame_idNull() {
    return this->IsNull(this->tableinteraction->reference_frame_idColumn);
}

inline ::System::Void spin_system::interactionRow::Setreference_frame_idNull() {
    this[this->tableinteraction->reference_frame_idColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean spin_system::interactionRow::IsreferenceNull() {
    return this->IsNull(this->tableinteraction->referenceColumn);
}

inline ::System::Void spin_system::interactionRow::SetreferenceNull() {
    this[this->tableinteraction->referenceColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean spin_system::interactionRow::IsscalarNull() {
    return this->IsNull(this->tableinteraction->scalarColumn);
}

inline ::System::Void spin_system::interactionRow::SetscalarNull() {
    this[this->tableinteraction->scalarColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean spin_system::interactionRow::IslabelNull() {
    return this->IsNull(this->tableinteraction->labelColumn);
}

inline ::System::Void spin_system::interactionRow::SetlabelNull() {
    this[this->tableinteraction->labelColumn] = ::System::Convert::DBNull;
}

inline cli::array< spin_system::tensorRow^  >^  spin_system::interactionRow::GettensorRows() {
    if (this->Table->ChildRelations[L"interaction_tensor"] == nullptr) {
        return gcnew cli::array< spin_system::tensorRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::tensorRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"interaction_tensor"])));
    }
}

inline cli::array< spin_system::eigenvaluesRow^  >^  spin_system::interactionRow::GeteigenvaluesRows() {
    if (this->Table->ChildRelations[L"interaction_eigenvalues"] == nullptr) {
        return gcnew cli::array< spin_system::eigenvaluesRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::eigenvaluesRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"interaction_eigenvalues"])));
    }
}

inline cli::array< spin_system::axiality_rhombicityRow^  >^  spin_system::interactionRow::Getaxiality_rhombicityRows() {
    if (this->Table->ChildRelations[L"interaction_axiality_rhombicity"] == nullptr) {
        return gcnew cli::array< spin_system::axiality_rhombicityRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::axiality_rhombicityRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"interaction_axiality_rhombicity"])));
    }
}

inline cli::array< spin_system::span_skewRow^  >^  spin_system::interactionRow::Getspan_skewRows() {
    if (this->Table->ChildRelations[L"interaction_span_skew"] == nullptr) {
        return gcnew cli::array< spin_system::span_skewRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::span_skewRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"interaction_span_skew"])));
    }
}

inline cli::array< spin_system::aniso_asymmRow^  >^  spin_system::interactionRow::Getaniso_asymmRows() {
    if (this->Table->ChildRelations[L"interaction_aniso_asymm"] == nullptr) {
        return gcnew cli::array< spin_system::aniso_asymmRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::aniso_asymmRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"interaction_aniso_asymm"])));
    }
}

inline cli::array< spin_system::orientationRow^  >^  spin_system::interactionRow::GetorientationRows() {
    if (this->Table->ChildRelations[L"interaction_orientation"] == nullptr) {
        return gcnew cli::array< spin_system::orientationRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::orientationRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"interaction_orientation"])));
    }
}


inline spin_system::tensorRow::tensorRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tabletensor = (cli::safe_cast<spin_system::tensorDataTable^  >(this->Table));
}

inline System::Double spin_system::tensorRow::xx::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->xxColumn]));
}
inline System::Void spin_system::tensorRow::xx::set(System::Double value) {
    this[this->tabletensor->xxColumn] = value;
}

inline System::Double spin_system::tensorRow::xy::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->xyColumn]));
}
inline System::Void spin_system::tensorRow::xy::set(System::Double value) {
    this[this->tabletensor->xyColumn] = value;
}

inline System::Double spin_system::tensorRow::xz::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->xzColumn]));
}
inline System::Void spin_system::tensorRow::xz::set(System::Double value) {
    this[this->tabletensor->xzColumn] = value;
}

inline System::Double spin_system::tensorRow::yx::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->yxColumn]));
}
inline System::Void spin_system::tensorRow::yx::set(System::Double value) {
    this[this->tabletensor->yxColumn] = value;
}

inline System::Double spin_system::tensorRow::yy::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->yyColumn]));
}
inline System::Void spin_system::tensorRow::yy::set(System::Double value) {
    this[this->tabletensor->yyColumn] = value;
}

inline System::Double spin_system::tensorRow::yz::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->yzColumn]));
}
inline System::Void spin_system::tensorRow::yz::set(System::Double value) {
    this[this->tabletensor->yzColumn] = value;
}

inline System::Double spin_system::tensorRow::zx::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->zxColumn]));
}
inline System::Void spin_system::tensorRow::zx::set(System::Double value) {
    this[this->tabletensor->zxColumn] = value;
}

inline System::Double spin_system::tensorRow::zy::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->zyColumn]));
}
inline System::Void spin_system::tensorRow::zy::set(System::Double value) {
    this[this->tabletensor->zyColumn] = value;
}

inline System::Double spin_system::tensorRow::zz::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->zzColumn]));
}
inline System::Void spin_system::tensorRow::zz::set(System::Double value) {
    this[this->tabletensor->zzColumn] = value;
}

inline System::Int32 spin_system::tensorRow::interaction_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tabletensor->interaction_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'interaction_Id\' in table \'tensor\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::tensorRow::interaction_Id::set(System::Int32 value) {
    this[this->tabletensor->interaction_IdColumn] = value;
}

inline spin_system::interactionRow^  spin_system::tensorRow::interactionRow::get() {
    return (cli::safe_cast<spin_system::interactionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"interaction_tensor"])));
}
inline System::Void spin_system::tensorRow::interactionRow::set(spin_system::interactionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"interaction_tensor"]);
}

inline ::System::Boolean spin_system::tensorRow::Isinteraction_IdNull() {
    return this->IsNull(this->tabletensor->interaction_IdColumn);
}

inline ::System::Void spin_system::tensorRow::Setinteraction_IdNull() {
    this[this->tabletensor->interaction_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::eigenvaluesRow::eigenvaluesRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableeigenvalues = (cli::safe_cast<spin_system::eigenvaluesDataTable^  >(this->Table));
}

inline System::Double spin_system::eigenvaluesRow::xx::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableeigenvalues->xxColumn]));
}
inline System::Void spin_system::eigenvaluesRow::xx::set(System::Double value) {
    this[this->tableeigenvalues->xxColumn] = value;
}

inline System::Double spin_system::eigenvaluesRow::yy::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableeigenvalues->yyColumn]));
}
inline System::Void spin_system::eigenvaluesRow::yy::set(System::Double value) {
    this[this->tableeigenvalues->yyColumn] = value;
}

inline System::Double spin_system::eigenvaluesRow::zz::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableeigenvalues->zzColumn]));
}
inline System::Void spin_system::eigenvaluesRow::zz::set(System::Double value) {
    this[this->tableeigenvalues->zzColumn] = value;
}

inline System::Int32 spin_system::eigenvaluesRow::interaction_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableeigenvalues->interaction_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'interaction_Id\' in table \'eigenvalues\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::eigenvaluesRow::interaction_Id::set(System::Int32 value) {
    this[this->tableeigenvalues->interaction_IdColumn] = value;
}

inline spin_system::interactionRow^  spin_system::eigenvaluesRow::interactionRow::get() {
    return (cli::safe_cast<spin_system::interactionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"interaction_eigenvalues"])));
}
inline System::Void spin_system::eigenvaluesRow::interactionRow::set(spin_system::interactionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"interaction_eigenvalues"]);
}

inline ::System::Boolean spin_system::eigenvaluesRow::Isinteraction_IdNull() {
    return this->IsNull(this->tableeigenvalues->interaction_IdColumn);
}

inline ::System::Void spin_system::eigenvaluesRow::Setinteraction_IdNull() {
    this[this->tableeigenvalues->interaction_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::axiality_rhombicityRow::axiality_rhombicityRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableaxiality_rhombicity = (cli::safe_cast<spin_system::axiality_rhombicityDataTable^  >(this->Table));
}

inline System::Double spin_system::axiality_rhombicityRow::iso::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaxiality_rhombicity->isoColumn]));
}
inline System::Void spin_system::axiality_rhombicityRow::iso::set(System::Double value) {
    this[this->tableaxiality_rhombicity->isoColumn] = value;
}

inline System::Double spin_system::axiality_rhombicityRow::ax::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaxiality_rhombicity->axColumn]));
}
inline System::Void spin_system::axiality_rhombicityRow::ax::set(System::Double value) {
    this[this->tableaxiality_rhombicity->axColumn] = value;
}

inline System::Double spin_system::axiality_rhombicityRow::rh::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaxiality_rhombicity->rhColumn]));
}
inline System::Void spin_system::axiality_rhombicityRow::rh::set(System::Double value) {
    this[this->tableaxiality_rhombicity->rhColumn] = value;
}

inline System::Int32 spin_system::axiality_rhombicityRow::interaction_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableaxiality_rhombicity->interaction_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'interaction_Id\' in table \'axiality_rhombicity\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::axiality_rhombicityRow::interaction_Id::set(System::Int32 value) {
    this[this->tableaxiality_rhombicity->interaction_IdColumn] = value;
}

inline spin_system::interactionRow^  spin_system::axiality_rhombicityRow::interactionRow::get() {
    return (cli::safe_cast<spin_system::interactionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"interaction_axiality_rhombicity"])));
}
inline System::Void spin_system::axiality_rhombicityRow::interactionRow::set(spin_system::interactionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"interaction_axiality_rhombicity"]);
}

inline ::System::Boolean spin_system::axiality_rhombicityRow::Isinteraction_IdNull() {
    return this->IsNull(this->tableaxiality_rhombicity->interaction_IdColumn);
}

inline ::System::Void spin_system::axiality_rhombicityRow::Setinteraction_IdNull() {
    this[this->tableaxiality_rhombicity->interaction_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::span_skewRow::span_skewRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablespan_skew = (cli::safe_cast<spin_system::span_skewDataTable^  >(this->Table));
}

inline System::Double spin_system::span_skewRow::iso::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablespan_skew->isoColumn]));
}
inline System::Void spin_system::span_skewRow::iso::set(System::Double value) {
    this[this->tablespan_skew->isoColumn] = value;
}

inline System::Double spin_system::span_skewRow::span::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablespan_skew->spanColumn]));
}
inline System::Void spin_system::span_skewRow::span::set(System::Double value) {
    this[this->tablespan_skew->spanColumn] = value;
}

inline System::Double spin_system::span_skewRow::skew::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablespan_skew->skewColumn]));
}
inline System::Void spin_system::span_skewRow::skew::set(System::Double value) {
    this[this->tablespan_skew->skewColumn] = value;
}

inline System::Int32 spin_system::span_skewRow::interaction_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablespan_skew->interaction_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'interaction_Id\' in table \'span_skew\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::span_skewRow::interaction_Id::set(System::Int32 value) {
    this[this->tablespan_skew->interaction_IdColumn] = value;
}

inline spin_system::interactionRow^  spin_system::span_skewRow::interactionRow::get() {
    return (cli::safe_cast<spin_system::interactionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"interaction_span_skew"])));
}
inline System::Void spin_system::span_skewRow::interactionRow::set(spin_system::interactionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"interaction_span_skew"]);
}

inline ::System::Boolean spin_system::span_skewRow::Isinteraction_IdNull() {
    return this->IsNull(this->tablespan_skew->interaction_IdColumn);
}

inline ::System::Void spin_system::span_skewRow::Setinteraction_IdNull() {
    this[this->tablespan_skew->interaction_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::aniso_asymmRow::aniso_asymmRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableaniso_asymm = (cli::safe_cast<spin_system::aniso_asymmDataTable^  >(this->Table));
}

inline System::Double spin_system::aniso_asymmRow::iso::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaniso_asymm->isoColumn]));
}
inline System::Void spin_system::aniso_asymmRow::iso::set(System::Double value) {
    this[this->tableaniso_asymm->isoColumn] = value;
}

inline System::Double spin_system::aniso_asymmRow::aniso::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaniso_asymm->anisoColumn]));
}
inline System::Void spin_system::aniso_asymmRow::aniso::set(System::Double value) {
    this[this->tableaniso_asymm->anisoColumn] = value;
}

inline System::Double spin_system::aniso_asymmRow::asymm::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaniso_asymm->asymmColumn]));
}
inline System::Void spin_system::aniso_asymmRow::asymm::set(System::Double value) {
    this[this->tableaniso_asymm->asymmColumn] = value;
}

inline System::Int32 spin_system::aniso_asymmRow::interaction_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableaniso_asymm->interaction_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'interaction_Id\' in table \'aniso_asymm\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::aniso_asymmRow::interaction_Id::set(System::Int32 value) {
    this[this->tableaniso_asymm->interaction_IdColumn] = value;
}

inline spin_system::interactionRow^  spin_system::aniso_asymmRow::interactionRow::get() {
    return (cli::safe_cast<spin_system::interactionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"interaction_aniso_asymm"])));
}
inline System::Void spin_system::aniso_asymmRow::interactionRow::set(spin_system::interactionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"interaction_aniso_asymm"]);
}

inline ::System::Boolean spin_system::aniso_asymmRow::Isinteraction_IdNull() {
    return this->IsNull(this->tableaniso_asymm->interaction_IdColumn);
}

inline ::System::Void spin_system::aniso_asymmRow::Setinteraction_IdNull() {
    this[this->tableaniso_asymm->interaction_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::orientationRow::orientationRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableorientation = (cli::safe_cast<spin_system::orientationDataTable^  >(this->Table));
}

inline System::Int32 spin_system::orientationRow::orientation_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableorientation->orientation_IdColumn]));
}
inline System::Void spin_system::orientationRow::orientation_Id::set(System::Int32 value) {
    this[this->tableorientation->orientation_IdColumn] = value;
}

inline System::Int32 spin_system::orientationRow::interaction_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableorientation->interaction_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'interaction_Id\' in table \'orientation\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::orientationRow::interaction_Id::set(System::Int32 value) {
    this[this->tableorientation->interaction_IdColumn] = value;
}

inline spin_system::interactionRow^  spin_system::orientationRow::interactionRow::get() {
    return (cli::safe_cast<spin_system::interactionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"interaction_orientation"])));
}
inline System::Void spin_system::orientationRow::interactionRow::set(spin_system::interactionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"interaction_orientation"]);
}

inline ::System::Boolean spin_system::orientationRow::Isinteraction_IdNull() {
    return this->IsNull(this->tableorientation->interaction_IdColumn);
}

inline ::System::Void spin_system::orientationRow::Setinteraction_IdNull() {
    this[this->tableorientation->interaction_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< spin_system::euler_anglesRow^  >^  spin_system::orientationRow::Geteuler_anglesRows() {
    if (this->Table->ChildRelations[L"orientation_euler_angles"] == nullptr) {
        return gcnew cli::array< spin_system::euler_anglesRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::euler_anglesRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"orientation_euler_angles"])));
    }
}

inline cli::array< spin_system::angle_axisRow^  >^  spin_system::orientationRow::Getangle_axisRows() {
    if (this->Table->ChildRelations[L"orientation_angle_axis"] == nullptr) {
        return gcnew cli::array< spin_system::angle_axisRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::angle_axisRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"orientation_angle_axis"])));
    }
}

inline cli::array< spin_system::quaternionRow^  >^  spin_system::orientationRow::GetquaternionRows() {
    if (this->Table->ChildRelations[L"orientation_quaternion"] == nullptr) {
        return gcnew cli::array< spin_system::quaternionRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::quaternionRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"orientation_quaternion"])));
    }
}

inline cli::array< spin_system::dcmRow^  >^  spin_system::orientationRow::GetdcmRows() {
    if (this->Table->ChildRelations[L"orientation_dcm"] == nullptr) {
        return gcnew cli::array< spin_system::dcmRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::dcmRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"orientation_dcm"])));
    }
}


inline spin_system::euler_anglesRow::euler_anglesRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableeuler_angles = (cli::safe_cast<spin_system::euler_anglesDataTable^  >(this->Table));
}

inline System::Double spin_system::euler_anglesRow::alpha::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableeuler_angles->alphaColumn]));
}
inline System::Void spin_system::euler_anglesRow::alpha::set(System::Double value) {
    this[this->tableeuler_angles->alphaColumn] = value;
}

inline System::Double spin_system::euler_anglesRow::beta::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableeuler_angles->betaColumn]));
}
inline System::Void spin_system::euler_anglesRow::beta::set(System::Double value) {
    this[this->tableeuler_angles->betaColumn] = value;
}

inline System::Double spin_system::euler_anglesRow::gamma::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableeuler_angles->gammaColumn]));
}
inline System::Void spin_system::euler_anglesRow::gamma::set(System::Double value) {
    this[this->tableeuler_angles->gammaColumn] = value;
}

inline System::Int32 spin_system::euler_anglesRow::orientation_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableeuler_angles->orientation_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'orientation_Id\' in table \'euler_angles\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::euler_anglesRow::orientation_Id::set(System::Int32 value) {
    this[this->tableeuler_angles->orientation_IdColumn] = value;
}

inline spin_system::orientationRow^  spin_system::euler_anglesRow::orientationRow::get() {
    return (cli::safe_cast<spin_system::orientationRow^  >(this->GetParentRow(this->Table->ParentRelations[L"orientation_euler_angles"])));
}
inline System::Void spin_system::euler_anglesRow::orientationRow::set(spin_system::orientationRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"orientation_euler_angles"]);
}

inline ::System::Boolean spin_system::euler_anglesRow::Isorientation_IdNull() {
    return this->IsNull(this->tableeuler_angles->orientation_IdColumn);
}

inline ::System::Void spin_system::euler_anglesRow::Setorientation_IdNull() {
    this[this->tableeuler_angles->orientation_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::angle_axisRow::angle_axisRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableangle_axis = (cli::safe_cast<spin_system::angle_axisDataTable^  >(this->Table));
}

inline System::Double spin_system::angle_axisRow::angle::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableangle_axis->angleColumn]));
}
inline System::Void spin_system::angle_axisRow::angle::set(System::Double value) {
    this[this->tableangle_axis->angleColumn] = value;
}

inline System::Int32 spin_system::angle_axisRow::angle_axis_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableangle_axis->angle_axis_IdColumn]));
}
inline System::Void spin_system::angle_axisRow::angle_axis_Id::set(System::Int32 value) {
    this[this->tableangle_axis->angle_axis_IdColumn] = value;
}

inline System::Int32 spin_system::angle_axisRow::orientation_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableangle_axis->orientation_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'orientation_Id\' in table \'angle_axis\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::angle_axisRow::orientation_Id::set(System::Int32 value) {
    this[this->tableangle_axis->orientation_IdColumn] = value;
}

inline spin_system::orientationRow^  spin_system::angle_axisRow::orientationRow::get() {
    return (cli::safe_cast<spin_system::orientationRow^  >(this->GetParentRow(this->Table->ParentRelations[L"orientation_angle_axis"])));
}
inline System::Void spin_system::angle_axisRow::orientationRow::set(spin_system::orientationRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"orientation_angle_axis"]);
}

inline ::System::Boolean spin_system::angle_axisRow::Isorientation_IdNull() {
    return this->IsNull(this->tableangle_axis->orientation_IdColumn);
}

inline ::System::Void spin_system::angle_axisRow::Setorientation_IdNull() {
    this[this->tableangle_axis->orientation_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< spin_system::axisRow^  >^  spin_system::angle_axisRow::GetaxisRows() {
    if (this->Table->ChildRelations[L"angle_axis_axis"] == nullptr) {
        return gcnew cli::array< spin_system::axisRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::axisRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"angle_axis_axis"])));
    }
}


inline spin_system::axisRow::axisRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableaxis = (cli::safe_cast<spin_system::axisDataTable^  >(this->Table));
}

inline System::Double spin_system::axisRow::x::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaxis->xColumn]));
}
inline System::Void spin_system::axisRow::x::set(System::Double value) {
    this[this->tableaxis->xColumn] = value;
}

inline System::Double spin_system::axisRow::y::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaxis->yColumn]));
}
inline System::Void spin_system::axisRow::y::set(System::Double value) {
    this[this->tableaxis->yColumn] = value;
}

inline System::Double spin_system::axisRow::z::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaxis->zColumn]));
}
inline System::Void spin_system::axisRow::z::set(System::Double value) {
    this[this->tableaxis->zColumn] = value;
}

inline System::Int32 spin_system::axisRow::angle_axis_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableaxis->angle_axis_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'angle_axis_Id\' in table \'axis\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::axisRow::angle_axis_Id::set(System::Int32 value) {
    this[this->tableaxis->angle_axis_IdColumn] = value;
}

inline spin_system::angle_axisRow^  spin_system::axisRow::angle_axisRow::get() {
    return (cli::safe_cast<spin_system::angle_axisRow^  >(this->GetParentRow(this->Table->ParentRelations[L"angle_axis_axis"])));
}
inline System::Void spin_system::axisRow::angle_axisRow::set(spin_system::angle_axisRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"angle_axis_axis"]);
}

inline ::System::Boolean spin_system::axisRow::Isangle_axis_IdNull() {
    return this->IsNull(this->tableaxis->angle_axis_IdColumn);
}

inline ::System::Void spin_system::axisRow::Setangle_axis_IdNull() {
    this[this->tableaxis->angle_axis_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::quaternionRow::quaternionRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablequaternion = (cli::safe_cast<spin_system::quaternionDataTable^  >(this->Table));
}

inline System::Double spin_system::quaternionRow::re::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablequaternion->reColumn]));
}
inline System::Void spin_system::quaternionRow::re::set(System::Double value) {
    this[this->tablequaternion->reColumn] = value;
}

inline System::Double spin_system::quaternionRow::i::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablequaternion->iColumn]));
}
inline System::Void spin_system::quaternionRow::i::set(System::Double value) {
    this[this->tablequaternion->iColumn] = value;
}

inline System::Double spin_system::quaternionRow::j::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablequaternion->jColumn]));
}
inline System::Void spin_system::quaternionRow::j::set(System::Double value) {
    this[this->tablequaternion->jColumn] = value;
}

inline System::Double spin_system::quaternionRow::k::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablequaternion->kColumn]));
}
inline System::Void spin_system::quaternionRow::k::set(System::Double value) {
    this[this->tablequaternion->kColumn] = value;
}

inline System::Int32 spin_system::quaternionRow::orientation_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablequaternion->orientation_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'orientation_Id\' in table \'quaternion\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::quaternionRow::orientation_Id::set(System::Int32 value) {
    this[this->tablequaternion->orientation_IdColumn] = value;
}

inline spin_system::orientationRow^  spin_system::quaternionRow::orientationRow::get() {
    return (cli::safe_cast<spin_system::orientationRow^  >(this->GetParentRow(this->Table->ParentRelations[L"orientation_quaternion"])));
}
inline System::Void spin_system::quaternionRow::orientationRow::set(spin_system::orientationRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"orientation_quaternion"]);
}

inline ::System::Boolean spin_system::quaternionRow::Isorientation_IdNull() {
    return this->IsNull(this->tablequaternion->orientation_IdColumn);
}

inline ::System::Void spin_system::quaternionRow::Setorientation_IdNull() {
    this[this->tablequaternion->orientation_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::dcmRow::dcmRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tabledcm = (cli::safe_cast<spin_system::dcmDataTable^  >(this->Table));
}

inline System::Double spin_system::dcmRow::xx::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->xxColumn]));
}
inline System::Void spin_system::dcmRow::xx::set(System::Double value) {
    this[this->tabledcm->xxColumn] = value;
}

inline System::Double spin_system::dcmRow::xy::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->xyColumn]));
}
inline System::Void spin_system::dcmRow::xy::set(System::Double value) {
    this[this->tabledcm->xyColumn] = value;
}

inline System::Double spin_system::dcmRow::xz::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->xzColumn]));
}
inline System::Void spin_system::dcmRow::xz::set(System::Double value) {
    this[this->tabledcm->xzColumn] = value;
}

inline System::Double spin_system::dcmRow::yx::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->yxColumn]));
}
inline System::Void spin_system::dcmRow::yx::set(System::Double value) {
    this[this->tabledcm->yxColumn] = value;
}

inline System::Double spin_system::dcmRow::yy::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->yyColumn]));
}
inline System::Void spin_system::dcmRow::yy::set(System::Double value) {
    this[this->tabledcm->yyColumn] = value;
}

inline System::Double spin_system::dcmRow::yz::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->yzColumn]));
}
inline System::Void spin_system::dcmRow::yz::set(System::Double value) {
    this[this->tabledcm->yzColumn] = value;
}

inline System::Double spin_system::dcmRow::zx::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->zxColumn]));
}
inline System::Void spin_system::dcmRow::zx::set(System::Double value) {
    this[this->tabledcm->zxColumn] = value;
}

inline System::Double spin_system::dcmRow::zy::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->zyColumn]));
}
inline System::Void spin_system::dcmRow::zy::set(System::Double value) {
    this[this->tabledcm->zyColumn] = value;
}

inline System::Double spin_system::dcmRow::zz::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabledcm->zzColumn]));
}
inline System::Void spin_system::dcmRow::zz::set(System::Double value) {
    this[this->tabledcm->zzColumn] = value;
}

inline System::Int32 spin_system::dcmRow::orientation_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tabledcm->orientation_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'orientation_Id\' in table \'dcm\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::dcmRow::orientation_Id::set(System::Int32 value) {
    this[this->tabledcm->orientation_IdColumn] = value;
}

inline spin_system::orientationRow^  spin_system::dcmRow::orientationRow::get() {
    return (cli::safe_cast<spin_system::orientationRow^  >(this->GetParentRow(this->Table->ParentRelations[L"orientation_dcm"])));
}
inline System::Void spin_system::dcmRow::orientationRow::set(spin_system::orientationRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"orientation_dcm"]);
}

inline ::System::Boolean spin_system::dcmRow::Isorientation_IdNull() {
    return this->IsNull(this->tabledcm->orientation_IdColumn);
}

inline ::System::Void spin_system::dcmRow::Setorientation_IdNull() {
    this[this->tabledcm->orientation_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::spinRowChangeEvent::spinRowChangeEvent(spin_system::spinRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::spinRow^  spin_system::spinRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::spinRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::coordinatesRowChangeEvent::coordinatesRowChangeEvent(spin_system::coordinatesRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::coordinatesRow^  spin_system::coordinatesRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::coordinatesRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::interactionRowChangeEvent::interactionRowChangeEvent(spin_system::interactionRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::interactionRow^  spin_system::interactionRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::interactionRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::tensorRowChangeEvent::tensorRowChangeEvent(spin_system::tensorRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::tensorRow^  spin_system::tensorRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::tensorRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::eigenvaluesRowChangeEvent::eigenvaluesRowChangeEvent(spin_system::eigenvaluesRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::eigenvaluesRow^  spin_system::eigenvaluesRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::eigenvaluesRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::axiality_rhombicityRowChangeEvent::axiality_rhombicityRowChangeEvent(spin_system::axiality_rhombicityRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::axiality_rhombicityRow^  spin_system::axiality_rhombicityRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::axiality_rhombicityRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::span_skewRowChangeEvent::span_skewRowChangeEvent(spin_system::span_skewRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::span_skewRow^  spin_system::span_skewRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::span_skewRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::aniso_asymmRowChangeEvent::aniso_asymmRowChangeEvent(spin_system::aniso_asymmRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::aniso_asymmRow^  spin_system::aniso_asymmRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::aniso_asymmRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::orientationRowChangeEvent::orientationRowChangeEvent(spin_system::orientationRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::orientationRow^  spin_system::orientationRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::orientationRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::euler_anglesRowChangeEvent::euler_anglesRowChangeEvent(spin_system::euler_anglesRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::euler_anglesRow^  spin_system::euler_anglesRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::euler_anglesRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::angle_axisRowChangeEvent::angle_axisRowChangeEvent(spin_system::angle_axisRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::angle_axisRow^  spin_system::angle_axisRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::angle_axisRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::axisRowChangeEvent::axisRowChangeEvent(spin_system::axisRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::axisRow^  spin_system::axisRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::axisRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::quaternionRowChangeEvent::quaternionRowChangeEvent(spin_system::quaternionRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::quaternionRow^  spin_system::quaternionRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::quaternionRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::dcmRowChangeEvent::dcmRowChangeEvent(spin_system::dcmRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::dcmRow^  spin_system::dcmRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::dcmRowChangeEvent::Action::get() {
    return this->eventAction;
}
