#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.0.30319.1.
// 
using namespace System;
ref class spin_system;


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[System::Serializable, 
System::ComponentModel::DesignerCategoryAttribute(L"code"), 
System::ComponentModel::ToolboxItem(true), 
System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
System::Xml::Serialization::XmlRootAttribute(L"spin_system"), 
System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
public ref class spin_system : public ::System::Data::DataSet {
    public : ref class spinDataTable;
    public : ref class coordinatesDataTable;
    public : ref class spin_interactionDataTable;
    public : ref class tensorDataTable;
    public : ref class eigenvaluesDataTable;
    public : ref class axiality_rhombicityDataTable;
    public : ref class span_skewDataTable;
    public : ref class inter_orientationDataTable;
    public : ref class axisDataTable;
    public : ref class spin_reference_frameDataTable;
    public : ref class ref_orientationDataTable;
    public : ref class spinRow;
    public : ref class coordinatesRow;
    public : ref class spin_interactionRow;
    public : ref class tensorRow;
    public : ref class eigenvaluesRow;
    public : ref class axiality_rhombicityRow;
    public : ref class span_skewRow;
    public : ref class inter_orientationRow;
    public : ref class axisRow;
    public : ref class spin_reference_frameRow;
    public : ref class ref_orientationRow;
    public : ref class spinRowChangeEvent;
    public : ref class coordinatesRowChangeEvent;
    public : ref class spin_interactionRowChangeEvent;
    public : ref class tensorRowChangeEvent;
    public : ref class eigenvaluesRowChangeEvent;
    public : ref class axiality_rhombicityRowChangeEvent;
    public : ref class span_skewRowChangeEvent;
    public : ref class inter_orientationRowChangeEvent;
    public : ref class axisRowChangeEvent;
    public : ref class spin_reference_frameRowChangeEvent;
    public : ref class ref_orientationRowChangeEvent;
    
    private: spin_system::spinDataTable^  tablespin;
    
    private: spin_system::coordinatesDataTable^  tablecoordinates;
    
    private: spin_system::spin_interactionDataTable^  tablespin_interaction;
    
    private: spin_system::tensorDataTable^  tabletensor;
    
    private: spin_system::eigenvaluesDataTable^  tableeigenvalues;
    
    private: spin_system::axiality_rhombicityDataTable^  tableaxiality_rhombicity;
    
    private: spin_system::span_skewDataTable^  tablespan_skew;
    
    private: spin_system::inter_orientationDataTable^  tableinter_orientation;
    
    private: spin_system::axisDataTable^  tableaxis;
    
    private: spin_system::spin_reference_frameDataTable^  tablespin_reference_frame;
    
    private: spin_system::ref_orientationDataTable^  tableref_orientation;
    
    private: ::System::Data::DataRelation^  relationspin_coordinates;
    
    private: ::System::Data::DataRelation^  relationspin_interaction_tensor;
    
    private: ::System::Data::DataRelation^  relationspin_interaction_eigenvalues;
    
    private: ::System::Data::DataRelation^  relationspin_interaction_axiality_rhombicity;
    
    private: ::System::Data::DataRelation^  relationspin_interaction_span_skew;
    
    private: ::System::Data::DataRelation^  relationspin_interaction_inter_orientation;
    
    private: ::System::Data::DataRelation^  relationinter_orientation_axis;
    
    private: ::System::Data::DataRelation^  relationref_orientation_axis;
    
    private: ::System::Data::DataRelation^  relationspin_reference_frame_ref_orientation;
    
    private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void spinRowChangeEventHandler(::System::Object^  sender, spin_system::spinRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void coordinatesRowChangeEventHandler(::System::Object^  sender, spin_system::coordinatesRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void spin_interactionRowChangeEventHandler(::System::Object^  sender, spin_system::spin_interactionRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void tensorRowChangeEventHandler(::System::Object^  sender, spin_system::tensorRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void eigenvaluesRowChangeEventHandler(::System::Object^  sender, spin_system::eigenvaluesRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void axiality_rhombicityRowChangeEventHandler(::System::Object^  sender, spin_system::axiality_rhombicityRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void span_skewRowChangeEventHandler(::System::Object^  sender, spin_system::span_skewRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void inter_orientationRowChangeEventHandler(::System::Object^  sender, spin_system::inter_orientationRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void axisRowChangeEventHandler(::System::Object^  sender, spin_system::axisRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void spin_reference_frameRowChangeEventHandler(::System::Object^  sender, spin_system::spin_reference_frameRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void ref_orientationRowChangeEventHandler(::System::Object^  sender, spin_system::ref_orientationRowChangeEvent^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    spin_system();
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    spin_system(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::spinDataTable^  spin {
        spin_system::spinDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::coordinatesDataTable^  coordinates {
        spin_system::coordinatesDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::spin_interactionDataTable^  spin_interaction {
        spin_system::spin_interactionDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::tensorDataTable^  tensor {
        spin_system::tensorDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::eigenvaluesDataTable^  eigenvalues {
        spin_system::eigenvaluesDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::axiality_rhombicityDataTable^  axiality_rhombicity {
        spin_system::axiality_rhombicityDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::span_skewDataTable^  span_skew {
        spin_system::span_skewDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::inter_orientationDataTable^  inter_orientation {
        spin_system::inter_orientationDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::axisDataTable^  axis {
        spin_system::axisDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::spin_reference_frameDataTable^  spin_reference_frame {
        spin_system::spin_reference_frameDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property spin_system::ref_orientationDataTable^  ref_orientation {
        spin_system::ref_orientationDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::BrowsableAttribute(true), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
    virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
        ::System::Data::SchemaSerializationMode get() override;
        System::Void set(::System::Data::SchemaSerializationMode value) override;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataTableCollection^  Tables {
        ::System::Data::DataTableCollection^  get() new;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataRelationCollection^  Relations {
        ::System::Data::DataRelationCollection^  get() new;
    }
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void InitializeDerivedDataSet() override;
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Data::DataSet^  Clone() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeTables() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeRelations() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars();
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars(::System::Boolean initTable);
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitClass();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializespin();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializecoordinates();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializespin_interaction();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializetensor();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeeigenvalues();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeaxiality_rhombicity();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializespan_skew();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeinter_orientation();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeaxis();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializespin_reference_frame();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeref_orientation();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class spinDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnnumber;
        
        private: ::System::Data::DataColumn^  columnisotope;
        
        private: ::System::Data::DataColumn^  columnlabel;
        
        private: ::System::Data::DataColumn^  columnspin_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spinRowChangeEventHandler^  spinRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spinRowChangeEventHandler^  spinRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spinRowChangeEventHandler^  spinRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spinRowChangeEventHandler^  spinRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spinDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spinDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spinDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  numberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  isotopeColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  labelColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spinRow^  default [::System::Int32 ] {
            spin_system::spinRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddspinRow(spin_system::spinRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::spinRow^  AddspinRow(System::Int64 number, System::String^  isotope, System::String^  label);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::spinRow^  NewspinRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovespinRow(spin_system::spinRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class coordinatesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnx;
        
        private: ::System::Data::DataColumn^  columny;
        
        private: ::System::Data::DataColumn^  columnz;
        
        private: ::System::Data::DataColumn^  columnve_reference_frame_ID;
        
        private: ::System::Data::DataColumn^  columnspin_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::coordinatesRowChangeEventHandler^  coordinatesRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::coordinatesRowChangeEventHandler^  coordinatesRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::coordinatesRowChangeEventHandler^  coordinatesRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::coordinatesRowChangeEventHandler^  coordinatesRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        coordinatesDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        coordinatesDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        coordinatesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ve_reference_frame_IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::coordinatesRow^  default [::System::Int32 ] {
            spin_system::coordinatesRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddcoordinatesRow(spin_system::coordinatesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::coordinatesRow^  AddcoordinatesRow(System::Double x, System::Double y, System::Double z, System::Int64 ve_reference_frame_ID, 
                    spin_system::spinRow^  parentspinRowByspin_coordinates);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::coordinatesRow^  NewcoordinatesRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovecoordinatesRow(spin_system::coordinatesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class spin_interactionDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnkind;
        
        private: ::System::Data::DataColumn^  columnunits;
        
        private: ::System::Data::DataColumn^  columnspin_1;
        
        private: ::System::Data::DataColumn^  columnspin_2;
        
        private: ::System::Data::DataColumn^  columnlabel;
        
        private: ::System::Data::DataColumn^  columnscalar;
        
        private: ::System::Data::DataColumn^  columnspin_interaction_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spin_interactionRowChangeEventHandler^  spin_interactionRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spin_interactionRowChangeEventHandler^  spin_interactionRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spin_interactionRowChangeEventHandler^  spin_interactionRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spin_interactionRowChangeEventHandler^  spin_interactionRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_interactionDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_interactionDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_interactionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  kindColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  unitsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_1Column {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_2Column {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  labelColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  scalarColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_interaction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spin_interactionRow^  default [::System::Int32 ] {
            spin_system::spin_interactionRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addspin_interactionRow(spin_system::spin_interactionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::spin_interactionRow^  Addspin_interactionRow(
                    System::String^  kind, 
                    System::String^  units, 
                    System::Int64 spin_1, 
                    System::Int64 spin_2, 
                    System::String^  label, 
                    System::Double scalar);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::spin_interactionRow^  Newspin_interactionRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removespin_interactionRow(spin_system::spin_interactionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class tensorDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnxx;
        
        private: ::System::Data::DataColumn^  columnxy;
        
        private: ::System::Data::DataColumn^  columnxz;
        
        private: ::System::Data::DataColumn^  columnyx;
        
        private: ::System::Data::DataColumn^  columnyy;
        
        private: ::System::Data::DataColumn^  columnyz;
        
        private: ::System::Data::DataColumn^  columnzx;
        
        private: ::System::Data::DataColumn^  columnzy;
        
        private: ::System::Data::DataColumn^  columnzz;
        
        private: ::System::Data::DataColumn^  columnreference_frame;
        
        private: ::System::Data::DataColumn^  columnspin_interaction_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::tensorRowChangeEventHandler^  tensorRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::tensorRowChangeEventHandler^  tensorRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::tensorRowChangeEventHandler^  tensorRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::tensorRowChangeEventHandler^  tensorRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        tensorDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        tensorDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        tensorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xxColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xyColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xzColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yxColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yyColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yzColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zxColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zyColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zzColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  reference_frameColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_interaction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::tensorRow^  default [::System::Int32 ] {
            spin_system::tensorRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddtensorRow(spin_system::tensorRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::tensorRow^  AddtensorRow(
                    System::Double xx, 
                    System::Double xy, 
                    System::Double xz, 
                    System::Double yx, 
                    System::Double yy, 
                    System::Double yz, 
                    System::Double zx, 
                    System::Double zy, 
                    System::Double zz, 
                    System::Int64 reference_frame, 
                    spin_system::spin_interactionRow^  parentspin_interactionRowByspin_interaction_tensor);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::tensorRow^  NewtensorRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovetensorRow(spin_system::tensorRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class eigenvaluesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnXX;
        
        private: ::System::Data::DataColumn^  columnYY;
        
        private: ::System::Data::DataColumn^  columnZZ;
        
        private: ::System::Data::DataColumn^  columnspin_interaction_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::eigenvaluesRowChangeEventHandler^  eigenvaluesRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::eigenvaluesRowChangeEventHandler^  eigenvaluesRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::eigenvaluesRowChangeEventHandler^  eigenvaluesRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::eigenvaluesRowChangeEventHandler^  eigenvaluesRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        eigenvaluesDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        eigenvaluesDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        eigenvaluesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  XXColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  YYColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ZZColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_interaction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::eigenvaluesRow^  default [::System::Int32 ] {
            spin_system::eigenvaluesRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddeigenvaluesRow(spin_system::eigenvaluesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::eigenvaluesRow^  AddeigenvaluesRow(System::Double XX, System::Double YY, System::Double ZZ, spin_system::spin_interactionRow^  parentspin_interactionRowByspin_interaction_eigenvalues);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::eigenvaluesRow^  NeweigenvaluesRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveeigenvaluesRow(spin_system::eigenvaluesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class axiality_rhombicityDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columniso;
        
        private: ::System::Data::DataColumn^  columnax;
        
        private: ::System::Data::DataColumn^  columnrh;
        
        private: ::System::Data::DataColumn^  columnspin_interaction_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axiality_rhombicityRowChangeEventHandler^  axiality_rhombicityRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axiality_rhombicityRowChangeEventHandler^  axiality_rhombicityRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axiality_rhombicityRowChangeEventHandler^  axiality_rhombicityRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axiality_rhombicityRowChangeEventHandler^  axiality_rhombicityRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axiality_rhombicityDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axiality_rhombicityDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axiality_rhombicityDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  isoColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  axColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  rhColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_interaction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::axiality_rhombicityRow^  default [::System::Int32 ] {
            spin_system::axiality_rhombicityRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addaxiality_rhombicityRow(spin_system::axiality_rhombicityRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::axiality_rhombicityRow^  Addaxiality_rhombicityRow(System::Double iso, System::Double ax, System::Double rh, 
                    spin_system::spin_interactionRow^  parentspin_interactionRowByspin_interaction_axiality_rhombicity);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::axiality_rhombicityRow^  Newaxiality_rhombicityRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removeaxiality_rhombicityRow(spin_system::axiality_rhombicityRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class span_skewDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columniso;
        
        private: ::System::Data::DataColumn^  columnspan;
        
        private: ::System::Data::DataColumn^  columnskew;
        
        private: ::System::Data::DataColumn^  columnspin_interaction_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::span_skewRowChangeEventHandler^  span_skewRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::span_skewRowChangeEventHandler^  span_skewRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::span_skewRowChangeEventHandler^  span_skewRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::span_skewRowChangeEventHandler^  span_skewRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        span_skewDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        span_skewDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        span_skewDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  isoColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spanColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  skewColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_interaction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::span_skewRow^  default [::System::Int32 ] {
            spin_system::span_skewRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addspan_skewRow(spin_system::span_skewRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::span_skewRow^  Addspan_skewRow(System::Double iso, System::Double span, System::Double skew, spin_system::spin_interactionRow^  parentspin_interactionRowByspin_interaction_span_skew);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::span_skewRow^  Newspan_skewRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removespan_skewRow(spin_system::span_skewRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class inter_orientationDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnalpha;
        
        private: ::System::Data::DataColumn^  columnbeta;
        
        private: ::System::Data::DataColumn^  columngamma;
        
        private: ::System::Data::DataColumn^  columneu_reference_frame_ID;
        
        private: ::System::Data::DataColumn^  columnangle;
        
        private: ::System::Data::DataColumn^  columnre;
        
        private: ::System::Data::DataColumn^  columni;
        
        private: ::System::Data::DataColumn^  columnj;
        
        private: ::System::Data::DataColumn^  columnk;
        
        private: ::System::Data::DataColumn^  columnquar_reference_frame_ID;
        
        private: ::System::Data::DataColumn^  columninter_orientation_Id;
        
        private: ::System::Data::DataColumn^  columnspin_interaction_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::inter_orientationRowChangeEventHandler^  inter_orientationRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::inter_orientationRowChangeEventHandler^  inter_orientationRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::inter_orientationRowChangeEventHandler^  inter_orientationRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::inter_orientationRowChangeEventHandler^  inter_orientationRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        inter_orientationDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        inter_orientationDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        inter_orientationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  alphaColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  betaColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  gammaColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  eu_reference_frame_IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  angleColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  reColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  iColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  kColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  quar_reference_frame_IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  inter_orientation_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_interaction_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::inter_orientationRow^  default [::System::Int32 ] {
            spin_system::inter_orientationRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addinter_orientationRow(spin_system::inter_orientationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::inter_orientationRow^  Addinter_orientationRow(
                    System::Double alpha, 
                    System::Double beta, 
                    System::Double gamma, 
                    System::Int64 eu_reference_frame_ID, 
                    System::Double angle, 
                    System::Double re, 
                    System::Double i, 
                    System::Double j, 
                    System::Double k, 
                    System::Int64 quar_reference_frame_ID, 
                    spin_system::spin_interactionRow^  parentspin_interactionRowByspin_interaction_inter_orientation);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::inter_orientationRow^  Newinter_orientationRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removeinter_orientationRow(spin_system::inter_orientationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class axisDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnx;
        
        private: ::System::Data::DataColumn^  columny;
        
        private: ::System::Data::DataColumn^  columnz;
        
        private: ::System::Data::DataColumn^  columnve_reference_frame_ID;
        
        private: ::System::Data::DataColumn^  columninter_orientation_Id;
        
        private: ::System::Data::DataColumn^  columnref_orientation_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axisRowChangeEventHandler^  axisRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axisRowChangeEventHandler^  axisRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axisRowChangeEventHandler^  axisRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::axisRowChangeEventHandler^  axisRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axisDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axisDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axisDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ve_reference_frame_IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  inter_orientation_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ref_orientation_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::axisRow^  default [::System::Int32 ] {
            spin_system::axisRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddaxisRow(spin_system::axisRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::axisRow^  AddaxisRow(
                    System::Double x, 
                    System::Double y, 
                    System::Double z, 
                    System::Int64 ve_reference_frame_ID, 
                    spin_system::inter_orientationRow^  parentinter_orientationRowByinter_orientation_axis, 
                    spin_system::ref_orientationRow^  parentref_orientationRowByref_orientation_axis);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::axisRow^  NewaxisRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveaxisRow(spin_system::axisRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class spin_reference_frameDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnnumber;
        
        private: ::System::Data::DataColumn^  columnlabel;
        
        private: ::System::Data::DataColumn^  columnx;
        
        private: ::System::Data::DataColumn^  columny;
        
        private: ::System::Data::DataColumn^  columnz;
        
        private: ::System::Data::DataColumn^  columnve_reference_frame_ID;
        
        private: ::System::Data::DataColumn^  columnspin_reference_frame_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spin_reference_frameRowChangeEventHandler^  spin_reference_frameRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spin_reference_frameRowChangeEventHandler^  spin_reference_frameRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spin_reference_frameRowChangeEventHandler^  spin_reference_frameRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::spin_reference_frameRowChangeEventHandler^  spin_reference_frameRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_reference_frameDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_reference_frameDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_reference_frameDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  numberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  labelColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  yColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ve_reference_frame_IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_reference_frame_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spin_reference_frameRow^  default [::System::Int32 ] {
            spin_system::spin_reference_frameRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addspin_reference_frameRow(spin_system::spin_reference_frameRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::spin_reference_frameRow^  Addspin_reference_frameRow(
                    System::Int64 number, 
                    System::String^  label, 
                    System::Double x, 
                    System::Double y, 
                    System::Double z, 
                    System::Int64 ve_reference_frame_ID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::spin_reference_frameRow^  Newspin_reference_frameRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removespin_reference_frameRow(spin_system::spin_reference_frameRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class ref_orientationDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnalpha;
        
        private: ::System::Data::DataColumn^  columnbeta;
        
        private: ::System::Data::DataColumn^  columngamma;
        
        private: ::System::Data::DataColumn^  columneu_reference_frame_ID;
        
        private: ::System::Data::DataColumn^  columnangle;
        
        private: ::System::Data::DataColumn^  columnre;
        
        private: ::System::Data::DataColumn^  columni;
        
        private: ::System::Data::DataColumn^  columnj;
        
        private: ::System::Data::DataColumn^  columnk;
        
        private: ::System::Data::DataColumn^  columnquar_reference_frame_ID;
        
        private: ::System::Data::DataColumn^  columnref_orientation_Id;
        
        private: ::System::Data::DataColumn^  columnspin_reference_frame_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::ref_orientationRowChangeEventHandler^  ref_orientationRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::ref_orientationRowChangeEventHandler^  ref_orientationRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::ref_orientationRowChangeEventHandler^  ref_orientationRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event spin_system::ref_orientationRowChangeEventHandler^  ref_orientationRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref_orientationDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref_orientationDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref_orientationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  alphaColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  betaColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  gammaColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  eu_reference_frame_IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  angleColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  reColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  iColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  kColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  quar_reference_frame_IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ref_orientation_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  spin_reference_frame_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::ref_orientationRow^  default [::System::Int32 ] {
            spin_system::ref_orientationRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addref_orientationRow(spin_system::ref_orientationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::ref_orientationRow^  Addref_orientationRow(
                    System::Double alpha, 
                    System::Double beta, 
                    System::Double gamma, 
                    System::Int64 eu_reference_frame_ID, 
                    System::Double angle, 
                    System::Double re, 
                    System::Double i, 
                    System::Double j, 
                    System::Double k, 
                    System::Int64 quar_reference_frame_ID, 
                    spin_system::spin_reference_frameRow^  parentspin_reference_frameRowByspin_reference_frame_ref_orientation);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_system::ref_orientationRow^  Newref_orientationRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removeref_orientationRow(spin_system::ref_orientationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class spinRow : public ::System::Data::DataRow {
        
        private: spin_system::spinDataTable^  tablespin;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spinRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 number {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  isotope {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  label {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 spin_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IslabelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetlabelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::coordinatesRow^  >^  GetcoordinatesRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class coordinatesRow : public ::System::Data::DataRow {
        
        private: spin_system::coordinatesDataTable^  tablecoordinates;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        coordinatesRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double x {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double y {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double z {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 ve_reference_frame_ID {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 spin_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spinRow^  spinRow {
            spin_system::spinRow^  get();
            System::Void set(spin_system::spinRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isspin_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setspin_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class spin_interactionRow : public ::System::Data::DataRow {
        
        private: spin_system::spin_interactionDataTable^  tablespin_interaction;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_interactionRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  kind {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  units {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 spin_1 {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 spin_2 {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  label {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double scalar {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 spin_interaction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isspin_2Null();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setspin_2Null();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IslabelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetlabelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::tensorRow^  >^  GettensorRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::eigenvaluesRow^  >^  GeteigenvaluesRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::axiality_rhombicityRow^  >^  Getaxiality_rhombicityRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::span_skewRow^  >^  Getspan_skewRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::inter_orientationRow^  >^  Getinter_orientationRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class tensorRow : public ::System::Data::DataRow {
        
        private: spin_system::tensorDataTable^  tabletensor;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        tensorRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double xx {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double xy {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double xz {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double yx {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double yy {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double yz {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double zx {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double zy {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double zz {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 reference_frame {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 spin_interaction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spin_interactionRow^  spin_interactionRow {
            spin_system::spin_interactionRow^  get();
            System::Void set(spin_system::spin_interactionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isspin_interaction_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setspin_interaction_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class eigenvaluesRow : public ::System::Data::DataRow {
        
        private: spin_system::eigenvaluesDataTable^  tableeigenvalues;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        eigenvaluesRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double XX {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double YY {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double ZZ {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 spin_interaction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spin_interactionRow^  spin_interactionRow {
            spin_system::spin_interactionRow^  get();
            System::Void set(spin_system::spin_interactionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isspin_interaction_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setspin_interaction_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class axiality_rhombicityRow : public ::System::Data::DataRow {
        
        private: spin_system::axiality_rhombicityDataTable^  tableaxiality_rhombicity;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axiality_rhombicityRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double iso {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double ax {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double rh {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 spin_interaction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spin_interactionRow^  spin_interactionRow {
            spin_system::spin_interactionRow^  get();
            System::Void set(spin_system::spin_interactionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isspin_interaction_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setspin_interaction_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class span_skewRow : public ::System::Data::DataRow {
        
        private: spin_system::span_skewDataTable^  tablespan_skew;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        span_skewRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double iso {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double span {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double skew {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 spin_interaction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spin_interactionRow^  spin_interactionRow {
            spin_system::spin_interactionRow^  get();
            System::Void set(spin_system::spin_interactionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isspin_interaction_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setspin_interaction_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class inter_orientationRow : public ::System::Data::DataRow {
        
        private: spin_system::inter_orientationDataTable^  tableinter_orientation;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        inter_orientationRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double alpha {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double beta {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double gamma {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 eu_reference_frame_ID {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double angle {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double re {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double i {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double j {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double k {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 quar_reference_frame_ID {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 inter_orientation_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 spin_interaction_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spin_interactionRow^  spin_interactionRow {
            spin_system::spin_interactionRow^  get();
            System::Void set(spin_system::spin_interactionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isspin_interaction_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setspin_interaction_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::axisRow^  >^  GetaxisRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class axisRow : public ::System::Data::DataRow {
        
        private: spin_system::axisDataTable^  tableaxis;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axisRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double x {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double y {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double z {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 ve_reference_frame_ID {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 inter_orientation_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 ref_orientation_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::inter_orientationRow^  inter_orientationRow {
            spin_system::inter_orientationRow^  get();
            System::Void set(spin_system::inter_orientationRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::ref_orientationRow^  ref_orientationRow {
            spin_system::ref_orientationRow^  get();
            System::Void set(spin_system::ref_orientationRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isinter_orientation_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setinter_orientation_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isref_orientation_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setref_orientation_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class spin_reference_frameRow : public ::System::Data::DataRow {
        
        private: spin_system::spin_reference_frameDataTable^  tablespin_reference_frame;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_reference_frameRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 number {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  label {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double x {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double y {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double z {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 ve_reference_frame_ID {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 spin_reference_frame_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::ref_orientationRow^  >^  Getref_orientationRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class ref_orientationRow : public ::System::Data::DataRow {
        
        private: spin_system::ref_orientationDataTable^  tableref_orientation;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref_orientationRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double alpha {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double beta {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double gamma {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 eu_reference_frame_ID {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double angle {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double re {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double i {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double j {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Double k {
            System::Double get();
            System::Void set(System::Double value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 quar_reference_frame_ID {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 ref_orientation_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 spin_reference_frame_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spin_reference_frameRow^  spin_reference_frameRow {
            spin_system::spin_reference_frameRow^  get();
            System::Void set(spin_system::spin_reference_frameRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isspin_reference_frame_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setspin_reference_frame_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< spin_system::axisRow^  >^  GetaxisRows();
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class spinRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::spinRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spinRowChangeEvent(spin_system::spinRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spinRow^  Row {
            spin_system::spinRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class coordinatesRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::coordinatesRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        coordinatesRowChangeEvent(spin_system::coordinatesRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::coordinatesRow^  Row {
            spin_system::coordinatesRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class spin_interactionRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::spin_interactionRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_interactionRowChangeEvent(spin_system::spin_interactionRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spin_interactionRow^  Row {
            spin_system::spin_interactionRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class tensorRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::tensorRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        tensorRowChangeEvent(spin_system::tensorRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::tensorRow^  Row {
            spin_system::tensorRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class eigenvaluesRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::eigenvaluesRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        eigenvaluesRowChangeEvent(spin_system::eigenvaluesRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::eigenvaluesRow^  Row {
            spin_system::eigenvaluesRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class axiality_rhombicityRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::axiality_rhombicityRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axiality_rhombicityRowChangeEvent(spin_system::axiality_rhombicityRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::axiality_rhombicityRow^  Row {
            spin_system::axiality_rhombicityRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class span_skewRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::span_skewRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        span_skewRowChangeEvent(spin_system::span_skewRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::span_skewRow^  Row {
            spin_system::span_skewRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class inter_orientationRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::inter_orientationRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        inter_orientationRowChangeEvent(spin_system::inter_orientationRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::inter_orientationRow^  Row {
            spin_system::inter_orientationRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class axisRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::axisRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        axisRowChangeEvent(spin_system::axisRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::axisRow^  Row {
            spin_system::axisRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class spin_reference_frameRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::spin_reference_frameRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spin_reference_frameRowChangeEvent(spin_system::spin_reference_frameRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::spin_reference_frameRow^  Row {
            spin_system::spin_reference_frameRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class ref_orientationRowChangeEvent : public ::System::EventArgs {
        
        private: spin_system::ref_orientationRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref_orientationRowChangeEvent(spin_system::ref_orientationRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property spin_system::ref_orientationRow^  Row {
            spin_system::ref_orientationRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
};


inline spin_system::spin_system() {
    this->BeginInit();
    this->InitClass();
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &spin_system::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    __super::Relations->CollectionChanged += schemaChangedHandler;
    this->EndInit();
}

inline spin_system::spin_system(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataSet(info, context, false) {
    if (this->IsBinarySerialized(info, context) == true) {
        this->InitVars(false);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &spin_system::SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler1;
        this->Relations->CollectionChanged += schemaChangedHandler1;
        return;
    }
    ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
    if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        if (ds->Tables[L"spin"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::spinDataTable(ds->Tables[L"spin"])));
        }
        if (ds->Tables[L"coordinates"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::coordinatesDataTable(ds->Tables[L"coordinates"])));
        }
        if (ds->Tables[L"spin_interaction"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::spin_interactionDataTable(ds->Tables[L"spin_interaction"])));
        }
        if (ds->Tables[L"tensor"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::tensorDataTable(ds->Tables[L"tensor"])));
        }
        if (ds->Tables[L"eigenvalues"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::eigenvaluesDataTable(ds->Tables[L"eigenvalues"])));
        }
        if (ds->Tables[L"axiality_rhombicity"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::axiality_rhombicityDataTable(ds->Tables[L"axiality_rhombicity"])));
        }
        if (ds->Tables[L"span_skew"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::span_skewDataTable(ds->Tables[L"span_skew"])));
        }
        if (ds->Tables[L"inter_orientation"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::inter_orientationDataTable(ds->Tables[L"inter_orientation"])));
        }
        if (ds->Tables[L"axis"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::axisDataTable(ds->Tables[L"axis"])));
        }
        if (ds->Tables[L"spin_reference_frame"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::spin_reference_frameDataTable(ds->Tables[L"spin_reference_frame"])));
        }
        if (ds->Tables[L"ref_orientation"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::ref_orientationDataTable(ds->Tables[L"ref_orientation"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
    }
    this->GetSerializationData(info, context);
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &spin_system::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    this->Relations->CollectionChanged += schemaChangedHandler;
}

inline spin_system::spinDataTable^  spin_system::spin::get() {
    return this->tablespin;
}

inline spin_system::coordinatesDataTable^  spin_system::coordinates::get() {
    return this->tablecoordinates;
}

inline spin_system::spin_interactionDataTable^  spin_system::spin_interaction::get() {
    return this->tablespin_interaction;
}

inline spin_system::tensorDataTable^  spin_system::tensor::get() {
    return this->tabletensor;
}

inline spin_system::eigenvaluesDataTable^  spin_system::eigenvalues::get() {
    return this->tableeigenvalues;
}

inline spin_system::axiality_rhombicityDataTable^  spin_system::axiality_rhombicity::get() {
    return this->tableaxiality_rhombicity;
}

inline spin_system::span_skewDataTable^  spin_system::span_skew::get() {
    return this->tablespan_skew;
}

inline spin_system::inter_orientationDataTable^  spin_system::inter_orientation::get() {
    return this->tableinter_orientation;
}

inline spin_system::axisDataTable^  spin_system::axis::get() {
    return this->tableaxis;
}

inline spin_system::spin_reference_frameDataTable^  spin_system::spin_reference_frame::get() {
    return this->tablespin_reference_frame;
}

inline spin_system::ref_orientationDataTable^  spin_system::ref_orientation::get() {
    return this->tableref_orientation;
}

inline ::System::Data::SchemaSerializationMode spin_system::SchemaSerializationMode::get() {
    return this->_schemaSerializationMode;
}
inline System::Void spin_system::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
    this->_schemaSerializationMode = __identifier(value);
}

inline ::System::Data::DataTableCollection^  spin_system::Tables::get() {
    return __super::Tables;
}

inline ::System::Data::DataRelationCollection^  spin_system::Relations::get() {
    return __super::Relations;
}

inline ::System::Void spin_system::InitializeDerivedDataSet() {
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline ::System::Data::DataSet^  spin_system::Clone() {
    spin_system^  cln = (cli::safe_cast<spin_system^  >(__super::Clone()));
    cln->InitVars();
    cln->SchemaSerializationMode = this->SchemaSerializationMode;
    return cln;
}

inline ::System::Boolean spin_system::ShouldSerializeTables() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializeRelations() {
    return false;
}

inline ::System::Void spin_system::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
    if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        this->Reset();
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXml(reader);
        if (ds->Tables[L"spin"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::spinDataTable(ds->Tables[L"spin"])));
        }
        if (ds->Tables[L"coordinates"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::coordinatesDataTable(ds->Tables[L"coordinates"])));
        }
        if (ds->Tables[L"spin_interaction"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::spin_interactionDataTable(ds->Tables[L"spin_interaction"])));
        }
        if (ds->Tables[L"tensor"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::tensorDataTable(ds->Tables[L"tensor"])));
        }
        if (ds->Tables[L"eigenvalues"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::eigenvaluesDataTable(ds->Tables[L"eigenvalues"])));
        }
        if (ds->Tables[L"axiality_rhombicity"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::axiality_rhombicityDataTable(ds->Tables[L"axiality_rhombicity"])));
        }
        if (ds->Tables[L"span_skew"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::span_skewDataTable(ds->Tables[L"span_skew"])));
        }
        if (ds->Tables[L"inter_orientation"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::inter_orientationDataTable(ds->Tables[L"inter_orientation"])));
        }
        if (ds->Tables[L"axis"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::axisDataTable(ds->Tables[L"axis"])));
        }
        if (ds->Tables[L"spin_reference_frame"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::spin_reference_frameDataTable(ds->Tables[L"spin_reference_frame"])));
        }
        if (ds->Tables[L"ref_orientation"] != nullptr) {
            __super::Tables->Add((gcnew spin_system::ref_orientationDataTable(ds->Tables[L"ref_orientation"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXml(reader);
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchema^  spin_system::GetSchemaSerializable() {
    ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
    this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
    stream->Position = 0;
    return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
}

inline ::System::Void spin_system::InitVars() {
    this->InitVars(true);
}

inline ::System::Void spin_system::InitVars(::System::Boolean initTable) {
    this->tablespin = (cli::safe_cast<spin_system::spinDataTable^  >(__super::Tables[L"spin"]));
    if (initTable == true) {
        if (this->tablespin != nullptr) {
            this->tablespin->InitVars();
        }
    }
    this->tablecoordinates = (cli::safe_cast<spin_system::coordinatesDataTable^  >(__super::Tables[L"coordinates"]));
    if (initTable == true) {
        if (this->tablecoordinates != nullptr) {
            this->tablecoordinates->InitVars();
        }
    }
    this->tablespin_interaction = (cli::safe_cast<spin_system::spin_interactionDataTable^  >(__super::Tables[L"spin_interaction"]));
    if (initTable == true) {
        if (this->tablespin_interaction != nullptr) {
            this->tablespin_interaction->InitVars();
        }
    }
    this->tabletensor = (cli::safe_cast<spin_system::tensorDataTable^  >(__super::Tables[L"tensor"]));
    if (initTable == true) {
        if (this->tabletensor != nullptr) {
            this->tabletensor->InitVars();
        }
    }
    this->tableeigenvalues = (cli::safe_cast<spin_system::eigenvaluesDataTable^  >(__super::Tables[L"eigenvalues"]));
    if (initTable == true) {
        if (this->tableeigenvalues != nullptr) {
            this->tableeigenvalues->InitVars();
        }
    }
    this->tableaxiality_rhombicity = (cli::safe_cast<spin_system::axiality_rhombicityDataTable^  >(__super::Tables[L"axiality_rhombicity"]));
    if (initTable == true) {
        if (this->tableaxiality_rhombicity != nullptr) {
            this->tableaxiality_rhombicity->InitVars();
        }
    }
    this->tablespan_skew = (cli::safe_cast<spin_system::span_skewDataTable^  >(__super::Tables[L"span_skew"]));
    if (initTable == true) {
        if (this->tablespan_skew != nullptr) {
            this->tablespan_skew->InitVars();
        }
    }
    this->tableinter_orientation = (cli::safe_cast<spin_system::inter_orientationDataTable^  >(__super::Tables[L"inter_orientation"]));
    if (initTable == true) {
        if (this->tableinter_orientation != nullptr) {
            this->tableinter_orientation->InitVars();
        }
    }
    this->tableaxis = (cli::safe_cast<spin_system::axisDataTable^  >(__super::Tables[L"axis"]));
    if (initTable == true) {
        if (this->tableaxis != nullptr) {
            this->tableaxis->InitVars();
        }
    }
    this->tablespin_reference_frame = (cli::safe_cast<spin_system::spin_reference_frameDataTable^  >(__super::Tables[L"spin_reference_frame"]));
    if (initTable == true) {
        if (this->tablespin_reference_frame != nullptr) {
            this->tablespin_reference_frame->InitVars();
        }
    }
    this->tableref_orientation = (cli::safe_cast<spin_system::ref_orientationDataTable^  >(__super::Tables[L"ref_orientation"]));
    if (initTable == true) {
        if (this->tableref_orientation != nullptr) {
            this->tableref_orientation->InitVars();
        }
    }
    this->relationspin_coordinates = this->Relations[L"spin_coordinates"];
    this->relationspin_interaction_tensor = this->Relations[L"spin_interaction_tensor"];
    this->relationspin_interaction_eigenvalues = this->Relations[L"spin_interaction_eigenvalues"];
    this->relationspin_interaction_axiality_rhombicity = this->Relations[L"spin_interaction_axiality_rhombicity"];
    this->relationspin_interaction_span_skew = this->Relations[L"spin_interaction_span_skew"];
    this->relationspin_interaction_inter_orientation = this->Relations[L"spin_interaction_inter_orientation"];
    this->relationinter_orientation_axis = this->Relations[L"inter_orientation_axis"];
    this->relationref_orientation_axis = this->Relations[L"ref_orientation_axis"];
    this->relationspin_reference_frame_ref_orientation = this->Relations[L"spin_reference_frame_ref_orientation"];
}

inline ::System::Void spin_system::InitClass() {
    this->DataSetName = L"spin_system";
    this->Prefix = L"";
    this->EnforceConstraints = true;
    this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
    this->tablespin = (gcnew spin_system::spinDataTable());
    __super::Tables->Add(this->tablespin);
    this->tablecoordinates = (gcnew spin_system::coordinatesDataTable());
    __super::Tables->Add(this->tablecoordinates);
    this->tablespin_interaction = (gcnew spin_system::spin_interactionDataTable());
    __super::Tables->Add(this->tablespin_interaction);
    this->tabletensor = (gcnew spin_system::tensorDataTable());
    __super::Tables->Add(this->tabletensor);
    this->tableeigenvalues = (gcnew spin_system::eigenvaluesDataTable());
    __super::Tables->Add(this->tableeigenvalues);
    this->tableaxiality_rhombicity = (gcnew spin_system::axiality_rhombicityDataTable());
    __super::Tables->Add(this->tableaxiality_rhombicity);
    this->tablespan_skew = (gcnew spin_system::span_skewDataTable());
    __super::Tables->Add(this->tablespan_skew);
    this->tableinter_orientation = (gcnew spin_system::inter_orientationDataTable());
    __super::Tables->Add(this->tableinter_orientation);
    this->tableaxis = (gcnew spin_system::axisDataTable());
    __super::Tables->Add(this->tableaxis);
    this->tablespin_reference_frame = (gcnew spin_system::spin_reference_frameDataTable());
    __super::Tables->Add(this->tablespin_reference_frame);
    this->tableref_orientation = (gcnew spin_system::ref_orientationDataTable());
    __super::Tables->Add(this->tableref_orientation);
    ::System::Data::ForeignKeyConstraint^  fkc;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"spin_coordinates", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin->spin_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecoordinates->spin_IdColumn}));
    this->tablecoordinates->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"spin_interaction_tensor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin_interaction->spin_interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletensor->spin_interaction_IdColumn}));
    this->tabletensor->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"spin_interaction_eigenvalues", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin_interaction->spin_interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableeigenvalues->spin_interaction_IdColumn}));
    this->tableeigenvalues->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"spin_interaction_axiality_rhombicity", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin_interaction->spin_interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableaxiality_rhombicity->spin_interaction_IdColumn}));
    this->tableaxiality_rhombicity->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"spin_interaction_span_skew", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin_interaction->spin_interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespan_skew->spin_interaction_IdColumn}));
    this->tablespan_skew->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"spin_interaction_inter_orientation", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin_interaction->spin_interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinter_orientation->spin_interaction_IdColumn}));
    this->tableinter_orientation->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"inter_orientation_axis", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinter_orientation->inter_orientation_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableaxis->inter_orientation_IdColumn}));
    this->tableaxis->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"ref_orientation_axis", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableref_orientation->ref_orientation_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableaxis->ref_orientation_IdColumn}));
    this->tableaxis->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"spin_reference_frame_ref_orientation", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin_reference_frame->spin_reference_frame_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableref_orientation->spin_reference_frame_IdColumn}));
    this->tableref_orientation->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    this->relationspin_coordinates = (gcnew ::System::Data::DataRelation(L"spin_coordinates", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin->spin_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecoordinates->spin_IdColumn}, false));
    this->relationspin_coordinates->Nested = true;
    this->Relations->Add(this->relationspin_coordinates);
    this->relationspin_interaction_tensor = (gcnew ::System::Data::DataRelation(L"spin_interaction_tensor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin_interaction->spin_interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletensor->spin_interaction_IdColumn}, false));
    this->relationspin_interaction_tensor->Nested = true;
    this->Relations->Add(this->relationspin_interaction_tensor);
    this->relationspin_interaction_eigenvalues = (gcnew ::System::Data::DataRelation(L"spin_interaction_eigenvalues", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin_interaction->spin_interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableeigenvalues->spin_interaction_IdColumn}, false));
    this->relationspin_interaction_eigenvalues->Nested = true;
    this->Relations->Add(this->relationspin_interaction_eigenvalues);
    this->relationspin_interaction_axiality_rhombicity = (gcnew ::System::Data::DataRelation(L"spin_interaction_axiality_rhombicity", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin_interaction->spin_interaction_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableaxiality_rhombicity->spin_interaction_IdColumn}, 
        false));
    this->relationspin_interaction_axiality_rhombicity->Nested = true;
    this->Relations->Add(this->relationspin_interaction_axiality_rhombicity);
    this->relationspin_interaction_span_skew = (gcnew ::System::Data::DataRelation(L"spin_interaction_span_skew", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin_interaction->spin_interaction_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespan_skew->spin_interaction_IdColumn}, false));
    this->relationspin_interaction_span_skew->Nested = true;
    this->Relations->Add(this->relationspin_interaction_span_skew);
    this->relationspin_interaction_inter_orientation = (gcnew ::System::Data::DataRelation(L"spin_interaction_inter_orientation", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin_interaction->spin_interaction_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinter_orientation->spin_interaction_IdColumn}, 
        false));
    this->relationspin_interaction_inter_orientation->Nested = true;
    this->Relations->Add(this->relationspin_interaction_inter_orientation);
    this->relationinter_orientation_axis = (gcnew ::System::Data::DataRelation(L"inter_orientation_axis", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinter_orientation->inter_orientation_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableaxis->inter_orientation_IdColumn}, false));
    this->relationinter_orientation_axis->Nested = true;
    this->Relations->Add(this->relationinter_orientation_axis);
    this->relationref_orientation_axis = (gcnew ::System::Data::DataRelation(L"ref_orientation_axis", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableref_orientation->ref_orientation_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableaxis->ref_orientation_IdColumn}, false));
    this->relationref_orientation_axis->Nested = true;
    this->Relations->Add(this->relationref_orientation_axis);
    this->relationspin_reference_frame_ref_orientation = (gcnew ::System::Data::DataRelation(L"spin_reference_frame_ref_orientation", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespin_reference_frame->spin_reference_frame_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableref_orientation->spin_reference_frame_IdColumn}, 
        false));
    this->relationspin_reference_frame_ref_orientation->Nested = true;
    this->Relations->Add(this->relationspin_reference_frame_ref_orientation);
}

inline ::System::Boolean spin_system::ShouldSerializespin() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializecoordinates() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializespin_interaction() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializetensor() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializeeigenvalues() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializeaxiality_rhombicity() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializespan_skew() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializeinter_orientation() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializeaxis() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializespin_reference_frame() {
    return false;
}

inline ::System::Boolean spin_system::ShouldSerializeref_orientation() {
    return false;
}

inline ::System::Void spin_system::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
    if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any->Namespace = ds->Namespace;
    sequence->Items->Add(any);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::spinDataTable::spinDataTable() {
    this->TableName = L"spin";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::spinDataTable::spinDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::spinDataTable::spinDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::spinDataTable::numberColumn::get() {
    return this->columnnumber;
}

inline ::System::Data::DataColumn^  spin_system::spinDataTable::isotopeColumn::get() {
    return this->columnisotope;
}

inline ::System::Data::DataColumn^  spin_system::spinDataTable::labelColumn::get() {
    return this->columnlabel;
}

inline ::System::Data::DataColumn^  spin_system::spinDataTable::spin_IdColumn::get() {
    return this->columnspin_Id;
}

inline ::System::Int32 spin_system::spinDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::spinRow^  spin_system::spinDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::spinRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::spinDataTable::AddspinRow(spin_system::spinRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::spinRow^  spin_system::spinDataTable::AddspinRow(System::Int64 number, System::String^  isotope, System::String^  label) {
    spin_system::spinRow^  rowspinRow = (cli::safe_cast<spin_system::spinRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {number, isotope, label, 
        nullptr};
    rowspinRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowspinRow);
    return rowspinRow;
}

inline ::System::Collections::IEnumerator^  spin_system::spinDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::spinDataTable::Clone() {
    spin_system::spinDataTable^  cln = (cli::safe_cast<spin_system::spinDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::spinDataTable::CreateInstance() {
    return (gcnew spin_system::spinDataTable());
}

inline ::System::Void spin_system::spinDataTable::InitVars() {
    this->columnnumber = __super::Columns[L"number"];
    this->columnisotope = __super::Columns[L"isotope"];
    this->columnlabel = __super::Columns[L"label"];
    this->columnspin_Id = __super::Columns[L"spin_Id"];
}

inline ::System::Void spin_system::spinDataTable::InitClass() {
    this->columnnumber = (gcnew ::System::Data::DataColumn(L"number", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnnumber);
    this->columnisotope = (gcnew ::System::Data::DataColumn(L"isotope", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnisotope);
    this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnlabel);
    this->columnspin_Id = (gcnew ::System::Data::DataColumn(L"spin_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnspin_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnspin_Id}, 
            true)));
    this->columnnumber->AllowDBNull = false;
    this->columnnumber->Namespace = L"";
    this->columnisotope->AllowDBNull = false;
    this->columnisotope->Namespace = L"";
    this->columnlabel->Namespace = L"";
    this->columnspin_Id->AutoIncrement = true;
    this->columnspin_Id->AllowDBNull = false;
    this->columnspin_Id->Unique = true;
}

inline spin_system::spinRow^  spin_system::spinDataTable::NewspinRow() {
    return (cli::safe_cast<spin_system::spinRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::spinDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::spinRow(builder));
}

inline ::System::Type^  spin_system::spinDataTable::GetRowType() {
    return spin_system::spinRow::typeid;
}

inline ::System::Void spin_system::spinDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->spinRowChanged(this, (gcnew spin_system::spinRowChangeEvent((cli::safe_cast<spin_system::spinRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spinDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->spinRowChanging(this, (gcnew spin_system::spinRowChangeEvent((cli::safe_cast<spin_system::spinRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spinDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->spinRowDeleted(this, (gcnew spin_system::spinRowChangeEvent((cli::safe_cast<spin_system::spinRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spinDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->spinRowDeleting(this, (gcnew spin_system::spinRowChangeEvent((cli::safe_cast<spin_system::spinRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spinDataTable::RemovespinRow(spin_system::spinRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::spinDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"spinDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::coordinatesDataTable::coordinatesDataTable() {
    this->TableName = L"coordinates";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::coordinatesDataTable::coordinatesDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::coordinatesDataTable::coordinatesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::coordinatesDataTable::xColumn::get() {
    return this->columnx;
}

inline ::System::Data::DataColumn^  spin_system::coordinatesDataTable::yColumn::get() {
    return this->columny;
}

inline ::System::Data::DataColumn^  spin_system::coordinatesDataTable::zColumn::get() {
    return this->columnz;
}

inline ::System::Data::DataColumn^  spin_system::coordinatesDataTable::ve_reference_frame_IDColumn::get() {
    return this->columnve_reference_frame_ID;
}

inline ::System::Data::DataColumn^  spin_system::coordinatesDataTable::spin_IdColumn::get() {
    return this->columnspin_Id;
}

inline ::System::Int32 spin_system::coordinatesDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::coordinatesRow^  spin_system::coordinatesDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::coordinatesRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::coordinatesDataTable::AddcoordinatesRow(spin_system::coordinatesRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::coordinatesRow^  spin_system::coordinatesDataTable::AddcoordinatesRow(System::Double x, System::Double y, 
            System::Double z, System::Int64 ve_reference_frame_ID, spin_system::spinRow^  parentspinRowByspin_coordinates) {
    spin_system::coordinatesRow^  rowcoordinatesRow = (cli::safe_cast<spin_system::coordinatesRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {x, y, z, ve_reference_frame_ID, 
        nullptr};
    if (parentspinRowByspin_coordinates != nullptr) {
        columnValuesArray[4] = parentspinRowByspin_coordinates[3];
    }
    rowcoordinatesRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowcoordinatesRow);
    return rowcoordinatesRow;
}

inline ::System::Collections::IEnumerator^  spin_system::coordinatesDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::coordinatesDataTable::Clone() {
    spin_system::coordinatesDataTable^  cln = (cli::safe_cast<spin_system::coordinatesDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::coordinatesDataTable::CreateInstance() {
    return (gcnew spin_system::coordinatesDataTable());
}

inline ::System::Void spin_system::coordinatesDataTable::InitVars() {
    this->columnx = __super::Columns[L"x"];
    this->columny = __super::Columns[L"y"];
    this->columnz = __super::Columns[L"z"];
    this->columnve_reference_frame_ID = __super::Columns[L"ve_reference_frame_ID"];
    this->columnspin_Id = __super::Columns[L"spin_Id"];
}

inline ::System::Void spin_system::coordinatesDataTable::InitClass() {
    this->columnx = (gcnew ::System::Data::DataColumn(L"x", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnx);
    this->columny = (gcnew ::System::Data::DataColumn(L"y", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columny);
    this->columnz = (gcnew ::System::Data::DataColumn(L"z", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnz);
    this->columnve_reference_frame_ID = (gcnew ::System::Data::DataColumn(L"ve_reference_frame_ID", ::System::Int64::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnve_reference_frame_ID);
    this->columnspin_Id = (gcnew ::System::Data::DataColumn(L"spin_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnspin_Id);
    this->columnx->AllowDBNull = false;
    this->columny->AllowDBNull = false;
    this->columnz->AllowDBNull = false;
    this->columnve_reference_frame_ID->AllowDBNull = false;
}

inline spin_system::coordinatesRow^  spin_system::coordinatesDataTable::NewcoordinatesRow() {
    return (cli::safe_cast<spin_system::coordinatesRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::coordinatesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::coordinatesRow(builder));
}

inline ::System::Type^  spin_system::coordinatesDataTable::GetRowType() {
    return spin_system::coordinatesRow::typeid;
}

inline ::System::Void spin_system::coordinatesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->coordinatesRowChanged(this, (gcnew spin_system::coordinatesRowChangeEvent((cli::safe_cast<spin_system::coordinatesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::coordinatesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->coordinatesRowChanging(this, (gcnew spin_system::coordinatesRowChangeEvent((cli::safe_cast<spin_system::coordinatesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::coordinatesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->coordinatesRowDeleted(this, (gcnew spin_system::coordinatesRowChangeEvent((cli::safe_cast<spin_system::coordinatesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::coordinatesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->coordinatesRowDeleting(this, (gcnew spin_system::coordinatesRowChangeEvent((cli::safe_cast<spin_system::coordinatesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::coordinatesDataTable::RemovecoordinatesRow(spin_system::coordinatesRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::coordinatesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"coordinatesDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::spin_interactionDataTable::spin_interactionDataTable() {
    this->TableName = L"spin_interaction";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::spin_interactionDataTable::spin_interactionDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::spin_interactionDataTable::spin_interactionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::spin_interactionDataTable::kindColumn::get() {
    return this->columnkind;
}

inline ::System::Data::DataColumn^  spin_system::spin_interactionDataTable::unitsColumn::get() {
    return this->columnunits;
}

inline ::System::Data::DataColumn^  spin_system::spin_interactionDataTable::spin_1Column::get() {
    return this->columnspin_1;
}

inline ::System::Data::DataColumn^  spin_system::spin_interactionDataTable::spin_2Column::get() {
    return this->columnspin_2;
}

inline ::System::Data::DataColumn^  spin_system::spin_interactionDataTable::labelColumn::get() {
    return this->columnlabel;
}

inline ::System::Data::DataColumn^  spin_system::spin_interactionDataTable::scalarColumn::get() {
    return this->columnscalar;
}

inline ::System::Data::DataColumn^  spin_system::spin_interactionDataTable::spin_interaction_IdColumn::get() {
    return this->columnspin_interaction_Id;
}

inline ::System::Int32 spin_system::spin_interactionDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::spin_interactionRow^  spin_system::spin_interactionDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::spin_interactionRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::spin_interactionDataTable::Addspin_interactionRow(spin_system::spin_interactionRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::spin_interactionRow^  spin_system::spin_interactionDataTable::Addspin_interactionRow(
            System::String^  kind, 
            System::String^  units, 
            System::Int64 spin_1, 
            System::Int64 spin_2, 
            System::String^  label, 
            System::Double scalar) {
    spin_system::spin_interactionRow^  rowspin_interactionRow = (cli::safe_cast<spin_system::spin_interactionRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {kind, units, spin_1, spin_2, 
        label, scalar, nullptr};
    rowspin_interactionRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowspin_interactionRow);
    return rowspin_interactionRow;
}

inline ::System::Collections::IEnumerator^  spin_system::spin_interactionDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::spin_interactionDataTable::Clone() {
    spin_system::spin_interactionDataTable^  cln = (cli::safe_cast<spin_system::spin_interactionDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::spin_interactionDataTable::CreateInstance() {
    return (gcnew spin_system::spin_interactionDataTable());
}

inline ::System::Void spin_system::spin_interactionDataTable::InitVars() {
    this->columnkind = __super::Columns[L"kind"];
    this->columnunits = __super::Columns[L"units"];
    this->columnspin_1 = __super::Columns[L"spin_1"];
    this->columnspin_2 = __super::Columns[L"spin_2"];
    this->columnlabel = __super::Columns[L"label"];
    this->columnscalar = __super::Columns[L"scalar"];
    this->columnspin_interaction_Id = __super::Columns[L"spin_interaction_Id"];
}

inline ::System::Void spin_system::spin_interactionDataTable::InitClass() {
    this->columnkind = (gcnew ::System::Data::DataColumn(L"kind", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnkind);
    this->columnunits = (gcnew ::System::Data::DataColumn(L"units", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnunits);
    this->columnspin_1 = (gcnew ::System::Data::DataColumn(L"spin_1", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnspin_1);
    this->columnspin_2 = (gcnew ::System::Data::DataColumn(L"spin_2", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnspin_2);
    this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnlabel);
    this->columnscalar = (gcnew ::System::Data::DataColumn(L"scalar", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnscalar);
    this->columnspin_interaction_Id = (gcnew ::System::Data::DataColumn(L"spin_interaction_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnspin_interaction_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnspin_interaction_Id}, 
            true)));
    this->columnkind->AllowDBNull = false;
    this->columnkind->Namespace = L"";
    this->columnunits->AllowDBNull = false;
    this->columnunits->Namespace = L"";
    this->columnspin_1->AllowDBNull = false;
    this->columnspin_1->Namespace = L"";
    this->columnspin_2->Namespace = L"";
    this->columnlabel->Namespace = L"";
    this->columnscalar->AllowDBNull = false;
    this->columnspin_interaction_Id->AutoIncrement = true;
    this->columnspin_interaction_Id->AllowDBNull = false;
    this->columnspin_interaction_Id->Unique = true;
}

inline spin_system::spin_interactionRow^  spin_system::spin_interactionDataTable::Newspin_interactionRow() {
    return (cli::safe_cast<spin_system::spin_interactionRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::spin_interactionDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::spin_interactionRow(builder));
}

inline ::System::Type^  spin_system::spin_interactionDataTable::GetRowType() {
    return spin_system::spin_interactionRow::typeid;
}

inline ::System::Void spin_system::spin_interactionDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->spin_interactionRowChanged(this, (gcnew spin_system::spin_interactionRowChangeEvent((cli::safe_cast<spin_system::spin_interactionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spin_interactionDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->spin_interactionRowChanging(this, (gcnew spin_system::spin_interactionRowChangeEvent((cli::safe_cast<spin_system::spin_interactionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spin_interactionDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->spin_interactionRowDeleted(this, (gcnew spin_system::spin_interactionRowChangeEvent((cli::safe_cast<spin_system::spin_interactionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spin_interactionDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->spin_interactionRowDeleting(this, (gcnew spin_system::spin_interactionRowChangeEvent((cli::safe_cast<spin_system::spin_interactionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spin_interactionDataTable::Removespin_interactionRow(spin_system::spin_interactionRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::spin_interactionDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"spin_interactionDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::tensorDataTable::tensorDataTable() {
    this->TableName = L"tensor";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::tensorDataTable::tensorDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::tensorDataTable::tensorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::xxColumn::get() {
    return this->columnxx;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::xyColumn::get() {
    return this->columnxy;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::xzColumn::get() {
    return this->columnxz;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::yxColumn::get() {
    return this->columnyx;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::yyColumn::get() {
    return this->columnyy;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::yzColumn::get() {
    return this->columnyz;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::zxColumn::get() {
    return this->columnzx;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::zyColumn::get() {
    return this->columnzy;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::zzColumn::get() {
    return this->columnzz;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::reference_frameColumn::get() {
    return this->columnreference_frame;
}

inline ::System::Data::DataColumn^  spin_system::tensorDataTable::spin_interaction_IdColumn::get() {
    return this->columnspin_interaction_Id;
}

inline ::System::Int32 spin_system::tensorDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::tensorRow^  spin_system::tensorDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::tensorRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::tensorDataTable::AddtensorRow(spin_system::tensorRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::tensorRow^  spin_system::tensorDataTable::AddtensorRow(
            System::Double xx, 
            System::Double xy, 
            System::Double xz, 
            System::Double yx, 
            System::Double yy, 
            System::Double yz, 
            System::Double zx, 
            System::Double zy, 
            System::Double zz, 
            System::Int64 reference_frame, 
            spin_system::spin_interactionRow^  parentspin_interactionRowByspin_interaction_tensor) {
    spin_system::tensorRow^  rowtensorRow = (cli::safe_cast<spin_system::tensorRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(11) {xx, xy, xz, yx, yy, yz, 
        zx, zy, zz, reference_frame, nullptr};
    if (parentspin_interactionRowByspin_interaction_tensor != nullptr) {
        columnValuesArray[10] = parentspin_interactionRowByspin_interaction_tensor[6];
    }
    rowtensorRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowtensorRow);
    return rowtensorRow;
}

inline ::System::Collections::IEnumerator^  spin_system::tensorDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::tensorDataTable::Clone() {
    spin_system::tensorDataTable^  cln = (cli::safe_cast<spin_system::tensorDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::tensorDataTable::CreateInstance() {
    return (gcnew spin_system::tensorDataTable());
}

inline ::System::Void spin_system::tensorDataTable::InitVars() {
    this->columnxx = __super::Columns[L"xx"];
    this->columnxy = __super::Columns[L"xy"];
    this->columnxz = __super::Columns[L"xz"];
    this->columnyx = __super::Columns[L"yx"];
    this->columnyy = __super::Columns[L"yy"];
    this->columnyz = __super::Columns[L"yz"];
    this->columnzx = __super::Columns[L"zx"];
    this->columnzy = __super::Columns[L"zy"];
    this->columnzz = __super::Columns[L"zz"];
    this->columnreference_frame = __super::Columns[L"reference_frame"];
    this->columnspin_interaction_Id = __super::Columns[L"spin_interaction_Id"];
}

inline ::System::Void spin_system::tensorDataTable::InitClass() {
    this->columnxx = (gcnew ::System::Data::DataColumn(L"xx", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnxx);
    this->columnxy = (gcnew ::System::Data::DataColumn(L"xy", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnxy);
    this->columnxz = (gcnew ::System::Data::DataColumn(L"xz", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnxz);
    this->columnyx = (gcnew ::System::Data::DataColumn(L"yx", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnyx);
    this->columnyy = (gcnew ::System::Data::DataColumn(L"yy", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnyy);
    this->columnyz = (gcnew ::System::Data::DataColumn(L"yz", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnyz);
    this->columnzx = (gcnew ::System::Data::DataColumn(L"zx", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnzx);
    this->columnzy = (gcnew ::System::Data::DataColumn(L"zy", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnzy);
    this->columnzz = (gcnew ::System::Data::DataColumn(L"zz", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnzz);
    this->columnreference_frame = (gcnew ::System::Data::DataColumn(L"reference_frame", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnreference_frame);
    this->columnspin_interaction_Id = (gcnew ::System::Data::DataColumn(L"spin_interaction_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnspin_interaction_Id);
    this->columnxx->AllowDBNull = false;
    this->columnxx->Namespace = L"";
    this->columnxy->AllowDBNull = false;
    this->columnxy->Namespace = L"";
    this->columnxz->AllowDBNull = false;
    this->columnxz->Namespace = L"";
    this->columnyx->AllowDBNull = false;
    this->columnyx->Namespace = L"";
    this->columnyy->AllowDBNull = false;
    this->columnyy->Namespace = L"";
    this->columnyz->AllowDBNull = false;
    this->columnyz->Namespace = L"";
    this->columnzx->AllowDBNull = false;
    this->columnzx->Namespace = L"";
    this->columnzy->AllowDBNull = false;
    this->columnzy->Namespace = L"";
    this->columnzz->AllowDBNull = false;
    this->columnzz->Namespace = L"";
    this->columnreference_frame->AllowDBNull = false;
    this->columnreference_frame->Namespace = L"";
}

inline spin_system::tensorRow^  spin_system::tensorDataTable::NewtensorRow() {
    return (cli::safe_cast<spin_system::tensorRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::tensorDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::tensorRow(builder));
}

inline ::System::Type^  spin_system::tensorDataTable::GetRowType() {
    return spin_system::tensorRow::typeid;
}

inline ::System::Void spin_system::tensorDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->tensorRowChanged(this, (gcnew spin_system::tensorRowChangeEvent((cli::safe_cast<spin_system::tensorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::tensorDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->tensorRowChanging(this, (gcnew spin_system::tensorRowChangeEvent((cli::safe_cast<spin_system::tensorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::tensorDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->tensorRowDeleted(this, (gcnew spin_system::tensorRowChangeEvent((cli::safe_cast<spin_system::tensorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::tensorDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->tensorRowDeleting(this, (gcnew spin_system::tensorRowChangeEvent((cli::safe_cast<spin_system::tensorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::tensorDataTable::RemovetensorRow(spin_system::tensorRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::tensorDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"tensorDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::eigenvaluesDataTable::eigenvaluesDataTable() {
    this->TableName = L"eigenvalues";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::eigenvaluesDataTable::eigenvaluesDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::eigenvaluesDataTable::eigenvaluesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::eigenvaluesDataTable::XXColumn::get() {
    return this->columnXX;
}

inline ::System::Data::DataColumn^  spin_system::eigenvaluesDataTable::YYColumn::get() {
    return this->columnYY;
}

inline ::System::Data::DataColumn^  spin_system::eigenvaluesDataTable::ZZColumn::get() {
    return this->columnZZ;
}

inline ::System::Data::DataColumn^  spin_system::eigenvaluesDataTable::spin_interaction_IdColumn::get() {
    return this->columnspin_interaction_Id;
}

inline ::System::Int32 spin_system::eigenvaluesDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::eigenvaluesRow^  spin_system::eigenvaluesDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::eigenvaluesRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::eigenvaluesDataTable::AddeigenvaluesRow(spin_system::eigenvaluesRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::eigenvaluesRow^  spin_system::eigenvaluesDataTable::AddeigenvaluesRow(System::Double XX, System::Double YY, 
            System::Double ZZ, spin_system::spin_interactionRow^  parentspin_interactionRowByspin_interaction_eigenvalues) {
    spin_system::eigenvaluesRow^  roweigenvaluesRow = (cli::safe_cast<spin_system::eigenvaluesRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {XX, YY, ZZ, nullptr};
    if (parentspin_interactionRowByspin_interaction_eigenvalues != nullptr) {
        columnValuesArray[3] = parentspin_interactionRowByspin_interaction_eigenvalues[6];
    }
    roweigenvaluesRow->ItemArray = columnValuesArray;
    this->Rows->Add(roweigenvaluesRow);
    return roweigenvaluesRow;
}

inline ::System::Collections::IEnumerator^  spin_system::eigenvaluesDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::eigenvaluesDataTable::Clone() {
    spin_system::eigenvaluesDataTable^  cln = (cli::safe_cast<spin_system::eigenvaluesDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::eigenvaluesDataTable::CreateInstance() {
    return (gcnew spin_system::eigenvaluesDataTable());
}

inline ::System::Void spin_system::eigenvaluesDataTable::InitVars() {
    this->columnXX = __super::Columns[L"XX"];
    this->columnYY = __super::Columns[L"YY"];
    this->columnZZ = __super::Columns[L"ZZ"];
    this->columnspin_interaction_Id = __super::Columns[L"spin_interaction_Id"];
}

inline ::System::Void spin_system::eigenvaluesDataTable::InitClass() {
    this->columnXX = (gcnew ::System::Data::DataColumn(L"XX", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnXX);
    this->columnYY = (gcnew ::System::Data::DataColumn(L"YY", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnYY);
    this->columnZZ = (gcnew ::System::Data::DataColumn(L"ZZ", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnZZ);
    this->columnspin_interaction_Id = (gcnew ::System::Data::DataColumn(L"spin_interaction_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnspin_interaction_Id);
    this->columnXX->AllowDBNull = false;
    this->columnXX->Namespace = L"";
    this->columnYY->AllowDBNull = false;
    this->columnYY->Namespace = L"";
    this->columnZZ->AllowDBNull = false;
    this->columnZZ->Namespace = L"";
}

inline spin_system::eigenvaluesRow^  spin_system::eigenvaluesDataTable::NeweigenvaluesRow() {
    return (cli::safe_cast<spin_system::eigenvaluesRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::eigenvaluesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::eigenvaluesRow(builder));
}

inline ::System::Type^  spin_system::eigenvaluesDataTable::GetRowType() {
    return spin_system::eigenvaluesRow::typeid;
}

inline ::System::Void spin_system::eigenvaluesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->eigenvaluesRowChanged(this, (gcnew spin_system::eigenvaluesRowChangeEvent((cli::safe_cast<spin_system::eigenvaluesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::eigenvaluesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->eigenvaluesRowChanging(this, (gcnew spin_system::eigenvaluesRowChangeEvent((cli::safe_cast<spin_system::eigenvaluesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::eigenvaluesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->eigenvaluesRowDeleted(this, (gcnew spin_system::eigenvaluesRowChangeEvent((cli::safe_cast<spin_system::eigenvaluesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::eigenvaluesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->eigenvaluesRowDeleting(this, (gcnew spin_system::eigenvaluesRowChangeEvent((cli::safe_cast<spin_system::eigenvaluesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::eigenvaluesDataTable::RemoveeigenvaluesRow(spin_system::eigenvaluesRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::eigenvaluesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"eigenvaluesDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::axiality_rhombicityDataTable::axiality_rhombicityDataTable() {
    this->TableName = L"axiality_rhombicity";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::axiality_rhombicityDataTable::axiality_rhombicityDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::axiality_rhombicityDataTable::axiality_rhombicityDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::axiality_rhombicityDataTable::isoColumn::get() {
    return this->columniso;
}

inline ::System::Data::DataColumn^  spin_system::axiality_rhombicityDataTable::axColumn::get() {
    return this->columnax;
}

inline ::System::Data::DataColumn^  spin_system::axiality_rhombicityDataTable::rhColumn::get() {
    return this->columnrh;
}

inline ::System::Data::DataColumn^  spin_system::axiality_rhombicityDataTable::spin_interaction_IdColumn::get() {
    return this->columnspin_interaction_Id;
}

inline ::System::Int32 spin_system::axiality_rhombicityDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::axiality_rhombicityRow^  spin_system::axiality_rhombicityDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::axiality_rhombicityRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::Addaxiality_rhombicityRow(spin_system::axiality_rhombicityRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::axiality_rhombicityRow^  spin_system::axiality_rhombicityDataTable::Addaxiality_rhombicityRow(System::Double iso, 
            System::Double ax, System::Double rh, spin_system::spin_interactionRow^  parentspin_interactionRowByspin_interaction_axiality_rhombicity) {
    spin_system::axiality_rhombicityRow^  rowaxiality_rhombicityRow = (cli::safe_cast<spin_system::axiality_rhombicityRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {iso, ax, rh, nullptr};
    if (parentspin_interactionRowByspin_interaction_axiality_rhombicity != nullptr) {
        columnValuesArray[3] = parentspin_interactionRowByspin_interaction_axiality_rhombicity[6];
    }
    rowaxiality_rhombicityRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowaxiality_rhombicityRow);
    return rowaxiality_rhombicityRow;
}

inline ::System::Collections::IEnumerator^  spin_system::axiality_rhombicityDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::axiality_rhombicityDataTable::Clone() {
    spin_system::axiality_rhombicityDataTable^  cln = (cli::safe_cast<spin_system::axiality_rhombicityDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::axiality_rhombicityDataTable::CreateInstance() {
    return (gcnew spin_system::axiality_rhombicityDataTable());
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::InitVars() {
    this->columniso = __super::Columns[L"iso"];
    this->columnax = __super::Columns[L"ax"];
    this->columnrh = __super::Columns[L"rh"];
    this->columnspin_interaction_Id = __super::Columns[L"spin_interaction_Id"];
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::InitClass() {
    this->columniso = (gcnew ::System::Data::DataColumn(L"iso", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columniso);
    this->columnax = (gcnew ::System::Data::DataColumn(L"ax", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnax);
    this->columnrh = (gcnew ::System::Data::DataColumn(L"rh", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnrh);
    this->columnspin_interaction_Id = (gcnew ::System::Data::DataColumn(L"spin_interaction_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnspin_interaction_Id);
    this->columniso->AllowDBNull = false;
    this->columniso->Namespace = L"";
    this->columnax->AllowDBNull = false;
    this->columnax->Namespace = L"";
    this->columnrh->AllowDBNull = false;
    this->columnrh->Namespace = L"";
}

inline spin_system::axiality_rhombicityRow^  spin_system::axiality_rhombicityDataTable::Newaxiality_rhombicityRow() {
    return (cli::safe_cast<spin_system::axiality_rhombicityRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::axiality_rhombicityDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::axiality_rhombicityRow(builder));
}

inline ::System::Type^  spin_system::axiality_rhombicityDataTable::GetRowType() {
    return spin_system::axiality_rhombicityRow::typeid;
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->axiality_rhombicityRowChanged(this, (gcnew spin_system::axiality_rhombicityRowChangeEvent((cli::safe_cast<spin_system::axiality_rhombicityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->axiality_rhombicityRowChanging(this, (gcnew spin_system::axiality_rhombicityRowChangeEvent((cli::safe_cast<spin_system::axiality_rhombicityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->axiality_rhombicityRowDeleted(this, (gcnew spin_system::axiality_rhombicityRowChangeEvent((cli::safe_cast<spin_system::axiality_rhombicityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->axiality_rhombicityRowDeleting(this, (gcnew spin_system::axiality_rhombicityRowChangeEvent((cli::safe_cast<spin_system::axiality_rhombicityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axiality_rhombicityDataTable::Removeaxiality_rhombicityRow(spin_system::axiality_rhombicityRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::axiality_rhombicityDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"axiality_rhombicityDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::span_skewDataTable::span_skewDataTable() {
    this->TableName = L"span_skew";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::span_skewDataTable::span_skewDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::span_skewDataTable::span_skewDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::span_skewDataTable::isoColumn::get() {
    return this->columniso;
}

inline ::System::Data::DataColumn^  spin_system::span_skewDataTable::spanColumn::get() {
    return this->columnspan;
}

inline ::System::Data::DataColumn^  spin_system::span_skewDataTable::skewColumn::get() {
    return this->columnskew;
}

inline ::System::Data::DataColumn^  spin_system::span_skewDataTable::spin_interaction_IdColumn::get() {
    return this->columnspin_interaction_Id;
}

inline ::System::Int32 spin_system::span_skewDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::span_skewRow^  spin_system::span_skewDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::span_skewRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::span_skewDataTable::Addspan_skewRow(spin_system::span_skewRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::span_skewRow^  spin_system::span_skewDataTable::Addspan_skewRow(System::Double iso, System::Double span, 
            System::Double skew, spin_system::spin_interactionRow^  parentspin_interactionRowByspin_interaction_span_skew) {
    spin_system::span_skewRow^  rowspan_skewRow = (cli::safe_cast<spin_system::span_skewRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {iso, span, skew, nullptr};
    if (parentspin_interactionRowByspin_interaction_span_skew != nullptr) {
        columnValuesArray[3] = parentspin_interactionRowByspin_interaction_span_skew[6];
    }
    rowspan_skewRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowspan_skewRow);
    return rowspan_skewRow;
}

inline ::System::Collections::IEnumerator^  spin_system::span_skewDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::span_skewDataTable::Clone() {
    spin_system::span_skewDataTable^  cln = (cli::safe_cast<spin_system::span_skewDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::span_skewDataTable::CreateInstance() {
    return (gcnew spin_system::span_skewDataTable());
}

inline ::System::Void spin_system::span_skewDataTable::InitVars() {
    this->columniso = __super::Columns[L"iso"];
    this->columnspan = __super::Columns[L"span"];
    this->columnskew = __super::Columns[L"skew"];
    this->columnspin_interaction_Id = __super::Columns[L"spin_interaction_Id"];
}

inline ::System::Void spin_system::span_skewDataTable::InitClass() {
    this->columniso = (gcnew ::System::Data::DataColumn(L"iso", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columniso);
    this->columnspan = (gcnew ::System::Data::DataColumn(L"span", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnspan);
    this->columnskew = (gcnew ::System::Data::DataColumn(L"skew", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnskew);
    this->columnspin_interaction_Id = (gcnew ::System::Data::DataColumn(L"spin_interaction_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnspin_interaction_Id);
    this->columniso->AllowDBNull = false;
    this->columniso->Namespace = L"";
    this->columnspan->AllowDBNull = false;
    this->columnspan->Namespace = L"";
    this->columnskew->AllowDBNull = false;
    this->columnskew->Namespace = L"";
}

inline spin_system::span_skewRow^  spin_system::span_skewDataTable::Newspan_skewRow() {
    return (cli::safe_cast<spin_system::span_skewRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::span_skewDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::span_skewRow(builder));
}

inline ::System::Type^  spin_system::span_skewDataTable::GetRowType() {
    return spin_system::span_skewRow::typeid;
}

inline ::System::Void spin_system::span_skewDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->span_skewRowChanged(this, (gcnew spin_system::span_skewRowChangeEvent((cli::safe_cast<spin_system::span_skewRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::span_skewDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->span_skewRowChanging(this, (gcnew spin_system::span_skewRowChangeEvent((cli::safe_cast<spin_system::span_skewRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::span_skewDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->span_skewRowDeleted(this, (gcnew spin_system::span_skewRowChangeEvent((cli::safe_cast<spin_system::span_skewRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::span_skewDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->span_skewRowDeleting(this, (gcnew spin_system::span_skewRowChangeEvent((cli::safe_cast<spin_system::span_skewRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::span_skewDataTable::Removespan_skewRow(spin_system::span_skewRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::span_skewDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"span_skewDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::inter_orientationDataTable::inter_orientationDataTable() {
    this->TableName = L"inter_orientation";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::inter_orientationDataTable::inter_orientationDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::inter_orientationDataTable::inter_orientationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::inter_orientationDataTable::alphaColumn::get() {
    return this->columnalpha;
}

inline ::System::Data::DataColumn^  spin_system::inter_orientationDataTable::betaColumn::get() {
    return this->columnbeta;
}

inline ::System::Data::DataColumn^  spin_system::inter_orientationDataTable::gammaColumn::get() {
    return this->columngamma;
}

inline ::System::Data::DataColumn^  spin_system::inter_orientationDataTable::eu_reference_frame_IDColumn::get() {
    return this->columneu_reference_frame_ID;
}

inline ::System::Data::DataColumn^  spin_system::inter_orientationDataTable::angleColumn::get() {
    return this->columnangle;
}

inline ::System::Data::DataColumn^  spin_system::inter_orientationDataTable::reColumn::get() {
    return this->columnre;
}

inline ::System::Data::DataColumn^  spin_system::inter_orientationDataTable::iColumn::get() {
    return this->columni;
}

inline ::System::Data::DataColumn^  spin_system::inter_orientationDataTable::jColumn::get() {
    return this->columnj;
}

inline ::System::Data::DataColumn^  spin_system::inter_orientationDataTable::kColumn::get() {
    return this->columnk;
}

inline ::System::Data::DataColumn^  spin_system::inter_orientationDataTable::quar_reference_frame_IDColumn::get() {
    return this->columnquar_reference_frame_ID;
}

inline ::System::Data::DataColumn^  spin_system::inter_orientationDataTable::inter_orientation_IdColumn::get() {
    return this->columninter_orientation_Id;
}

inline ::System::Data::DataColumn^  spin_system::inter_orientationDataTable::spin_interaction_IdColumn::get() {
    return this->columnspin_interaction_Id;
}

inline ::System::Int32 spin_system::inter_orientationDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::inter_orientationRow^  spin_system::inter_orientationDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::inter_orientationRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::inter_orientationDataTable::Addinter_orientationRow(spin_system::inter_orientationRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::inter_orientationRow^  spin_system::inter_orientationDataTable::Addinter_orientationRow(
            System::Double alpha, 
            System::Double beta, 
            System::Double gamma, 
            System::Int64 eu_reference_frame_ID, 
            System::Double angle, 
            System::Double re, 
            System::Double i, 
            System::Double j, 
            System::Double k, 
            System::Int64 quar_reference_frame_ID, 
            spin_system::spin_interactionRow^  parentspin_interactionRowByspin_interaction_inter_orientation) {
    spin_system::inter_orientationRow^  rowinter_orientationRow = (cli::safe_cast<spin_system::inter_orientationRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(12) {alpha, beta, gamma, eu_reference_frame_ID, 
        angle, re, i, j, k, quar_reference_frame_ID, nullptr, nullptr};
    if (parentspin_interactionRowByspin_interaction_inter_orientation != nullptr) {
        columnValuesArray[11] = parentspin_interactionRowByspin_interaction_inter_orientation[6];
    }
    rowinter_orientationRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowinter_orientationRow);
    return rowinter_orientationRow;
}

inline ::System::Collections::IEnumerator^  spin_system::inter_orientationDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::inter_orientationDataTable::Clone() {
    spin_system::inter_orientationDataTable^  cln = (cli::safe_cast<spin_system::inter_orientationDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::inter_orientationDataTable::CreateInstance() {
    return (gcnew spin_system::inter_orientationDataTable());
}

inline ::System::Void spin_system::inter_orientationDataTable::InitVars() {
    this->columnalpha = __super::Columns[L"alpha"];
    this->columnbeta = __super::Columns[L"beta"];
    this->columngamma = __super::Columns[L"gamma"];
    this->columneu_reference_frame_ID = __super::Columns[L"eu_reference_frame_ID"];
    this->columnangle = __super::Columns[L"angle"];
    this->columnre = __super::Columns[L"re"];
    this->columni = __super::Columns[L"i"];
    this->columnj = __super::Columns[L"j"];
    this->columnk = __super::Columns[L"k"];
    this->columnquar_reference_frame_ID = __super::Columns[L"quar_reference_frame_ID"];
    this->columninter_orientation_Id = __super::Columns[L"inter_orientation_Id"];
    this->columnspin_interaction_Id = __super::Columns[L"spin_interaction_Id"];
}

inline ::System::Void spin_system::inter_orientationDataTable::InitClass() {
    this->columnalpha = (gcnew ::System::Data::DataColumn(L"alpha", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnalpha);
    this->columnbeta = (gcnew ::System::Data::DataColumn(L"beta", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnbeta);
    this->columngamma = (gcnew ::System::Data::DataColumn(L"gamma", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columngamma);
    this->columneu_reference_frame_ID = (gcnew ::System::Data::DataColumn(L"eu_reference_frame_ID", ::System::Int64::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columneu_reference_frame_ID);
    this->columnangle = (gcnew ::System::Data::DataColumn(L"angle", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnangle);
    this->columnre = (gcnew ::System::Data::DataColumn(L"re", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnre);
    this->columni = (gcnew ::System::Data::DataColumn(L"i", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columni);
    this->columnj = (gcnew ::System::Data::DataColumn(L"j", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnj);
    this->columnk = (gcnew ::System::Data::DataColumn(L"k", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnk);
    this->columnquar_reference_frame_ID = (gcnew ::System::Data::DataColumn(L"quar_reference_frame_ID", ::System::Int64::typeid, 
        nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnquar_reference_frame_ID);
    this->columninter_orientation_Id = (gcnew ::System::Data::DataColumn(L"inter_orientation_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columninter_orientation_Id);
    this->columnspin_interaction_Id = (gcnew ::System::Data::DataColumn(L"spin_interaction_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnspin_interaction_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columninter_orientation_Id}, 
            true)));
    this->columnalpha->AllowDBNull = false;
    this->columnbeta->AllowDBNull = false;
    this->columngamma->AllowDBNull = false;
    this->columneu_reference_frame_ID->AllowDBNull = false;
    this->columnangle->AllowDBNull = false;
    this->columnre->AllowDBNull = false;
    this->columni->AllowDBNull = false;
    this->columnj->AllowDBNull = false;
    this->columnk->AllowDBNull = false;
    this->columnquar_reference_frame_ID->AllowDBNull = false;
    this->columninter_orientation_Id->AutoIncrement = true;
    this->columninter_orientation_Id->AllowDBNull = false;
    this->columninter_orientation_Id->Unique = true;
}

inline spin_system::inter_orientationRow^  spin_system::inter_orientationDataTable::Newinter_orientationRow() {
    return (cli::safe_cast<spin_system::inter_orientationRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::inter_orientationDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::inter_orientationRow(builder));
}

inline ::System::Type^  spin_system::inter_orientationDataTable::GetRowType() {
    return spin_system::inter_orientationRow::typeid;
}

inline ::System::Void spin_system::inter_orientationDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->inter_orientationRowChanged(this, (gcnew spin_system::inter_orientationRowChangeEvent((cli::safe_cast<spin_system::inter_orientationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::inter_orientationDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->inter_orientationRowChanging(this, (gcnew spin_system::inter_orientationRowChangeEvent((cli::safe_cast<spin_system::inter_orientationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::inter_orientationDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->inter_orientationRowDeleted(this, (gcnew spin_system::inter_orientationRowChangeEvent((cli::safe_cast<spin_system::inter_orientationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::inter_orientationDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->inter_orientationRowDeleting(this, (gcnew spin_system::inter_orientationRowChangeEvent((cli::safe_cast<spin_system::inter_orientationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::inter_orientationDataTable::Removeinter_orientationRow(spin_system::inter_orientationRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::inter_orientationDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"inter_orientationDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::axisDataTable::axisDataTable() {
    this->TableName = L"axis";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::axisDataTable::axisDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::axisDataTable::axisDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::axisDataTable::xColumn::get() {
    return this->columnx;
}

inline ::System::Data::DataColumn^  spin_system::axisDataTable::yColumn::get() {
    return this->columny;
}

inline ::System::Data::DataColumn^  spin_system::axisDataTable::zColumn::get() {
    return this->columnz;
}

inline ::System::Data::DataColumn^  spin_system::axisDataTable::ve_reference_frame_IDColumn::get() {
    return this->columnve_reference_frame_ID;
}

inline ::System::Data::DataColumn^  spin_system::axisDataTable::inter_orientation_IdColumn::get() {
    return this->columninter_orientation_Id;
}

inline ::System::Data::DataColumn^  spin_system::axisDataTable::ref_orientation_IdColumn::get() {
    return this->columnref_orientation_Id;
}

inline ::System::Int32 spin_system::axisDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::axisRow^  spin_system::axisDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::axisRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::axisDataTable::AddaxisRow(spin_system::axisRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::axisRow^  spin_system::axisDataTable::AddaxisRow(
            System::Double x, 
            System::Double y, 
            System::Double z, 
            System::Int64 ve_reference_frame_ID, 
            spin_system::inter_orientationRow^  parentinter_orientationRowByinter_orientation_axis, 
            spin_system::ref_orientationRow^  parentref_orientationRowByref_orientation_axis) {
    spin_system::axisRow^  rowaxisRow = (cli::safe_cast<spin_system::axisRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {x, y, z, ve_reference_frame_ID, 
        nullptr, nullptr};
    if (parentinter_orientationRowByinter_orientation_axis != nullptr) {
        columnValuesArray[4] = parentinter_orientationRowByinter_orientation_axis[10];
    }
    if (parentref_orientationRowByref_orientation_axis != nullptr) {
        columnValuesArray[5] = parentref_orientationRowByref_orientation_axis[10];
    }
    rowaxisRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowaxisRow);
    return rowaxisRow;
}

inline ::System::Collections::IEnumerator^  spin_system::axisDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::axisDataTable::Clone() {
    spin_system::axisDataTable^  cln = (cli::safe_cast<spin_system::axisDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::axisDataTable::CreateInstance() {
    return (gcnew spin_system::axisDataTable());
}

inline ::System::Void spin_system::axisDataTable::InitVars() {
    this->columnx = __super::Columns[L"x"];
    this->columny = __super::Columns[L"y"];
    this->columnz = __super::Columns[L"z"];
    this->columnve_reference_frame_ID = __super::Columns[L"ve_reference_frame_ID"];
    this->columninter_orientation_Id = __super::Columns[L"inter_orientation_Id"];
    this->columnref_orientation_Id = __super::Columns[L"ref_orientation_Id"];
}

inline ::System::Void spin_system::axisDataTable::InitClass() {
    this->columnx = (gcnew ::System::Data::DataColumn(L"x", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnx);
    this->columny = (gcnew ::System::Data::DataColumn(L"y", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columny);
    this->columnz = (gcnew ::System::Data::DataColumn(L"z", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnz);
    this->columnve_reference_frame_ID = (gcnew ::System::Data::DataColumn(L"ve_reference_frame_ID", ::System::Int64::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnve_reference_frame_ID);
    this->columninter_orientation_Id = (gcnew ::System::Data::DataColumn(L"inter_orientation_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columninter_orientation_Id);
    this->columnref_orientation_Id = (gcnew ::System::Data::DataColumn(L"ref_orientation_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnref_orientation_Id);
    this->columnx->AllowDBNull = false;
    this->columny->AllowDBNull = false;
    this->columnz->AllowDBNull = false;
    this->columnve_reference_frame_ID->AllowDBNull = false;
}

inline spin_system::axisRow^  spin_system::axisDataTable::NewaxisRow() {
    return (cli::safe_cast<spin_system::axisRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::axisDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::axisRow(builder));
}

inline ::System::Type^  spin_system::axisDataTable::GetRowType() {
    return spin_system::axisRow::typeid;
}

inline ::System::Void spin_system::axisDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->axisRowChanged(this, (gcnew spin_system::axisRowChangeEvent((cli::safe_cast<spin_system::axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axisDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->axisRowChanging(this, (gcnew spin_system::axisRowChangeEvent((cli::safe_cast<spin_system::axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axisDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->axisRowDeleted(this, (gcnew spin_system::axisRowChangeEvent((cli::safe_cast<spin_system::axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axisDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->axisRowDeleting(this, (gcnew spin_system::axisRowChangeEvent((cli::safe_cast<spin_system::axisRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::axisDataTable::RemoveaxisRow(spin_system::axisRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::axisDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"axisDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::spin_reference_frameDataTable::spin_reference_frameDataTable() {
    this->TableName = L"spin_reference_frame";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::spin_reference_frameDataTable::spin_reference_frameDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::spin_reference_frameDataTable::spin_reference_frameDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::spin_reference_frameDataTable::numberColumn::get() {
    return this->columnnumber;
}

inline ::System::Data::DataColumn^  spin_system::spin_reference_frameDataTable::labelColumn::get() {
    return this->columnlabel;
}

inline ::System::Data::DataColumn^  spin_system::spin_reference_frameDataTable::xColumn::get() {
    return this->columnx;
}

inline ::System::Data::DataColumn^  spin_system::spin_reference_frameDataTable::yColumn::get() {
    return this->columny;
}

inline ::System::Data::DataColumn^  spin_system::spin_reference_frameDataTable::zColumn::get() {
    return this->columnz;
}

inline ::System::Data::DataColumn^  spin_system::spin_reference_frameDataTable::ve_reference_frame_IDColumn::get() {
    return this->columnve_reference_frame_ID;
}

inline ::System::Data::DataColumn^  spin_system::spin_reference_frameDataTable::spin_reference_frame_IdColumn::get() {
    return this->columnspin_reference_frame_Id;
}

inline ::System::Int32 spin_system::spin_reference_frameDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::spin_reference_frameRow^  spin_system::spin_reference_frameDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::spin_reference_frameRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::spin_reference_frameDataTable::Addspin_reference_frameRow(spin_system::spin_reference_frameRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::spin_reference_frameRow^  spin_system::spin_reference_frameDataTable::Addspin_reference_frameRow(
            System::Int64 number, 
            System::String^  label, 
            System::Double x, 
            System::Double y, 
            System::Double z, 
            System::Int64 ve_reference_frame_ID) {
    spin_system::spin_reference_frameRow^  rowspin_reference_frameRow = (cli::safe_cast<spin_system::spin_reference_frameRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {number, label, x, y, z, 
        ve_reference_frame_ID, nullptr};
    rowspin_reference_frameRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowspin_reference_frameRow);
    return rowspin_reference_frameRow;
}

inline ::System::Collections::IEnumerator^  spin_system::spin_reference_frameDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::spin_reference_frameDataTable::Clone() {
    spin_system::spin_reference_frameDataTable^  cln = (cli::safe_cast<spin_system::spin_reference_frameDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::spin_reference_frameDataTable::CreateInstance() {
    return (gcnew spin_system::spin_reference_frameDataTable());
}

inline ::System::Void spin_system::spin_reference_frameDataTable::InitVars() {
    this->columnnumber = __super::Columns[L"number"];
    this->columnlabel = __super::Columns[L"label"];
    this->columnx = __super::Columns[L"x"];
    this->columny = __super::Columns[L"y"];
    this->columnz = __super::Columns[L"z"];
    this->columnve_reference_frame_ID = __super::Columns[L"ve_reference_frame_ID"];
    this->columnspin_reference_frame_Id = __super::Columns[L"spin_reference_frame_Id"];
}

inline ::System::Void spin_system::spin_reference_frameDataTable::InitClass() {
    this->columnnumber = (gcnew ::System::Data::DataColumn(L"number", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnnumber);
    this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnlabel);
    this->columnx = (gcnew ::System::Data::DataColumn(L"x", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnx);
    this->columny = (gcnew ::System::Data::DataColumn(L"y", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columny);
    this->columnz = (gcnew ::System::Data::DataColumn(L"z", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnz);
    this->columnve_reference_frame_ID = (gcnew ::System::Data::DataColumn(L"ve_reference_frame_ID", ::System::Int64::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnve_reference_frame_ID);
    this->columnspin_reference_frame_Id = (gcnew ::System::Data::DataColumn(L"spin_reference_frame_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnspin_reference_frame_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnspin_reference_frame_Id}, 
            true)));
    this->columnnumber->AllowDBNull = false;
    this->columnnumber->Namespace = L"";
    this->columnlabel->AllowDBNull = false;
    this->columnlabel->Namespace = L"";
    this->columnx->AllowDBNull = false;
    this->columny->AllowDBNull = false;
    this->columnz->AllowDBNull = false;
    this->columnve_reference_frame_ID->AllowDBNull = false;
    this->columnspin_reference_frame_Id->AutoIncrement = true;
    this->columnspin_reference_frame_Id->AllowDBNull = false;
    this->columnspin_reference_frame_Id->Unique = true;
}

inline spin_system::spin_reference_frameRow^  spin_system::spin_reference_frameDataTable::Newspin_reference_frameRow() {
    return (cli::safe_cast<spin_system::spin_reference_frameRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::spin_reference_frameDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::spin_reference_frameRow(builder));
}

inline ::System::Type^  spin_system::spin_reference_frameDataTable::GetRowType() {
    return spin_system::spin_reference_frameRow::typeid;
}

inline ::System::Void spin_system::spin_reference_frameDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->spin_reference_frameRowChanged(this, (gcnew spin_system::spin_reference_frameRowChangeEvent((cli::safe_cast<spin_system::spin_reference_frameRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spin_reference_frameDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->spin_reference_frameRowChanging(this, (gcnew spin_system::spin_reference_frameRowChangeEvent((cli::safe_cast<spin_system::spin_reference_frameRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spin_reference_frameDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->spin_reference_frameRowDeleted(this, (gcnew spin_system::spin_reference_frameRowChangeEvent((cli::safe_cast<spin_system::spin_reference_frameRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spin_reference_frameDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->spin_reference_frameRowDeleting(this, (gcnew spin_system::spin_reference_frameRowChangeEvent((cli::safe_cast<spin_system::spin_reference_frameRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::spin_reference_frameDataTable::Removespin_reference_frameRow(spin_system::spin_reference_frameRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::spin_reference_frameDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"spin_reference_frameDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::ref_orientationDataTable::ref_orientationDataTable() {
    this->TableName = L"ref_orientation";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline spin_system::ref_orientationDataTable::ref_orientationDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline spin_system::ref_orientationDataTable::ref_orientationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  spin_system::ref_orientationDataTable::alphaColumn::get() {
    return this->columnalpha;
}

inline ::System::Data::DataColumn^  spin_system::ref_orientationDataTable::betaColumn::get() {
    return this->columnbeta;
}

inline ::System::Data::DataColumn^  spin_system::ref_orientationDataTable::gammaColumn::get() {
    return this->columngamma;
}

inline ::System::Data::DataColumn^  spin_system::ref_orientationDataTable::eu_reference_frame_IDColumn::get() {
    return this->columneu_reference_frame_ID;
}

inline ::System::Data::DataColumn^  spin_system::ref_orientationDataTable::angleColumn::get() {
    return this->columnangle;
}

inline ::System::Data::DataColumn^  spin_system::ref_orientationDataTable::reColumn::get() {
    return this->columnre;
}

inline ::System::Data::DataColumn^  spin_system::ref_orientationDataTable::iColumn::get() {
    return this->columni;
}

inline ::System::Data::DataColumn^  spin_system::ref_orientationDataTable::jColumn::get() {
    return this->columnj;
}

inline ::System::Data::DataColumn^  spin_system::ref_orientationDataTable::kColumn::get() {
    return this->columnk;
}

inline ::System::Data::DataColumn^  spin_system::ref_orientationDataTable::quar_reference_frame_IDColumn::get() {
    return this->columnquar_reference_frame_ID;
}

inline ::System::Data::DataColumn^  spin_system::ref_orientationDataTable::ref_orientation_IdColumn::get() {
    return this->columnref_orientation_Id;
}

inline ::System::Data::DataColumn^  spin_system::ref_orientationDataTable::spin_reference_frame_IdColumn::get() {
    return this->columnspin_reference_frame_Id;
}

inline ::System::Int32 spin_system::ref_orientationDataTable::Count::get() {
    return this->Rows->Count;
}

inline spin_system::ref_orientationRow^  spin_system::ref_orientationDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<spin_system::ref_orientationRow^  >(this->Rows[index]));
}

inline ::System::Void spin_system::ref_orientationDataTable::Addref_orientationRow(spin_system::ref_orientationRow^  row) {
    this->Rows->Add(row);
}

inline spin_system::ref_orientationRow^  spin_system::ref_orientationDataTable::Addref_orientationRow(
            System::Double alpha, 
            System::Double beta, 
            System::Double gamma, 
            System::Int64 eu_reference_frame_ID, 
            System::Double angle, 
            System::Double re, 
            System::Double i, 
            System::Double j, 
            System::Double k, 
            System::Int64 quar_reference_frame_ID, 
            spin_system::spin_reference_frameRow^  parentspin_reference_frameRowByspin_reference_frame_ref_orientation) {
    spin_system::ref_orientationRow^  rowref_orientationRow = (cli::safe_cast<spin_system::ref_orientationRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(12) {alpha, beta, gamma, eu_reference_frame_ID, 
        angle, re, i, j, k, quar_reference_frame_ID, nullptr, nullptr};
    if (parentspin_reference_frameRowByspin_reference_frame_ref_orientation != nullptr) {
        columnValuesArray[11] = parentspin_reference_frameRowByspin_reference_frame_ref_orientation[6];
    }
    rowref_orientationRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowref_orientationRow);
    return rowref_orientationRow;
}

inline ::System::Collections::IEnumerator^  spin_system::ref_orientationDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  spin_system::ref_orientationDataTable::Clone() {
    spin_system::ref_orientationDataTable^  cln = (cli::safe_cast<spin_system::ref_orientationDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  spin_system::ref_orientationDataTable::CreateInstance() {
    return (gcnew spin_system::ref_orientationDataTable());
}

inline ::System::Void spin_system::ref_orientationDataTable::InitVars() {
    this->columnalpha = __super::Columns[L"alpha"];
    this->columnbeta = __super::Columns[L"beta"];
    this->columngamma = __super::Columns[L"gamma"];
    this->columneu_reference_frame_ID = __super::Columns[L"eu_reference_frame_ID"];
    this->columnangle = __super::Columns[L"angle"];
    this->columnre = __super::Columns[L"re"];
    this->columni = __super::Columns[L"i"];
    this->columnj = __super::Columns[L"j"];
    this->columnk = __super::Columns[L"k"];
    this->columnquar_reference_frame_ID = __super::Columns[L"quar_reference_frame_ID"];
    this->columnref_orientation_Id = __super::Columns[L"ref_orientation_Id"];
    this->columnspin_reference_frame_Id = __super::Columns[L"spin_reference_frame_Id"];
}

inline ::System::Void spin_system::ref_orientationDataTable::InitClass() {
    this->columnalpha = (gcnew ::System::Data::DataColumn(L"alpha", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnalpha);
    this->columnbeta = (gcnew ::System::Data::DataColumn(L"beta", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnbeta);
    this->columngamma = (gcnew ::System::Data::DataColumn(L"gamma", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columngamma);
    this->columneu_reference_frame_ID = (gcnew ::System::Data::DataColumn(L"eu_reference_frame_ID", ::System::Int64::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columneu_reference_frame_ID);
    this->columnangle = (gcnew ::System::Data::DataColumn(L"angle", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnangle);
    this->columnre = (gcnew ::System::Data::DataColumn(L"re", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnre);
    this->columni = (gcnew ::System::Data::DataColumn(L"i", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columni);
    this->columnj = (gcnew ::System::Data::DataColumn(L"j", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnj);
    this->columnk = (gcnew ::System::Data::DataColumn(L"k", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnk);
    this->columnquar_reference_frame_ID = (gcnew ::System::Data::DataColumn(L"quar_reference_frame_ID", ::System::Int64::typeid, 
        nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnquar_reference_frame_ID);
    this->columnref_orientation_Id = (gcnew ::System::Data::DataColumn(L"ref_orientation_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnref_orientation_Id);
    this->columnspin_reference_frame_Id = (gcnew ::System::Data::DataColumn(L"spin_reference_frame_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnspin_reference_frame_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnref_orientation_Id}, 
            true)));
    this->columnalpha->AllowDBNull = false;
    this->columnbeta->AllowDBNull = false;
    this->columngamma->AllowDBNull = false;
    this->columneu_reference_frame_ID->AllowDBNull = false;
    this->columnangle->AllowDBNull = false;
    this->columnre->AllowDBNull = false;
    this->columni->AllowDBNull = false;
    this->columnj->AllowDBNull = false;
    this->columnk->AllowDBNull = false;
    this->columnquar_reference_frame_ID->AllowDBNull = false;
    this->columnref_orientation_Id->AutoIncrement = true;
    this->columnref_orientation_Id->AllowDBNull = false;
    this->columnref_orientation_Id->Unique = true;
}

inline spin_system::ref_orientationRow^  spin_system::ref_orientationDataTable::Newref_orientationRow() {
    return (cli::safe_cast<spin_system::ref_orientationRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  spin_system::ref_orientationDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew spin_system::ref_orientationRow(builder));
}

inline ::System::Type^  spin_system::ref_orientationDataTable::GetRowType() {
    return spin_system::ref_orientationRow::typeid;
}

inline ::System::Void spin_system::ref_orientationDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->ref_orientationRowChanged(this, (gcnew spin_system::ref_orientationRowChangeEvent((cli::safe_cast<spin_system::ref_orientationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::ref_orientationDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->ref_orientationRowChanging(this, (gcnew spin_system::ref_orientationRowChangeEvent((cli::safe_cast<spin_system::ref_orientationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::ref_orientationDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->ref_orientationRowDeleted(this, (gcnew spin_system::ref_orientationRowChangeEvent((cli::safe_cast<spin_system::ref_orientationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::ref_orientationDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->ref_orientationRowDeleting(this, (gcnew spin_system::ref_orientationRowChangeEvent((cli::safe_cast<spin_system::ref_orientationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void spin_system::ref_orientationDataTable::Removeref_orientationRow(spin_system::ref_orientationRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  spin_system::ref_orientationDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    spin_system^  ds = (gcnew spin_system());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"ref_orientationDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline spin_system::spinRow::spinRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablespin = (cli::safe_cast<spin_system::spinDataTable^  >(this->Table));
}

inline System::Int64 spin_system::spinRow::number::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tablespin->numberColumn]));
}
inline System::Void spin_system::spinRow::number::set(System::Int64 value) {
    this[this->tablespin->numberColumn] = value;
}

inline System::String^  spin_system::spinRow::isotope::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablespin->isotopeColumn]));
}
inline System::Void spin_system::spinRow::isotope::set(System::String^  value) {
    this[this->tablespin->isotopeColumn] = value;
}

inline System::String^  spin_system::spinRow::label::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tablespin->labelColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'label\' in table \'spin\' is DBNull.", e));
    }
}
inline System::Void spin_system::spinRow::label::set(System::String^  value) {
    this[this->tablespin->labelColumn] = value;
}

inline System::Int32 spin_system::spinRow::spin_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablespin->spin_IdColumn]));
}
inline System::Void spin_system::spinRow::spin_Id::set(System::Int32 value) {
    this[this->tablespin->spin_IdColumn] = value;
}

inline ::System::Boolean spin_system::spinRow::IslabelNull() {
    return this->IsNull(this->tablespin->labelColumn);
}

inline ::System::Void spin_system::spinRow::SetlabelNull() {
    this[this->tablespin->labelColumn] = ::System::Convert::DBNull;
}

inline cli::array< spin_system::coordinatesRow^  >^  spin_system::spinRow::GetcoordinatesRows() {
    if (this->Table->ChildRelations[L"spin_coordinates"] == nullptr) {
        return gcnew cli::array< spin_system::coordinatesRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::coordinatesRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"spin_coordinates"])));
    }
}


inline spin_system::coordinatesRow::coordinatesRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablecoordinates = (cli::safe_cast<spin_system::coordinatesDataTable^  >(this->Table));
}

inline System::Double spin_system::coordinatesRow::x::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablecoordinates->xColumn]));
}
inline System::Void spin_system::coordinatesRow::x::set(System::Double value) {
    this[this->tablecoordinates->xColumn] = value;
}

inline System::Double spin_system::coordinatesRow::y::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablecoordinates->yColumn]));
}
inline System::Void spin_system::coordinatesRow::y::set(System::Double value) {
    this[this->tablecoordinates->yColumn] = value;
}

inline System::Double spin_system::coordinatesRow::z::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablecoordinates->zColumn]));
}
inline System::Void spin_system::coordinatesRow::z::set(System::Double value) {
    this[this->tablecoordinates->zColumn] = value;
}

inline System::Int64 spin_system::coordinatesRow::ve_reference_frame_ID::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tablecoordinates->ve_reference_frame_IDColumn]));
}
inline System::Void spin_system::coordinatesRow::ve_reference_frame_ID::set(System::Int64 value) {
    this[this->tablecoordinates->ve_reference_frame_IDColumn] = value;
}

inline System::Int32 spin_system::coordinatesRow::spin_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecoordinates->spin_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'spin_Id\' in table \'coordinates\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::coordinatesRow::spin_Id::set(System::Int32 value) {
    this[this->tablecoordinates->spin_IdColumn] = value;
}

inline spin_system::spinRow^  spin_system::coordinatesRow::spinRow::get() {
    return (cli::safe_cast<spin_system::spinRow^  >(this->GetParentRow(this->Table->ParentRelations[L"spin_coordinates"])));
}
inline System::Void spin_system::coordinatesRow::spinRow::set(spin_system::spinRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"spin_coordinates"]);
}

inline ::System::Boolean spin_system::coordinatesRow::Isspin_IdNull() {
    return this->IsNull(this->tablecoordinates->spin_IdColumn);
}

inline ::System::Void spin_system::coordinatesRow::Setspin_IdNull() {
    this[this->tablecoordinates->spin_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::spin_interactionRow::spin_interactionRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablespin_interaction = (cli::safe_cast<spin_system::spin_interactionDataTable^  >(this->Table));
}

inline System::String^  spin_system::spin_interactionRow::kind::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablespin_interaction->kindColumn]));
}
inline System::Void spin_system::spin_interactionRow::kind::set(System::String^  value) {
    this[this->tablespin_interaction->kindColumn] = value;
}

inline System::String^  spin_system::spin_interactionRow::units::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablespin_interaction->unitsColumn]));
}
inline System::Void spin_system::spin_interactionRow::units::set(System::String^  value) {
    this[this->tablespin_interaction->unitsColumn] = value;
}

inline System::Int64 spin_system::spin_interactionRow::spin_1::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tablespin_interaction->spin_1Column]));
}
inline System::Void spin_system::spin_interactionRow::spin_1::set(System::Int64 value) {
    this[this->tablespin_interaction->spin_1Column] = value;
}

inline System::Int64 spin_system::spin_interactionRow::spin_2::get() {
    try {
        return (cli::safe_cast<::System::Int64 >(this[this->tablespin_interaction->spin_2Column]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'spin_2\' in table \'spin_interaction\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::spin_interactionRow::spin_2::set(System::Int64 value) {
    this[this->tablespin_interaction->spin_2Column] = value;
}

inline System::String^  spin_system::spin_interactionRow::label::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tablespin_interaction->labelColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'label\' in table \'spin_interaction\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::spin_interactionRow::label::set(System::String^  value) {
    this[this->tablespin_interaction->labelColumn] = value;
}

inline System::Double spin_system::spin_interactionRow::scalar::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablespin_interaction->scalarColumn]));
}
inline System::Void spin_system::spin_interactionRow::scalar::set(System::Double value) {
    this[this->tablespin_interaction->scalarColumn] = value;
}

inline System::Int32 spin_system::spin_interactionRow::spin_interaction_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablespin_interaction->spin_interaction_IdColumn]));
}
inline System::Void spin_system::spin_interactionRow::spin_interaction_Id::set(System::Int32 value) {
    this[this->tablespin_interaction->spin_interaction_IdColumn] = value;
}

inline ::System::Boolean spin_system::spin_interactionRow::Isspin_2Null() {
    return this->IsNull(this->tablespin_interaction->spin_2Column);
}

inline ::System::Void spin_system::spin_interactionRow::Setspin_2Null() {
    this[this->tablespin_interaction->spin_2Column] = ::System::Convert::DBNull;
}

inline ::System::Boolean spin_system::spin_interactionRow::IslabelNull() {
    return this->IsNull(this->tablespin_interaction->labelColumn);
}

inline ::System::Void spin_system::spin_interactionRow::SetlabelNull() {
    this[this->tablespin_interaction->labelColumn] = ::System::Convert::DBNull;
}

inline cli::array< spin_system::tensorRow^  >^  spin_system::spin_interactionRow::GettensorRows() {
    if (this->Table->ChildRelations[L"spin_interaction_tensor"] == nullptr) {
        return gcnew cli::array< spin_system::tensorRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::tensorRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"spin_interaction_tensor"])));
    }
}

inline cli::array< spin_system::eigenvaluesRow^  >^  spin_system::spin_interactionRow::GeteigenvaluesRows() {
    if (this->Table->ChildRelations[L"spin_interaction_eigenvalues"] == nullptr) {
        return gcnew cli::array< spin_system::eigenvaluesRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::eigenvaluesRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"spin_interaction_eigenvalues"])));
    }
}

inline cli::array< spin_system::axiality_rhombicityRow^  >^  spin_system::spin_interactionRow::Getaxiality_rhombicityRows() {
    if (this->Table->ChildRelations[L"spin_interaction_axiality_rhombicity"] == nullptr) {
        return gcnew cli::array< spin_system::axiality_rhombicityRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::axiality_rhombicityRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"spin_interaction_axiality_rhombicity"])));
    }
}

inline cli::array< spin_system::span_skewRow^  >^  spin_system::spin_interactionRow::Getspan_skewRows() {
    if (this->Table->ChildRelations[L"spin_interaction_span_skew"] == nullptr) {
        return gcnew cli::array< spin_system::span_skewRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::span_skewRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"spin_interaction_span_skew"])));
    }
}

inline cli::array< spin_system::inter_orientationRow^  >^  spin_system::spin_interactionRow::Getinter_orientationRows() {
    if (this->Table->ChildRelations[L"spin_interaction_inter_orientation"] == nullptr) {
        return gcnew cli::array< spin_system::inter_orientationRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::inter_orientationRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"spin_interaction_inter_orientation"])));
    }
}


inline spin_system::tensorRow::tensorRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tabletensor = (cli::safe_cast<spin_system::tensorDataTable^  >(this->Table));
}

inline System::Double spin_system::tensorRow::xx::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->xxColumn]));
}
inline System::Void spin_system::tensorRow::xx::set(System::Double value) {
    this[this->tabletensor->xxColumn] = value;
}

inline System::Double spin_system::tensorRow::xy::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->xyColumn]));
}
inline System::Void spin_system::tensorRow::xy::set(System::Double value) {
    this[this->tabletensor->xyColumn] = value;
}

inline System::Double spin_system::tensorRow::xz::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->xzColumn]));
}
inline System::Void spin_system::tensorRow::xz::set(System::Double value) {
    this[this->tabletensor->xzColumn] = value;
}

inline System::Double spin_system::tensorRow::yx::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->yxColumn]));
}
inline System::Void spin_system::tensorRow::yx::set(System::Double value) {
    this[this->tabletensor->yxColumn] = value;
}

inline System::Double spin_system::tensorRow::yy::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->yyColumn]));
}
inline System::Void spin_system::tensorRow::yy::set(System::Double value) {
    this[this->tabletensor->yyColumn] = value;
}

inline System::Double spin_system::tensorRow::yz::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->yzColumn]));
}
inline System::Void spin_system::tensorRow::yz::set(System::Double value) {
    this[this->tabletensor->yzColumn] = value;
}

inline System::Double spin_system::tensorRow::zx::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->zxColumn]));
}
inline System::Void spin_system::tensorRow::zx::set(System::Double value) {
    this[this->tabletensor->zxColumn] = value;
}

inline System::Double spin_system::tensorRow::zy::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->zyColumn]));
}
inline System::Void spin_system::tensorRow::zy::set(System::Double value) {
    this[this->tabletensor->zyColumn] = value;
}

inline System::Double spin_system::tensorRow::zz::get() {
    return (cli::safe_cast<::System::Double >(this[this->tabletensor->zzColumn]));
}
inline System::Void spin_system::tensorRow::zz::set(System::Double value) {
    this[this->tabletensor->zzColumn] = value;
}

inline System::Int64 spin_system::tensorRow::reference_frame::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tabletensor->reference_frameColumn]));
}
inline System::Void spin_system::tensorRow::reference_frame::set(System::Int64 value) {
    this[this->tabletensor->reference_frameColumn] = value;
}

inline System::Int32 spin_system::tensorRow::spin_interaction_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tabletensor->spin_interaction_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'spin_interaction_Id\' in table \'tensor\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::tensorRow::spin_interaction_Id::set(System::Int32 value) {
    this[this->tabletensor->spin_interaction_IdColumn] = value;
}

inline spin_system::spin_interactionRow^  spin_system::tensorRow::spin_interactionRow::get() {
    return (cli::safe_cast<spin_system::spin_interactionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"spin_interaction_tensor"])));
}
inline System::Void spin_system::tensorRow::spin_interactionRow::set(spin_system::spin_interactionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"spin_interaction_tensor"]);
}

inline ::System::Boolean spin_system::tensorRow::Isspin_interaction_IdNull() {
    return this->IsNull(this->tabletensor->spin_interaction_IdColumn);
}

inline ::System::Void spin_system::tensorRow::Setspin_interaction_IdNull() {
    this[this->tabletensor->spin_interaction_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::eigenvaluesRow::eigenvaluesRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableeigenvalues = (cli::safe_cast<spin_system::eigenvaluesDataTable^  >(this->Table));
}

inline System::Double spin_system::eigenvaluesRow::XX::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableeigenvalues->XXColumn]));
}
inline System::Void spin_system::eigenvaluesRow::XX::set(System::Double value) {
    this[this->tableeigenvalues->XXColumn] = value;
}

inline System::Double spin_system::eigenvaluesRow::YY::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableeigenvalues->YYColumn]));
}
inline System::Void spin_system::eigenvaluesRow::YY::set(System::Double value) {
    this[this->tableeigenvalues->YYColumn] = value;
}

inline System::Double spin_system::eigenvaluesRow::ZZ::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableeigenvalues->ZZColumn]));
}
inline System::Void spin_system::eigenvaluesRow::ZZ::set(System::Double value) {
    this[this->tableeigenvalues->ZZColumn] = value;
}

inline System::Int32 spin_system::eigenvaluesRow::spin_interaction_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableeigenvalues->spin_interaction_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'spin_interaction_Id\' in table \'eigenvalues\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::eigenvaluesRow::spin_interaction_Id::set(System::Int32 value) {
    this[this->tableeigenvalues->spin_interaction_IdColumn] = value;
}

inline spin_system::spin_interactionRow^  spin_system::eigenvaluesRow::spin_interactionRow::get() {
    return (cli::safe_cast<spin_system::spin_interactionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"spin_interaction_eigenvalues"])));
}
inline System::Void spin_system::eigenvaluesRow::spin_interactionRow::set(spin_system::spin_interactionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"spin_interaction_eigenvalues"]);
}

inline ::System::Boolean spin_system::eigenvaluesRow::Isspin_interaction_IdNull() {
    return this->IsNull(this->tableeigenvalues->spin_interaction_IdColumn);
}

inline ::System::Void spin_system::eigenvaluesRow::Setspin_interaction_IdNull() {
    this[this->tableeigenvalues->spin_interaction_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::axiality_rhombicityRow::axiality_rhombicityRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableaxiality_rhombicity = (cli::safe_cast<spin_system::axiality_rhombicityDataTable^  >(this->Table));
}

inline System::Double spin_system::axiality_rhombicityRow::iso::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaxiality_rhombicity->isoColumn]));
}
inline System::Void spin_system::axiality_rhombicityRow::iso::set(System::Double value) {
    this[this->tableaxiality_rhombicity->isoColumn] = value;
}

inline System::Double spin_system::axiality_rhombicityRow::ax::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaxiality_rhombicity->axColumn]));
}
inline System::Void spin_system::axiality_rhombicityRow::ax::set(System::Double value) {
    this[this->tableaxiality_rhombicity->axColumn] = value;
}

inline System::Double spin_system::axiality_rhombicityRow::rh::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaxiality_rhombicity->rhColumn]));
}
inline System::Void spin_system::axiality_rhombicityRow::rh::set(System::Double value) {
    this[this->tableaxiality_rhombicity->rhColumn] = value;
}

inline System::Int32 spin_system::axiality_rhombicityRow::spin_interaction_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableaxiality_rhombicity->spin_interaction_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'spin_interaction_Id\' in table \'axiality_rhombicity\' is DBNu" 
L"ll.", 
            e));
    }
}
inline System::Void spin_system::axiality_rhombicityRow::spin_interaction_Id::set(System::Int32 value) {
    this[this->tableaxiality_rhombicity->spin_interaction_IdColumn] = value;
}

inline spin_system::spin_interactionRow^  spin_system::axiality_rhombicityRow::spin_interactionRow::get() {
    return (cli::safe_cast<spin_system::spin_interactionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"spin_interaction_axiality_rhombicity"])));
}
inline System::Void spin_system::axiality_rhombicityRow::spin_interactionRow::set(spin_system::spin_interactionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"spin_interaction_axiality_rhombicity"]);
}

inline ::System::Boolean spin_system::axiality_rhombicityRow::Isspin_interaction_IdNull() {
    return this->IsNull(this->tableaxiality_rhombicity->spin_interaction_IdColumn);
}

inline ::System::Void spin_system::axiality_rhombicityRow::Setspin_interaction_IdNull() {
    this[this->tableaxiality_rhombicity->spin_interaction_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::span_skewRow::span_skewRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablespan_skew = (cli::safe_cast<spin_system::span_skewDataTable^  >(this->Table));
}

inline System::Double spin_system::span_skewRow::iso::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablespan_skew->isoColumn]));
}
inline System::Void spin_system::span_skewRow::iso::set(System::Double value) {
    this[this->tablespan_skew->isoColumn] = value;
}

inline System::Double spin_system::span_skewRow::span::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablespan_skew->spanColumn]));
}
inline System::Void spin_system::span_skewRow::span::set(System::Double value) {
    this[this->tablespan_skew->spanColumn] = value;
}

inline System::Double spin_system::span_skewRow::skew::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablespan_skew->skewColumn]));
}
inline System::Void spin_system::span_skewRow::skew::set(System::Double value) {
    this[this->tablespan_skew->skewColumn] = value;
}

inline System::Int32 spin_system::span_skewRow::spin_interaction_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablespan_skew->spin_interaction_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'spin_interaction_Id\' in table \'span_skew\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::span_skewRow::spin_interaction_Id::set(System::Int32 value) {
    this[this->tablespan_skew->spin_interaction_IdColumn] = value;
}

inline spin_system::spin_interactionRow^  spin_system::span_skewRow::spin_interactionRow::get() {
    return (cli::safe_cast<spin_system::spin_interactionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"spin_interaction_span_skew"])));
}
inline System::Void spin_system::span_skewRow::spin_interactionRow::set(spin_system::spin_interactionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"spin_interaction_span_skew"]);
}

inline ::System::Boolean spin_system::span_skewRow::Isspin_interaction_IdNull() {
    return this->IsNull(this->tablespan_skew->spin_interaction_IdColumn);
}

inline ::System::Void spin_system::span_skewRow::Setspin_interaction_IdNull() {
    this[this->tablespan_skew->spin_interaction_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::inter_orientationRow::inter_orientationRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableinter_orientation = (cli::safe_cast<spin_system::inter_orientationDataTable^  >(this->Table));
}

inline System::Double spin_system::inter_orientationRow::alpha::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableinter_orientation->alphaColumn]));
}
inline System::Void spin_system::inter_orientationRow::alpha::set(System::Double value) {
    this[this->tableinter_orientation->alphaColumn] = value;
}

inline System::Double spin_system::inter_orientationRow::beta::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableinter_orientation->betaColumn]));
}
inline System::Void spin_system::inter_orientationRow::beta::set(System::Double value) {
    this[this->tableinter_orientation->betaColumn] = value;
}

inline System::Double spin_system::inter_orientationRow::gamma::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableinter_orientation->gammaColumn]));
}
inline System::Void spin_system::inter_orientationRow::gamma::set(System::Double value) {
    this[this->tableinter_orientation->gammaColumn] = value;
}

inline System::Int64 spin_system::inter_orientationRow::eu_reference_frame_ID::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableinter_orientation->eu_reference_frame_IDColumn]));
}
inline System::Void spin_system::inter_orientationRow::eu_reference_frame_ID::set(System::Int64 value) {
    this[this->tableinter_orientation->eu_reference_frame_IDColumn] = value;
}

inline System::Double spin_system::inter_orientationRow::angle::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableinter_orientation->angleColumn]));
}
inline System::Void spin_system::inter_orientationRow::angle::set(System::Double value) {
    this[this->tableinter_orientation->angleColumn] = value;
}

inline System::Double spin_system::inter_orientationRow::re::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableinter_orientation->reColumn]));
}
inline System::Void spin_system::inter_orientationRow::re::set(System::Double value) {
    this[this->tableinter_orientation->reColumn] = value;
}

inline System::Double spin_system::inter_orientationRow::i::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableinter_orientation->iColumn]));
}
inline System::Void spin_system::inter_orientationRow::i::set(System::Double value) {
    this[this->tableinter_orientation->iColumn] = value;
}

inline System::Double spin_system::inter_orientationRow::j::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableinter_orientation->jColumn]));
}
inline System::Void spin_system::inter_orientationRow::j::set(System::Double value) {
    this[this->tableinter_orientation->jColumn] = value;
}

inline System::Double spin_system::inter_orientationRow::k::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableinter_orientation->kColumn]));
}
inline System::Void spin_system::inter_orientationRow::k::set(System::Double value) {
    this[this->tableinter_orientation->kColumn] = value;
}

inline System::Int64 spin_system::inter_orientationRow::quar_reference_frame_ID::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableinter_orientation->quar_reference_frame_IDColumn]));
}
inline System::Void spin_system::inter_orientationRow::quar_reference_frame_ID::set(System::Int64 value) {
    this[this->tableinter_orientation->quar_reference_frame_IDColumn] = value;
}

inline System::Int32 spin_system::inter_orientationRow::inter_orientation_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableinter_orientation->inter_orientation_IdColumn]));
}
inline System::Void spin_system::inter_orientationRow::inter_orientation_Id::set(System::Int32 value) {
    this[this->tableinter_orientation->inter_orientation_IdColumn] = value;
}

inline System::Int32 spin_system::inter_orientationRow::spin_interaction_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableinter_orientation->spin_interaction_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'spin_interaction_Id\' in table \'inter_orientation\' is DBNull" 
L".", 
            e));
    }
}
inline System::Void spin_system::inter_orientationRow::spin_interaction_Id::set(System::Int32 value) {
    this[this->tableinter_orientation->spin_interaction_IdColumn] = value;
}

inline spin_system::spin_interactionRow^  spin_system::inter_orientationRow::spin_interactionRow::get() {
    return (cli::safe_cast<spin_system::spin_interactionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"spin_interaction_inter_orientation"])));
}
inline System::Void spin_system::inter_orientationRow::spin_interactionRow::set(spin_system::spin_interactionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"spin_interaction_inter_orientation"]);
}

inline ::System::Boolean spin_system::inter_orientationRow::Isspin_interaction_IdNull() {
    return this->IsNull(this->tableinter_orientation->spin_interaction_IdColumn);
}

inline ::System::Void spin_system::inter_orientationRow::Setspin_interaction_IdNull() {
    this[this->tableinter_orientation->spin_interaction_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< spin_system::axisRow^  >^  spin_system::inter_orientationRow::GetaxisRows() {
    if (this->Table->ChildRelations[L"inter_orientation_axis"] == nullptr) {
        return gcnew cli::array< spin_system::axisRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::axisRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"inter_orientation_axis"])));
    }
}


inline spin_system::axisRow::axisRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableaxis = (cli::safe_cast<spin_system::axisDataTable^  >(this->Table));
}

inline System::Double spin_system::axisRow::x::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaxis->xColumn]));
}
inline System::Void spin_system::axisRow::x::set(System::Double value) {
    this[this->tableaxis->xColumn] = value;
}

inline System::Double spin_system::axisRow::y::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaxis->yColumn]));
}
inline System::Void spin_system::axisRow::y::set(System::Double value) {
    this[this->tableaxis->yColumn] = value;
}

inline System::Double spin_system::axisRow::z::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableaxis->zColumn]));
}
inline System::Void spin_system::axisRow::z::set(System::Double value) {
    this[this->tableaxis->zColumn] = value;
}

inline System::Int64 spin_system::axisRow::ve_reference_frame_ID::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableaxis->ve_reference_frame_IDColumn]));
}
inline System::Void spin_system::axisRow::ve_reference_frame_ID::set(System::Int64 value) {
    this[this->tableaxis->ve_reference_frame_IDColumn] = value;
}

inline System::Int32 spin_system::axisRow::inter_orientation_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableaxis->inter_orientation_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'inter_orientation_Id\' in table \'axis\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::axisRow::inter_orientation_Id::set(System::Int32 value) {
    this[this->tableaxis->inter_orientation_IdColumn] = value;
}

inline System::Int32 spin_system::axisRow::ref_orientation_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableaxis->ref_orientation_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ref_orientation_Id\' in table \'axis\' is DBNull.", 
            e));
    }
}
inline System::Void spin_system::axisRow::ref_orientation_Id::set(System::Int32 value) {
    this[this->tableaxis->ref_orientation_IdColumn] = value;
}

inline spin_system::inter_orientationRow^  spin_system::axisRow::inter_orientationRow::get() {
    return (cli::safe_cast<spin_system::inter_orientationRow^  >(this->GetParentRow(this->Table->ParentRelations[L"inter_orientation_axis"])));
}
inline System::Void spin_system::axisRow::inter_orientationRow::set(spin_system::inter_orientationRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"inter_orientation_axis"]);
}

inline spin_system::ref_orientationRow^  spin_system::axisRow::ref_orientationRow::get() {
    return (cli::safe_cast<spin_system::ref_orientationRow^  >(this->GetParentRow(this->Table->ParentRelations[L"ref_orientation_axis"])));
}
inline System::Void spin_system::axisRow::ref_orientationRow::set(spin_system::ref_orientationRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"ref_orientation_axis"]);
}

inline ::System::Boolean spin_system::axisRow::Isinter_orientation_IdNull() {
    return this->IsNull(this->tableaxis->inter_orientation_IdColumn);
}

inline ::System::Void spin_system::axisRow::Setinter_orientation_IdNull() {
    this[this->tableaxis->inter_orientation_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean spin_system::axisRow::Isref_orientation_IdNull() {
    return this->IsNull(this->tableaxis->ref_orientation_IdColumn);
}

inline ::System::Void spin_system::axisRow::Setref_orientation_IdNull() {
    this[this->tableaxis->ref_orientation_IdColumn] = ::System::Convert::DBNull;
}


inline spin_system::spin_reference_frameRow::spin_reference_frameRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablespin_reference_frame = (cli::safe_cast<spin_system::spin_reference_frameDataTable^  >(this->Table));
}

inline System::Int64 spin_system::spin_reference_frameRow::number::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tablespin_reference_frame->numberColumn]));
}
inline System::Void spin_system::spin_reference_frameRow::number::set(System::Int64 value) {
    this[this->tablespin_reference_frame->numberColumn] = value;
}

inline System::String^  spin_system::spin_reference_frameRow::label::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablespin_reference_frame->labelColumn]));
}
inline System::Void spin_system::spin_reference_frameRow::label::set(System::String^  value) {
    this[this->tablespin_reference_frame->labelColumn] = value;
}

inline System::Double spin_system::spin_reference_frameRow::x::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablespin_reference_frame->xColumn]));
}
inline System::Void spin_system::spin_reference_frameRow::x::set(System::Double value) {
    this[this->tablespin_reference_frame->xColumn] = value;
}

inline System::Double spin_system::spin_reference_frameRow::y::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablespin_reference_frame->yColumn]));
}
inline System::Void spin_system::spin_reference_frameRow::y::set(System::Double value) {
    this[this->tablespin_reference_frame->yColumn] = value;
}

inline System::Double spin_system::spin_reference_frameRow::z::get() {
    return (cli::safe_cast<::System::Double >(this[this->tablespin_reference_frame->zColumn]));
}
inline System::Void spin_system::spin_reference_frameRow::z::set(System::Double value) {
    this[this->tablespin_reference_frame->zColumn] = value;
}

inline System::Int64 spin_system::spin_reference_frameRow::ve_reference_frame_ID::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tablespin_reference_frame->ve_reference_frame_IDColumn]));
}
inline System::Void spin_system::spin_reference_frameRow::ve_reference_frame_ID::set(System::Int64 value) {
    this[this->tablespin_reference_frame->ve_reference_frame_IDColumn] = value;
}

inline System::Int32 spin_system::spin_reference_frameRow::spin_reference_frame_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablespin_reference_frame->spin_reference_frame_IdColumn]));
}
inline System::Void spin_system::spin_reference_frameRow::spin_reference_frame_Id::set(System::Int32 value) {
    this[this->tablespin_reference_frame->spin_reference_frame_IdColumn] = value;
}

inline cli::array< spin_system::ref_orientationRow^  >^  spin_system::spin_reference_frameRow::Getref_orientationRows() {
    if (this->Table->ChildRelations[L"spin_reference_frame_ref_orientation"] == nullptr) {
        return gcnew cli::array< spin_system::ref_orientationRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::ref_orientationRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"spin_reference_frame_ref_orientation"])));
    }
}


inline spin_system::ref_orientationRow::ref_orientationRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableref_orientation = (cli::safe_cast<spin_system::ref_orientationDataTable^  >(this->Table));
}

inline System::Double spin_system::ref_orientationRow::alpha::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableref_orientation->alphaColumn]));
}
inline System::Void spin_system::ref_orientationRow::alpha::set(System::Double value) {
    this[this->tableref_orientation->alphaColumn] = value;
}

inline System::Double spin_system::ref_orientationRow::beta::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableref_orientation->betaColumn]));
}
inline System::Void spin_system::ref_orientationRow::beta::set(System::Double value) {
    this[this->tableref_orientation->betaColumn] = value;
}

inline System::Double spin_system::ref_orientationRow::gamma::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableref_orientation->gammaColumn]));
}
inline System::Void spin_system::ref_orientationRow::gamma::set(System::Double value) {
    this[this->tableref_orientation->gammaColumn] = value;
}

inline System::Int64 spin_system::ref_orientationRow::eu_reference_frame_ID::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableref_orientation->eu_reference_frame_IDColumn]));
}
inline System::Void spin_system::ref_orientationRow::eu_reference_frame_ID::set(System::Int64 value) {
    this[this->tableref_orientation->eu_reference_frame_IDColumn] = value;
}

inline System::Double spin_system::ref_orientationRow::angle::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableref_orientation->angleColumn]));
}
inline System::Void spin_system::ref_orientationRow::angle::set(System::Double value) {
    this[this->tableref_orientation->angleColumn] = value;
}

inline System::Double spin_system::ref_orientationRow::re::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableref_orientation->reColumn]));
}
inline System::Void spin_system::ref_orientationRow::re::set(System::Double value) {
    this[this->tableref_orientation->reColumn] = value;
}

inline System::Double spin_system::ref_orientationRow::i::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableref_orientation->iColumn]));
}
inline System::Void spin_system::ref_orientationRow::i::set(System::Double value) {
    this[this->tableref_orientation->iColumn] = value;
}

inline System::Double spin_system::ref_orientationRow::j::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableref_orientation->jColumn]));
}
inline System::Void spin_system::ref_orientationRow::j::set(System::Double value) {
    this[this->tableref_orientation->jColumn] = value;
}

inline System::Double spin_system::ref_orientationRow::k::get() {
    return (cli::safe_cast<::System::Double >(this[this->tableref_orientation->kColumn]));
}
inline System::Void spin_system::ref_orientationRow::k::set(System::Double value) {
    this[this->tableref_orientation->kColumn] = value;
}

inline System::Int64 spin_system::ref_orientationRow::quar_reference_frame_ID::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableref_orientation->quar_reference_frame_IDColumn]));
}
inline System::Void spin_system::ref_orientationRow::quar_reference_frame_ID::set(System::Int64 value) {
    this[this->tableref_orientation->quar_reference_frame_IDColumn] = value;
}

inline System::Int32 spin_system::ref_orientationRow::ref_orientation_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableref_orientation->ref_orientation_IdColumn]));
}
inline System::Void spin_system::ref_orientationRow::ref_orientation_Id::set(System::Int32 value) {
    this[this->tableref_orientation->ref_orientation_IdColumn] = value;
}

inline System::Int32 spin_system::ref_orientationRow::spin_reference_frame_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableref_orientation->spin_reference_frame_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'spin_reference_frame_Id\' in table \'ref_orientation\' is DBNu" 
L"ll.", 
            e));
    }
}
inline System::Void spin_system::ref_orientationRow::spin_reference_frame_Id::set(System::Int32 value) {
    this[this->tableref_orientation->spin_reference_frame_IdColumn] = value;
}

inline spin_system::spin_reference_frameRow^  spin_system::ref_orientationRow::spin_reference_frameRow::get() {
    return (cli::safe_cast<spin_system::spin_reference_frameRow^  >(this->GetParentRow(this->Table->ParentRelations[L"spin_reference_frame_ref_orientation"])));
}
inline System::Void spin_system::ref_orientationRow::spin_reference_frameRow::set(spin_system::spin_reference_frameRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"spin_reference_frame_ref_orientation"]);
}

inline ::System::Boolean spin_system::ref_orientationRow::Isspin_reference_frame_IdNull() {
    return this->IsNull(this->tableref_orientation->spin_reference_frame_IdColumn);
}

inline ::System::Void spin_system::ref_orientationRow::Setspin_reference_frame_IdNull() {
    this[this->tableref_orientation->spin_reference_frame_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< spin_system::axisRow^  >^  spin_system::ref_orientationRow::GetaxisRows() {
    if (this->Table->ChildRelations[L"ref_orientation_axis"] == nullptr) {
        return gcnew cli::array< spin_system::axisRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< spin_system::axisRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"ref_orientation_axis"])));
    }
}


inline spin_system::spinRowChangeEvent::spinRowChangeEvent(spin_system::spinRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::spinRow^  spin_system::spinRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::spinRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::coordinatesRowChangeEvent::coordinatesRowChangeEvent(spin_system::coordinatesRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::coordinatesRow^  spin_system::coordinatesRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::coordinatesRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::spin_interactionRowChangeEvent::spin_interactionRowChangeEvent(spin_system::spin_interactionRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::spin_interactionRow^  spin_system::spin_interactionRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::spin_interactionRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::tensorRowChangeEvent::tensorRowChangeEvent(spin_system::tensorRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::tensorRow^  spin_system::tensorRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::tensorRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::eigenvaluesRowChangeEvent::eigenvaluesRowChangeEvent(spin_system::eigenvaluesRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::eigenvaluesRow^  spin_system::eigenvaluesRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::eigenvaluesRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::axiality_rhombicityRowChangeEvent::axiality_rhombicityRowChangeEvent(spin_system::axiality_rhombicityRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::axiality_rhombicityRow^  spin_system::axiality_rhombicityRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::axiality_rhombicityRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::span_skewRowChangeEvent::span_skewRowChangeEvent(spin_system::span_skewRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::span_skewRow^  spin_system::span_skewRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::span_skewRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::inter_orientationRowChangeEvent::inter_orientationRowChangeEvent(spin_system::inter_orientationRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::inter_orientationRow^  spin_system::inter_orientationRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::inter_orientationRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::axisRowChangeEvent::axisRowChangeEvent(spin_system::axisRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::axisRow^  spin_system::axisRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::axisRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::spin_reference_frameRowChangeEvent::spin_reference_frameRowChangeEvent(spin_system::spin_reference_frameRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::spin_reference_frameRow^  spin_system::spin_reference_frameRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::spin_reference_frameRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline spin_system::ref_orientationRowChangeEvent::ref_orientationRowChangeEvent(spin_system::ref_orientationRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline spin_system::ref_orientationRow^  spin_system::ref_orientationRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction spin_system::ref_orientationRowChangeEvent::Action::get() {
    return this->eventAction;
}
