#pragma once
#include "OrientationDialog.h"


namespace SpinachGUI {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/** \class  OrientationExport
	*   OrientationExport class, for exporting to a MatLab file the orientation  data in different forms 
	*   of a single interaction.
	*/
	public ref class OrientationExport : public System::Windows::Forms::Form
	{
	public:
		OrientationExport(Form^ aorientation)
		{
			//Intialize values from the Orientation dialog
			orientation=aorientation;
			InitializeComponent();

			//Write values to preview box
			Write();
		}

#pragma region Autogenerated members
	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~OrientationExport()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::Button^  Exportbutton;
	private: System::Windows::Forms::Button^  Copybutton;
	private: System::Windows::Forms::GroupBox^  Properties;
	private: System::Windows::Forms::CheckBox^  checkBoxEigenVector;
	private: System::Windows::Forms::CheckBox^  checkBoxConvention;
	private: System::Windows::Forms::CheckBox^  checkBoxWigner;
	private: System::Windows::Forms::CheckBox^  checkBoxAngle;
	private: System::Windows::Forms::CheckBox^  checkBoxQuaternion;
	private: System::Windows::Forms::CheckBox^  checkBoxEuler;
	private: System::Windows::Forms::CheckBox^  checkBoxEigen;
	private: System::Windows::Forms::CheckBox^  checkBoxSpherical;
	private: System::Windows::Forms::CheckBox^  checkBoxInteract;
	private: System::Windows::Forms::GroupBox^  PreviewBox;
	private: System::Windows::Forms::Panel^  Previewpanel;
	private: System::Windows::Forms::TextBox^  PreviewtextBox;
	private: System::Windows::Forms::SaveFileDialog^  ExportFileDialog;

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		System::ComponentModel::Container ^components;
#pragma endregion

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			this->Exportbutton = (gcnew System::Windows::Forms::Button());
			this->Copybutton = (gcnew System::Windows::Forms::Button());
			this->Properties = (gcnew System::Windows::Forms::GroupBox());
			this->checkBoxEigenVector = (gcnew System::Windows::Forms::CheckBox());
			this->checkBoxConvention = (gcnew System::Windows::Forms::CheckBox());
			this->checkBoxWigner = (gcnew System::Windows::Forms::CheckBox());
			this->checkBoxAngle = (gcnew System::Windows::Forms::CheckBox());
			this->checkBoxQuaternion = (gcnew System::Windows::Forms::CheckBox());
			this->checkBoxEuler = (gcnew System::Windows::Forms::CheckBox());
			this->checkBoxEigen = (gcnew System::Windows::Forms::CheckBox());
			this->checkBoxSpherical = (gcnew System::Windows::Forms::CheckBox());
			this->checkBoxInteract = (gcnew System::Windows::Forms::CheckBox());
			this->PreviewBox = (gcnew System::Windows::Forms::GroupBox());
			this->Previewpanel = (gcnew System::Windows::Forms::Panel());
			this->PreviewtextBox = (gcnew System::Windows::Forms::TextBox());
			this->ExportFileDialog = (gcnew System::Windows::Forms::SaveFileDialog());
			this->Properties->SuspendLayout();
			this->PreviewBox->SuspendLayout();
			this->Previewpanel->SuspendLayout();
			this->SuspendLayout();
			// 
			// Exportbutton
			// 
			this->Exportbutton->Location = System::Drawing::Point(1021, 24);
			this->Exportbutton->Name = L"Exportbutton";
			this->Exportbutton->Size = System::Drawing::Size(92, 35);
			this->Exportbutton->TabIndex = 93;
			this->Exportbutton->Text = L"Export to .m file";
			this->Exportbutton->UseVisualStyleBackColor = true;
			this->Exportbutton->Click += gcnew System::EventHandler(this, &OrientationExport::Exportbutton_Click);
			// 
			// Copybutton
			// 
			this->Copybutton->Location = System::Drawing::Point(875, 24);
			this->Copybutton->Name = L"Copybutton";
			this->Copybutton->Size = System::Drawing::Size(92, 35);
			this->Copybutton->TabIndex = 92;
			this->Copybutton->Text = L"Copy to Clipboard";
			this->Copybutton->UseVisualStyleBackColor = true;
			this->Copybutton->Click += gcnew System::EventHandler(this, &OrientationExport::RemoveAnisbutton_Click);
			// 
			// Properties
			// 
			this->Properties->Controls->Add(this->Exportbutton);
			this->Properties->Controls->Add(this->checkBoxEigenVector);
			this->Properties->Controls->Add(this->Copybutton);
			this->Properties->Controls->Add(this->checkBoxConvention);
			this->Properties->Controls->Add(this->checkBoxWigner);
			this->Properties->Controls->Add(this->checkBoxAngle);
			this->Properties->Controls->Add(this->checkBoxQuaternion);
			this->Properties->Controls->Add(this->checkBoxEuler);
			this->Properties->Controls->Add(this->checkBoxEigen);
			this->Properties->Controls->Add(this->checkBoxSpherical);
			this->Properties->Controls->Add(this->checkBoxInteract);
			this->Properties->Location = System::Drawing::Point(9, 4);
			this->Properties->Name = L"Properties";
			this->Properties->Size = System::Drawing::Size(1175, 86);
			this->Properties->TabIndex = 91;
			this->Properties->TabStop = false;
			this->Properties->Text = L"Properties";
			// 
			// checkBoxEigenVector
			// 
			this->checkBoxEigenVector->AutoSize = true;
			this->checkBoxEigenVector->Checked = true;
			this->checkBoxEigenVector->CheckState = System::Windows::Forms::CheckState::Checked;
			this->checkBoxEigenVector->Location = System::Drawing::Point(179, 25);
			this->checkBoxEigenVector->Name = L"checkBoxEigenVector";
			this->checkBoxEigenVector->Size = System::Drawing::Size(62, 30);
			this->checkBoxEigenVector->TabIndex = 22;
			this->checkBoxEigenVector->Text = L"Eigen \r\nVectors";
			this->checkBoxEigenVector->UseVisualStyleBackColor = true;
			this->checkBoxEigenVector->CheckedChanged += gcnew System::EventHandler(this, &OrientationExport::checkBox_CheckedChanged);
			// 
			// checkBoxConvention
			// 
			this->checkBoxConvention->AutoSize = true;
			this->checkBoxConvention->Checked = true;
			this->checkBoxConvention->CheckState = System::Windows::Forms::CheckState::Checked;
			this->checkBoxConvention->Location = System::Drawing::Point(735, 34);
			this->checkBoxConvention->Name = L"checkBoxConvention";
			this->checkBoxConvention->Size = System::Drawing::Size(85, 17);
			this->checkBoxConvention->TabIndex = 21;
			this->checkBoxConvention->Text = L"Conventions";
			this->checkBoxConvention->UseVisualStyleBackColor = true;
			this->checkBoxConvention->CheckedChanged += gcnew System::EventHandler(this, &OrientationExport::checkBox_CheckedChanged);
			// 
			// checkBoxWigner
			// 
			this->checkBoxWigner->AutoSize = true;
			this->checkBoxWigner->Checked = true;
			this->checkBoxWigner->CheckState = System::Windows::Forms::CheckState::Checked;
			this->checkBoxWigner->Location = System::Drawing::Point(653, 21);
			this->checkBoxWigner->Name = L"checkBoxWigner";
			this->checkBoxWigner->Size = System::Drawing::Size(64, 43);
			this->checkBoxWigner->TabIndex = 20;
			this->checkBoxWigner->Text = L"Wigner \r\nrotation \r\nmatrix";
			this->checkBoxWigner->UseVisualStyleBackColor = true;
			this->checkBoxWigner->CheckedChanged += gcnew System::EventHandler(this, &OrientationExport::checkBox_CheckedChanged);
			// 
			// checkBoxAngle
			// 
			this->checkBoxAngle->AutoSize = true;
			this->checkBoxAngle->Checked = true;
			this->checkBoxAngle->CheckState = System::Windows::Forms::CheckState::Checked;
			this->checkBoxAngle->Location = System::Drawing::Point(555, 26);
			this->checkBoxAngle->Name = L"checkBoxAngle";
			this->checkBoxAngle->Size = System::Drawing::Size(78, 30);
			this->checkBoxAngle->TabIndex = 19;
			this->checkBoxAngle->Text = L"Angle-axis \r\nparameters";
			this->checkBoxAngle->UseVisualStyleBackColor = true;
			this->checkBoxAngle->CheckedChanged += gcnew System::EventHandler(this, &OrientationExport::checkBox_CheckedChanged);
			// 
			// checkBoxQuaternion
			// 
			this->checkBoxQuaternion->AutoSize = true;
			this->checkBoxQuaternion->Checked = true;
			this->checkBoxQuaternion->CheckState = System::Windows::Forms::CheckState::Checked;
			this->checkBoxQuaternion->Location = System::Drawing::Point(450, 34);
			this->checkBoxQuaternion->Name = L"checkBoxQuaternion";
			this->checkBoxQuaternion->Size = System::Drawing::Size(78, 17);
			this->checkBoxQuaternion->TabIndex = 18;
			this->checkBoxQuaternion->Text = L"Quaternion";
			this->checkBoxQuaternion->UseVisualStyleBackColor = true;
			this->checkBoxQuaternion->CheckedChanged += gcnew System::EventHandler(this, &OrientationExport::checkBox_CheckedChanged);
			// 
			// checkBoxEuler
			// 
			this->checkBoxEuler->AutoSize = true;
			this->checkBoxEuler->Checked = true;
			this->checkBoxEuler->CheckState = System::Windows::Forms::CheckState::Checked;
			this->checkBoxEuler->Location = System::Drawing::Point(362, 26);
			this->checkBoxEuler->Name = L"checkBoxEuler";
			this->checkBoxEuler->Size = System::Drawing::Size(58, 30);
			this->checkBoxEuler->TabIndex = 17;
			this->checkBoxEuler->Text = L"Euler\r\nAngles";
			this->checkBoxEuler->UseVisualStyleBackColor = true;
			this->checkBoxEuler->CheckedChanged += gcnew System::EventHandler(this, &OrientationExport::checkBox_CheckedChanged);
			// 
			// checkBoxEigen
			// 
			this->checkBoxEigen->AutoSize = true;
			this->checkBoxEigen->Checked = true;
			this->checkBoxEigen->CheckState = System::Windows::Forms::CheckState::Checked;
			this->checkBoxEigen->Location = System::Drawing::Point(99, 24);
			this->checkBoxEigen->Name = L"checkBoxEigen";
			this->checkBoxEigen->Size = System::Drawing::Size(58, 30);
			this->checkBoxEigen->TabIndex = 16;
			this->checkBoxEigen->Text = L"Eigen \r\nValues";
			this->checkBoxEigen->UseVisualStyleBackColor = true;
			this->checkBoxEigen->CheckedChanged += gcnew System::EventHandler(this, &OrientationExport::checkBox_CheckedChanged);
			// 
			// checkBoxSpherical
			// 
			this->checkBoxSpherical->AutoSize = true;
			this->checkBoxSpherical->Checked = true;
			this->checkBoxSpherical->CheckState = System::Windows::Forms::CheckState::Checked;
			this->checkBoxSpherical->Location = System::Drawing::Point(264, 20);
			this->checkBoxSpherical->Name = L"checkBoxSpherical";
			this->checkBoxSpherical->Size = System::Drawing::Size(80, 43);
			this->checkBoxSpherical->TabIndex = 15;
			this->checkBoxSpherical->Text = L"Spherical \r\nTensor \r\ncoefficients";
			this->checkBoxSpherical->UseVisualStyleBackColor = true;
			this->checkBoxSpherical->CheckedChanged += gcnew System::EventHandler(this, &OrientationExport::checkBox_CheckedChanged);
			// 
			// checkBoxInteract
			// 
			this->checkBoxInteract->AutoSize = true;
			this->checkBoxInteract->Checked = true;
			this->checkBoxInteract->CheckState = System::Windows::Forms::CheckState::Checked;
			this->checkBoxInteract->Location = System::Drawing::Point(9, 24);
			this->checkBoxInteract->Name = L"checkBoxInteract";
			this->checkBoxInteract->Size = System::Drawing::Size(79, 30);
			this->checkBoxInteract->TabIndex = 14;
			this->checkBoxInteract->Text = L"Interaction \r\nMatrix";
			this->checkBoxInteract->UseVisualStyleBackColor = true;
			this->checkBoxInteract->CheckedChanged += gcnew System::EventHandler(this, &OrientationExport::checkBox_CheckedChanged);
			// 
			// PreviewBox
			// 
			this->PreviewBox->Anchor = static_cast<System::Windows::Forms::AnchorStyles>((((System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom) 
				| System::Windows::Forms::AnchorStyles::Left) 
				| System::Windows::Forms::AnchorStyles::Right));
			this->PreviewBox->Controls->Add(this->Previewpanel);
			this->PreviewBox->Location = System::Drawing::Point(5, 96);
			this->PreviewBox->Name = L"PreviewBox";
			this->PreviewBox->Size = System::Drawing::Size(1185, 615);
			this->PreviewBox->TabIndex = 90;
			this->PreviewBox->TabStop = false;
			this->PreviewBox->Text = L"File Preview (click to pan)";
			// 
			// Previewpanel
			// 
			this->Previewpanel->Anchor = static_cast<System::Windows::Forms::AnchorStyles>((((System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom) 
				| System::Windows::Forms::AnchorStyles::Left) 
				| System::Windows::Forms::AnchorStyles::Right));
			this->Previewpanel->AutoScroll = true;
			this->Previewpanel->Controls->Add(this->PreviewtextBox);
			this->Previewpanel->Cursor = System::Windows::Forms::Cursors::IBeam;
			this->Previewpanel->Location = System::Drawing::Point(8, 19);
			this->Previewpanel->Name = L"Previewpanel";
			this->Previewpanel->Size = System::Drawing::Size(1171, 590);
			this->Previewpanel->TabIndex = 3;
			// 
			// PreviewtextBox
			// 
			this->PreviewtextBox->BackColor = System::Drawing::SystemColors::Info;
			this->PreviewtextBox->Cursor = System::Windows::Forms::Cursors::IBeam;
			this->PreviewtextBox->Enabled = false;
			this->PreviewtextBox->Font = (gcnew System::Drawing::Font(L"Courier New", 10.86792F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(0)));
			this->PreviewtextBox->Location = System::Drawing::Point(0, 3);
			this->PreviewtextBox->Multiline = true;
			this->PreviewtextBox->Name = L"PreviewtextBox";
			this->PreviewtextBox->ReadOnly = true;
			this->PreviewtextBox->Size = System::Drawing::Size(1168, 584);
			this->PreviewtextBox->TabIndex = 0;
			// 
			// OrientationExport
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(1194, 723);
			this->Controls->Add(this->Properties);
			this->Controls->Add(this->PreviewBox);
			this->FormBorderStyle = System::Windows::Forms::FormBorderStyle::FixedToolWindow;
			this->Name = L"OrientationExport";
			this->Text = L"Export Orientation";
			this->Properties->ResumeLayout(false);
			this->Properties->PerformLayout();
			this->PreviewBox->ResumeLayout(false);
			this->Previewpanel->ResumeLayout(false);
			this->Previewpanel->PerformLayout();
			this->ResumeLayout(false);

		}
#pragma endregion

#pragma region Non-autogenerated members
	private: Form^ orientation;
	private: System::Void Write();
#pragma endregion

#pragma region Handlers
private: System::Void checkBox_CheckedChanged(System::Object^  sender, System::EventArgs^  e) { Write(); }
private: System::Void RemoveAnisbutton_Click(System::Object^  sender, System::EventArgs^  e) { Clipboard::SetText(PreviewtextBox->Text);}
private: System::Void Exportbutton_Click(System::Object^  , System::EventArgs^  );
#pragma endregion
};
}
